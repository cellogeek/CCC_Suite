// source: proscreen.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.rv.data.ProPresenterScreen');
goog.provide('proto.rv.data.ProPresenterScreen.ArrangementCase');
goog.provide('proto.rv.data.ProPresenterScreen.CombinedArrangement');
goog.provide('proto.rv.data.ProPresenterScreen.EdgeBlendArrangement');
goog.provide('proto.rv.data.ProPresenterScreen.ScreenType');
goog.provide('proto.rv.data.ProPresenterScreen.SingleArrangement');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.rv.data.Color');
goog.require('proto.rv.data.EdgeBlend');
goog.require('proto.rv.data.Screen');
goog.require('proto.rv.data.UUID');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProPresenterScreen = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rv.data.ProPresenterScreen.oneofGroups_);
};
goog.inherits(proto.rv.data.ProPresenterScreen, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProPresenterScreen.displayName = 'proto.rv.data.ProPresenterScreen';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProPresenterScreen.SingleArrangement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rv.data.ProPresenterScreen.SingleArrangement.repeatedFields_, null);
};
goog.inherits(proto.rv.data.ProPresenterScreen.SingleArrangement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProPresenterScreen.SingleArrangement.displayName = 'proto.rv.data.ProPresenterScreen.SingleArrangement';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProPresenterScreen.CombinedArrangement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rv.data.ProPresenterScreen.CombinedArrangement.repeatedFields_, null);
};
goog.inherits(proto.rv.data.ProPresenterScreen.CombinedArrangement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProPresenterScreen.CombinedArrangement.displayName = 'proto.rv.data.ProPresenterScreen.CombinedArrangement';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProPresenterScreen.EdgeBlendArrangement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rv.data.ProPresenterScreen.EdgeBlendArrangement.repeatedFields_, null);
};
goog.inherits(proto.rv.data.ProPresenterScreen.EdgeBlendArrangement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProPresenterScreen.EdgeBlendArrangement.displayName = 'proto.rv.data.ProPresenterScreen.EdgeBlendArrangement';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rv.data.ProPresenterScreen.oneofGroups_ = [[3,4,5]];

/**
 * @enum {number}
 */
proto.rv.data.ProPresenterScreen.ArrangementCase = {
  ARRANGEMENT_NOT_SET: 0,
  ARRANGEMENT_SINGLE: 3,
  ARRANGEMENT_COMBINED: 4,
  ARRANGEMENT_EDGE_BLEND: 5
};

/**
 * @return {proto.rv.data.ProPresenterScreen.ArrangementCase}
 */
proto.rv.data.ProPresenterScreen.prototype.getArrangementCase = function() {
  return /** @type {proto.rv.data.ProPresenterScreen.ArrangementCase} */(jspb.Message.computeOneofCase(this, proto.rv.data.ProPresenterScreen.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProPresenterScreen.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProPresenterScreen.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProPresenterScreen} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProPresenterScreen.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, ""),
screenType: jspb.Message.getFieldWithDefault(msg, 2, 0),
backgroundColor: (f = msg.getBackgroundColor()) && proto.rv.data.Color.toObject(includeInstance, f),
uuid: (f = msg.getUuid()) && proto.rv.data.UUID.toObject(includeInstance, f),
backgroundColorEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
arrangementSingle: (f = msg.getArrangementSingle()) && proto.rv.data.ProPresenterScreen.SingleArrangement.toObject(includeInstance, f),
arrangementCombined: (f = msg.getArrangementCombined()) && proto.rv.data.ProPresenterScreen.CombinedArrangement.toObject(includeInstance, f),
arrangementEdgeBlend: (f = msg.getArrangementEdgeBlend()) && proto.rv.data.ProPresenterScreen.EdgeBlendArrangement.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProPresenterScreen}
 */
proto.rv.data.ProPresenterScreen.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProPresenterScreen;
  return proto.rv.data.ProPresenterScreen.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProPresenterScreen} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProPresenterScreen}
 */
proto.rv.data.ProPresenterScreen.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!proto.rv.data.ProPresenterScreen.ScreenType} */ (reader.readEnum());
      msg.setScreenType(value);
      break;
    case 6:
      var value = new proto.rv.data.Color;
      reader.readMessage(value,proto.rv.data.Color.deserializeBinaryFromReader);
      msg.setBackgroundColor(value);
      break;
    case 7:
      var value = new proto.rv.data.UUID;
      reader.readMessage(value,proto.rv.data.UUID.deserializeBinaryFromReader);
      msg.setUuid(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBackgroundColorEnabled(value);
      break;
    case 3:
      var value = new proto.rv.data.ProPresenterScreen.SingleArrangement;
      reader.readMessage(value,proto.rv.data.ProPresenterScreen.SingleArrangement.deserializeBinaryFromReader);
      msg.setArrangementSingle(value);
      break;
    case 4:
      var value = new proto.rv.data.ProPresenterScreen.CombinedArrangement;
      reader.readMessage(value,proto.rv.data.ProPresenterScreen.CombinedArrangement.deserializeBinaryFromReader);
      msg.setArrangementCombined(value);
      break;
    case 5:
      var value = new proto.rv.data.ProPresenterScreen.EdgeBlendArrangement;
      reader.readMessage(value,proto.rv.data.ProPresenterScreen.EdgeBlendArrangement.deserializeBinaryFromReader);
      msg.setArrangementEdgeBlend(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProPresenterScreen.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProPresenterScreen.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProPresenterScreen} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProPresenterScreen.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getScreenType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getBackgroundColor();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.rv.data.Color.serializeBinaryToWriter
    );
  }
  f = message.getUuid();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.rv.data.UUID.serializeBinaryToWriter
    );
  }
  f = message.getBackgroundColorEnabled();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getArrangementSingle();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rv.data.ProPresenterScreen.SingleArrangement.serializeBinaryToWriter
    );
  }
  f = message.getArrangementCombined();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rv.data.ProPresenterScreen.CombinedArrangement.serializeBinaryToWriter
    );
  }
  f = message.getArrangementEdgeBlend();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.rv.data.ProPresenterScreen.EdgeBlendArrangement.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.rv.data.ProPresenterScreen.ScreenType = {
  SCREEN_TYPE_UNKNOWN: 0,
  SCREEN_TYPE_AUDIENCE: 1,
  SCREEN_TYPE_STAGE: 2
};


/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rv.data.ProPresenterScreen.SingleArrangement.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProPresenterScreen.SingleArrangement.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProPresenterScreen.SingleArrangement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProPresenterScreen.SingleArrangement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProPresenterScreen.SingleArrangement.toObject = function(includeInstance, msg) {
  var f, obj = {
screensList: jspb.Message.toObjectList(msg.getScreensList(),
    proto.rv.data.Screen.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProPresenterScreen.SingleArrangement}
 */
proto.rv.data.ProPresenterScreen.SingleArrangement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProPresenterScreen.SingleArrangement;
  return proto.rv.data.ProPresenterScreen.SingleArrangement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProPresenterScreen.SingleArrangement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProPresenterScreen.SingleArrangement}
 */
proto.rv.data.ProPresenterScreen.SingleArrangement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.Screen;
      reader.readMessage(value,proto.rv.data.Screen.deserializeBinaryFromReader);
      msg.addScreens(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProPresenterScreen.SingleArrangement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProPresenterScreen.SingleArrangement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProPresenterScreen.SingleArrangement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProPresenterScreen.SingleArrangement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScreensList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rv.data.Screen.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Screen screens = 1;
 * @return {!Array<!proto.rv.data.Screen>}
 */
proto.rv.data.ProPresenterScreen.SingleArrangement.prototype.getScreensList = function() {
  return /** @type{!Array<!proto.rv.data.Screen>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rv.data.Screen, 1));
};


/**
 * @param {!Array<!proto.rv.data.Screen>} value
 * @return {!proto.rv.data.ProPresenterScreen.SingleArrangement} returns this
*/
proto.rv.data.ProPresenterScreen.SingleArrangement.prototype.setScreensList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.rv.data.Screen=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rv.data.Screen}
 */
proto.rv.data.ProPresenterScreen.SingleArrangement.prototype.addScreens = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rv.data.Screen, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.ProPresenterScreen.SingleArrangement} returns this
 */
proto.rv.data.ProPresenterScreen.SingleArrangement.prototype.clearScreensList = function() {
  return this.setScreensList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rv.data.ProPresenterScreen.CombinedArrangement.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProPresenterScreen.CombinedArrangement.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProPresenterScreen.CombinedArrangement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProPresenterScreen.CombinedArrangement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProPresenterScreen.CombinedArrangement.toObject = function(includeInstance, msg) {
  var f, obj = {
screensList: jspb.Message.toObjectList(msg.getScreensList(),
    proto.rv.data.Screen.toObject, includeInstance),
rows: jspb.Message.getFieldWithDefault(msg, 2, 0),
columns: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProPresenterScreen.CombinedArrangement}
 */
proto.rv.data.ProPresenterScreen.CombinedArrangement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProPresenterScreen.CombinedArrangement;
  return proto.rv.data.ProPresenterScreen.CombinedArrangement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProPresenterScreen.CombinedArrangement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProPresenterScreen.CombinedArrangement}
 */
proto.rv.data.ProPresenterScreen.CombinedArrangement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.Screen;
      reader.readMessage(value,proto.rv.data.Screen.deserializeBinaryFromReader);
      msg.addScreens(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRows(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setColumns(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProPresenterScreen.CombinedArrangement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProPresenterScreen.CombinedArrangement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProPresenterScreen.CombinedArrangement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProPresenterScreen.CombinedArrangement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScreensList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rv.data.Screen.serializeBinaryToWriter
    );
  }
  f = message.getRows();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getColumns();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * repeated Screen screens = 1;
 * @return {!Array<!proto.rv.data.Screen>}
 */
proto.rv.data.ProPresenterScreen.CombinedArrangement.prototype.getScreensList = function() {
  return /** @type{!Array<!proto.rv.data.Screen>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rv.data.Screen, 1));
};


/**
 * @param {!Array<!proto.rv.data.Screen>} value
 * @return {!proto.rv.data.ProPresenterScreen.CombinedArrangement} returns this
*/
proto.rv.data.ProPresenterScreen.CombinedArrangement.prototype.setScreensList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.rv.data.Screen=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rv.data.Screen}
 */
proto.rv.data.ProPresenterScreen.CombinedArrangement.prototype.addScreens = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rv.data.Screen, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.ProPresenterScreen.CombinedArrangement} returns this
 */
proto.rv.data.ProPresenterScreen.CombinedArrangement.prototype.clearScreensList = function() {
  return this.setScreensList([]);
};


/**
 * optional uint32 rows = 2;
 * @return {number}
 */
proto.rv.data.ProPresenterScreen.CombinedArrangement.prototype.getRows = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.ProPresenterScreen.CombinedArrangement} returns this
 */
proto.rv.data.ProPresenterScreen.CombinedArrangement.prototype.setRows = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 columns = 3;
 * @return {number}
 */
proto.rv.data.ProPresenterScreen.CombinedArrangement.prototype.getColumns = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.ProPresenterScreen.CombinedArrangement} returns this
 */
proto.rv.data.ProPresenterScreen.CombinedArrangement.prototype.setColumns = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rv.data.ProPresenterScreen.EdgeBlendArrangement.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProPresenterScreen.EdgeBlendArrangement.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProPresenterScreen.EdgeBlendArrangement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProPresenterScreen.EdgeBlendArrangement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProPresenterScreen.EdgeBlendArrangement.toObject = function(includeInstance, msg) {
  var f, obj = {
screenCount: jspb.Message.getFieldWithDefault(msg, 1, 0),
screensList: jspb.Message.toObjectList(msg.getScreensList(),
    proto.rv.data.Screen.toObject, includeInstance),
edgeBlendsList: jspb.Message.toObjectList(msg.getEdgeBlendsList(),
    proto.rv.data.EdgeBlend.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProPresenterScreen.EdgeBlendArrangement}
 */
proto.rv.data.ProPresenterScreen.EdgeBlendArrangement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProPresenterScreen.EdgeBlendArrangement;
  return proto.rv.data.ProPresenterScreen.EdgeBlendArrangement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProPresenterScreen.EdgeBlendArrangement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProPresenterScreen.EdgeBlendArrangement}
 */
proto.rv.data.ProPresenterScreen.EdgeBlendArrangement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScreenCount(value);
      break;
    case 2:
      var value = new proto.rv.data.Screen;
      reader.readMessage(value,proto.rv.data.Screen.deserializeBinaryFromReader);
      msg.addScreens(value);
      break;
    case 3:
      var value = new proto.rv.data.EdgeBlend;
      reader.readMessage(value,proto.rv.data.EdgeBlend.deserializeBinaryFromReader);
      msg.addEdgeBlends(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProPresenterScreen.EdgeBlendArrangement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProPresenterScreen.EdgeBlendArrangement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProPresenterScreen.EdgeBlendArrangement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProPresenterScreen.EdgeBlendArrangement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScreenCount();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getScreensList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.rv.data.Screen.serializeBinaryToWriter
    );
  }
  f = message.getEdgeBlendsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.rv.data.EdgeBlend.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 screen_count = 1;
 * @return {number}
 */
proto.rv.data.ProPresenterScreen.EdgeBlendArrangement.prototype.getScreenCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.ProPresenterScreen.EdgeBlendArrangement} returns this
 */
proto.rv.data.ProPresenterScreen.EdgeBlendArrangement.prototype.setScreenCount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated Screen screens = 2;
 * @return {!Array<!proto.rv.data.Screen>}
 */
proto.rv.data.ProPresenterScreen.EdgeBlendArrangement.prototype.getScreensList = function() {
  return /** @type{!Array<!proto.rv.data.Screen>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rv.data.Screen, 2));
};


/**
 * @param {!Array<!proto.rv.data.Screen>} value
 * @return {!proto.rv.data.ProPresenterScreen.EdgeBlendArrangement} returns this
*/
proto.rv.data.ProPresenterScreen.EdgeBlendArrangement.prototype.setScreensList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.rv.data.Screen=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rv.data.Screen}
 */
proto.rv.data.ProPresenterScreen.EdgeBlendArrangement.prototype.addScreens = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.rv.data.Screen, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.ProPresenterScreen.EdgeBlendArrangement} returns this
 */
proto.rv.data.ProPresenterScreen.EdgeBlendArrangement.prototype.clearScreensList = function() {
  return this.setScreensList([]);
};


/**
 * repeated EdgeBlend edge_blends = 3;
 * @return {!Array<!proto.rv.data.EdgeBlend>}
 */
proto.rv.data.ProPresenterScreen.EdgeBlendArrangement.prototype.getEdgeBlendsList = function() {
  return /** @type{!Array<!proto.rv.data.EdgeBlend>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rv.data.EdgeBlend, 3));
};


/**
 * @param {!Array<!proto.rv.data.EdgeBlend>} value
 * @return {!proto.rv.data.ProPresenterScreen.EdgeBlendArrangement} returns this
*/
proto.rv.data.ProPresenterScreen.EdgeBlendArrangement.prototype.setEdgeBlendsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.rv.data.EdgeBlend=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rv.data.EdgeBlend}
 */
proto.rv.data.ProPresenterScreen.EdgeBlendArrangement.prototype.addEdgeBlends = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.rv.data.EdgeBlend, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.ProPresenterScreen.EdgeBlendArrangement} returns this
 */
proto.rv.data.ProPresenterScreen.EdgeBlendArrangement.prototype.clearEdgeBlendsList = function() {
  return this.setEdgeBlendsList([]);
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.rv.data.ProPresenterScreen.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.ProPresenterScreen} returns this
 */
proto.rv.data.ProPresenterScreen.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ScreenType screen_type = 2;
 * @return {!proto.rv.data.ProPresenterScreen.ScreenType}
 */
proto.rv.data.ProPresenterScreen.prototype.getScreenType = function() {
  return /** @type {!proto.rv.data.ProPresenterScreen.ScreenType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.rv.data.ProPresenterScreen.ScreenType} value
 * @return {!proto.rv.data.ProPresenterScreen} returns this
 */
proto.rv.data.ProPresenterScreen.prototype.setScreenType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Color background_color = 6;
 * @return {?proto.rv.data.Color}
 */
proto.rv.data.ProPresenterScreen.prototype.getBackgroundColor = function() {
  return /** @type{?proto.rv.data.Color} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Color, 6));
};


/**
 * @param {?proto.rv.data.Color|undefined} value
 * @return {!proto.rv.data.ProPresenterScreen} returns this
*/
proto.rv.data.ProPresenterScreen.prototype.setBackgroundColor = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ProPresenterScreen} returns this
 */
proto.rv.data.ProPresenterScreen.prototype.clearBackgroundColor = function() {
  return this.setBackgroundColor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ProPresenterScreen.prototype.hasBackgroundColor = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional UUID uuid = 7;
 * @return {?proto.rv.data.UUID}
 */
proto.rv.data.ProPresenterScreen.prototype.getUuid = function() {
  return /** @type{?proto.rv.data.UUID} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.UUID, 7));
};


/**
 * @param {?proto.rv.data.UUID|undefined} value
 * @return {!proto.rv.data.ProPresenterScreen} returns this
*/
proto.rv.data.ProPresenterScreen.prototype.setUuid = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ProPresenterScreen} returns this
 */
proto.rv.data.ProPresenterScreen.prototype.clearUuid = function() {
  return this.setUuid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ProPresenterScreen.prototype.hasUuid = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bool background_color_enabled = 8;
 * @return {boolean}
 */
proto.rv.data.ProPresenterScreen.prototype.getBackgroundColorEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.ProPresenterScreen} returns this
 */
proto.rv.data.ProPresenterScreen.prototype.setBackgroundColorEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional SingleArrangement arrangement_single = 3;
 * @return {?proto.rv.data.ProPresenterScreen.SingleArrangement}
 */
proto.rv.data.ProPresenterScreen.prototype.getArrangementSingle = function() {
  return /** @type{?proto.rv.data.ProPresenterScreen.SingleArrangement} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ProPresenterScreen.SingleArrangement, 3));
};


/**
 * @param {?proto.rv.data.ProPresenterScreen.SingleArrangement|undefined} value
 * @return {!proto.rv.data.ProPresenterScreen} returns this
*/
proto.rv.data.ProPresenterScreen.prototype.setArrangementSingle = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.rv.data.ProPresenterScreen.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ProPresenterScreen} returns this
 */
proto.rv.data.ProPresenterScreen.prototype.clearArrangementSingle = function() {
  return this.setArrangementSingle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ProPresenterScreen.prototype.hasArrangementSingle = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional CombinedArrangement arrangement_combined = 4;
 * @return {?proto.rv.data.ProPresenterScreen.CombinedArrangement}
 */
proto.rv.data.ProPresenterScreen.prototype.getArrangementCombined = function() {
  return /** @type{?proto.rv.data.ProPresenterScreen.CombinedArrangement} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ProPresenterScreen.CombinedArrangement, 4));
};


/**
 * @param {?proto.rv.data.ProPresenterScreen.CombinedArrangement|undefined} value
 * @return {!proto.rv.data.ProPresenterScreen} returns this
*/
proto.rv.data.ProPresenterScreen.prototype.setArrangementCombined = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.rv.data.ProPresenterScreen.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ProPresenterScreen} returns this
 */
proto.rv.data.ProPresenterScreen.prototype.clearArrangementCombined = function() {
  return this.setArrangementCombined(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ProPresenterScreen.prototype.hasArrangementCombined = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional EdgeBlendArrangement arrangement_edge_blend = 5;
 * @return {?proto.rv.data.ProPresenterScreen.EdgeBlendArrangement}
 */
proto.rv.data.ProPresenterScreen.prototype.getArrangementEdgeBlend = function() {
  return /** @type{?proto.rv.data.ProPresenterScreen.EdgeBlendArrangement} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ProPresenterScreen.EdgeBlendArrangement, 5));
};


/**
 * @param {?proto.rv.data.ProPresenterScreen.EdgeBlendArrangement|undefined} value
 * @return {!proto.rv.data.ProPresenterScreen} returns this
*/
proto.rv.data.ProPresenterScreen.prototype.setArrangementEdgeBlend = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.rv.data.ProPresenterScreen.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ProPresenterScreen} returns this
 */
proto.rv.data.ProPresenterScreen.prototype.clearArrangementEdgeBlend = function() {
  return this.setArrangementEdgeBlend(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ProPresenterScreen.prototype.hasArrangementEdgeBlend = function() {
  return jspb.Message.getField(this, 5) != null;
};


