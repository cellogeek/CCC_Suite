// source: stage.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.rv.data.Stage');
goog.provide('proto.rv.data.Stage.Document');
goog.provide('proto.rv.data.Stage.Layout');
goog.provide('proto.rv.data.Stage.ScreenAssignment');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.rv.data.ApplicationInfo');
goog.require('proto.rv.data.CollectionElementType');
goog.require('proto.rv.data.Slide');
goog.require('proto.rv.data.UUID');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Stage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.Stage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Stage.displayName = 'proto.rv.data.Stage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Stage.Layout = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.Stage.Layout, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Stage.Layout.displayName = 'proto.rv.data.Stage.Layout';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Stage.Document = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rv.data.Stage.Document.repeatedFields_, null);
};
goog.inherits(proto.rv.data.Stage.Document, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Stage.Document.displayName = 'proto.rv.data.Stage.Document';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Stage.ScreenAssignment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.Stage.ScreenAssignment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Stage.ScreenAssignment.displayName = 'proto.rv.data.Stage.ScreenAssignment';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Stage.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Stage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Stage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Stage.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Stage}
 */
proto.rv.data.Stage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Stage;
  return proto.rv.data.Stage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Stage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Stage}
 */
proto.rv.data.Stage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Stage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Stage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Stage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Stage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Stage.Layout.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Stage.Layout.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Stage.Layout} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Stage.Layout.toObject = function(includeInstance, msg) {
  var f, obj = {
uuid: (f = msg.getUuid()) && proto.rv.data.UUID.toObject(includeInstance, f),
name: jspb.Message.getFieldWithDefault(msg, 2, ""),
slide: (f = msg.getSlide()) && proto.rv.data.Slide.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Stage.Layout}
 */
proto.rv.data.Stage.Layout.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Stage.Layout;
  return proto.rv.data.Stage.Layout.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Stage.Layout} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Stage.Layout}
 */
proto.rv.data.Stage.Layout.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.UUID;
      reader.readMessage(value,proto.rv.data.UUID.deserializeBinaryFromReader);
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.rv.data.Slide;
      reader.readMessage(value,proto.rv.data.Slide.deserializeBinaryFromReader);
      msg.setSlide(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Stage.Layout.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Stage.Layout.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Stage.Layout} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Stage.Layout.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.UUID.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSlide();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rv.data.Slide.serializeBinaryToWriter
    );
  }
};


/**
 * optional UUID uuid = 1;
 * @return {?proto.rv.data.UUID}
 */
proto.rv.data.Stage.Layout.prototype.getUuid = function() {
  return /** @type{?proto.rv.data.UUID} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.UUID, 1));
};


/**
 * @param {?proto.rv.data.UUID|undefined} value
 * @return {!proto.rv.data.Stage.Layout} returns this
*/
proto.rv.data.Stage.Layout.prototype.setUuid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Stage.Layout} returns this
 */
proto.rv.data.Stage.Layout.prototype.clearUuid = function() {
  return this.setUuid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Stage.Layout.prototype.hasUuid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.rv.data.Stage.Layout.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.Stage.Layout} returns this
 */
proto.rv.data.Stage.Layout.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Slide slide = 3;
 * @return {?proto.rv.data.Slide}
 */
proto.rv.data.Stage.Layout.prototype.getSlide = function() {
  return /** @type{?proto.rv.data.Slide} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Slide, 3));
};


/**
 * @param {?proto.rv.data.Slide|undefined} value
 * @return {!proto.rv.data.Stage.Layout} returns this
*/
proto.rv.data.Stage.Layout.prototype.setSlide = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Stage.Layout} returns this
 */
proto.rv.data.Stage.Layout.prototype.clearSlide = function() {
  return this.setSlide(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Stage.Layout.prototype.hasSlide = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rv.data.Stage.Document.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Stage.Document.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Stage.Document.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Stage.Document} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Stage.Document.toObject = function(includeInstance, msg) {
  var f, obj = {
applicationInfo: (f = msg.getApplicationInfo()) && proto.rv.data.ApplicationInfo.toObject(includeInstance, f),
layoutsList: jspb.Message.toObjectList(msg.getLayoutsList(),
    proto.rv.data.Stage.Layout.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Stage.Document}
 */
proto.rv.data.Stage.Document.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Stage.Document;
  return proto.rv.data.Stage.Document.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Stage.Document} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Stage.Document}
 */
proto.rv.data.Stage.Document.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.ApplicationInfo;
      reader.readMessage(value,proto.rv.data.ApplicationInfo.deserializeBinaryFromReader);
      msg.setApplicationInfo(value);
      break;
    case 2:
      var value = new proto.rv.data.Stage.Layout;
      reader.readMessage(value,proto.rv.data.Stage.Layout.deserializeBinaryFromReader);
      msg.addLayouts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Stage.Document.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Stage.Document.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Stage.Document} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Stage.Document.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApplicationInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.ApplicationInfo.serializeBinaryToWriter
    );
  }
  f = message.getLayoutsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.rv.data.Stage.Layout.serializeBinaryToWriter
    );
  }
};


/**
 * optional ApplicationInfo application_info = 1;
 * @return {?proto.rv.data.ApplicationInfo}
 */
proto.rv.data.Stage.Document.prototype.getApplicationInfo = function() {
  return /** @type{?proto.rv.data.ApplicationInfo} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ApplicationInfo, 1));
};


/**
 * @param {?proto.rv.data.ApplicationInfo|undefined} value
 * @return {!proto.rv.data.Stage.Document} returns this
*/
proto.rv.data.Stage.Document.prototype.setApplicationInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Stage.Document} returns this
 */
proto.rv.data.Stage.Document.prototype.clearApplicationInfo = function() {
  return this.setApplicationInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Stage.Document.prototype.hasApplicationInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Layout layouts = 2;
 * @return {!Array<!proto.rv.data.Stage.Layout>}
 */
proto.rv.data.Stage.Document.prototype.getLayoutsList = function() {
  return /** @type{!Array<!proto.rv.data.Stage.Layout>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rv.data.Stage.Layout, 2));
};


/**
 * @param {!Array<!proto.rv.data.Stage.Layout>} value
 * @return {!proto.rv.data.Stage.Document} returns this
*/
proto.rv.data.Stage.Document.prototype.setLayoutsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.rv.data.Stage.Layout=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rv.data.Stage.Layout}
 */
proto.rv.data.Stage.Document.prototype.addLayouts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.rv.data.Stage.Layout, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.Stage.Document} returns this
 */
proto.rv.data.Stage.Document.prototype.clearLayoutsList = function() {
  return this.setLayoutsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Stage.ScreenAssignment.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Stage.ScreenAssignment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Stage.ScreenAssignment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Stage.ScreenAssignment.toObject = function(includeInstance, msg) {
  var f, obj = {
screen: (f = msg.getScreen()) && proto.rv.data.CollectionElementType.toObject(includeInstance, f),
layout: (f = msg.getLayout()) && proto.rv.data.CollectionElementType.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Stage.ScreenAssignment}
 */
proto.rv.data.Stage.ScreenAssignment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Stage.ScreenAssignment;
  return proto.rv.data.Stage.ScreenAssignment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Stage.ScreenAssignment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Stage.ScreenAssignment}
 */
proto.rv.data.Stage.ScreenAssignment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.CollectionElementType;
      reader.readMessage(value,proto.rv.data.CollectionElementType.deserializeBinaryFromReader);
      msg.setScreen(value);
      break;
    case 2:
      var value = new proto.rv.data.CollectionElementType;
      reader.readMessage(value,proto.rv.data.CollectionElementType.deserializeBinaryFromReader);
      msg.setLayout(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Stage.ScreenAssignment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Stage.ScreenAssignment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Stage.ScreenAssignment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Stage.ScreenAssignment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScreen();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.CollectionElementType.serializeBinaryToWriter
    );
  }
  f = message.getLayout();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rv.data.CollectionElementType.serializeBinaryToWriter
    );
  }
};


/**
 * optional CollectionElementType screen = 1;
 * @return {?proto.rv.data.CollectionElementType}
 */
proto.rv.data.Stage.ScreenAssignment.prototype.getScreen = function() {
  return /** @type{?proto.rv.data.CollectionElementType} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.CollectionElementType, 1));
};


/**
 * @param {?proto.rv.data.CollectionElementType|undefined} value
 * @return {!proto.rv.data.Stage.ScreenAssignment} returns this
*/
proto.rv.data.Stage.ScreenAssignment.prototype.setScreen = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Stage.ScreenAssignment} returns this
 */
proto.rv.data.Stage.ScreenAssignment.prototype.clearScreen = function() {
  return this.setScreen(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Stage.ScreenAssignment.prototype.hasScreen = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CollectionElementType layout = 2;
 * @return {?proto.rv.data.CollectionElementType}
 */
proto.rv.data.Stage.ScreenAssignment.prototype.getLayout = function() {
  return /** @type{?proto.rv.data.CollectionElementType} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.CollectionElementType, 2));
};


/**
 * @param {?proto.rv.data.CollectionElementType|undefined} value
 * @return {!proto.rv.data.Stage.ScreenAssignment} returns this
*/
proto.rv.data.Stage.ScreenAssignment.prototype.setLayout = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Stage.ScreenAssignment} returns this
 */
proto.rv.data.Stage.ScreenAssignment.prototype.clearLayout = function() {
  return this.setLayout(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Stage.ScreenAssignment.prototype.hasLayout = function() {
  return jspb.Message.getField(this, 2) != null;
};


