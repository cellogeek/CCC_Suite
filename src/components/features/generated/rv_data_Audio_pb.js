// source: audio.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.rv.data.Audio');
goog.provide('proto.rv.data.Audio.Device');
goog.provide('proto.rv.data.Audio.Device.Format');
goog.provide('proto.rv.data.Audio.Device.Format.Type');
goog.provide('proto.rv.data.Audio.LogicalChannel');
goog.provide('proto.rv.data.Audio.LogicalChannel.OutputChannel');
goog.provide('proto.rv.data.Audio.OutputSetup');
goog.provide('proto.rv.data.Audio.PhysicalChannel');
goog.provide('proto.rv.data.Audio.SettingsDocument');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.rv.data.UUID');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Audio = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.Audio, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Audio.displayName = 'proto.rv.data.Audio';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Audio.SettingsDocument = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.Audio.SettingsDocument, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Audio.SettingsDocument.displayName = 'proto.rv.data.Audio.SettingsDocument';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Audio.OutputSetup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rv.data.Audio.OutputSetup.repeatedFields_, null);
};
goog.inherits(proto.rv.data.Audio.OutputSetup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Audio.OutputSetup.displayName = 'proto.rv.data.Audio.OutputSetup';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Audio.Device = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rv.data.Audio.Device.repeatedFields_, null);
};
goog.inherits(proto.rv.data.Audio.Device, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Audio.Device.displayName = 'proto.rv.data.Audio.Device';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Audio.Device.Format = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.Audio.Device.Format, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Audio.Device.Format.displayName = 'proto.rv.data.Audio.Device.Format';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Audio.LogicalChannel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rv.data.Audio.LogicalChannel.repeatedFields_, null);
};
goog.inherits(proto.rv.data.Audio.LogicalChannel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Audio.LogicalChannel.displayName = 'proto.rv.data.Audio.LogicalChannel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Audio.LogicalChannel.OutputChannel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.Audio.LogicalChannel.OutputChannel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Audio.LogicalChannel.OutputChannel.displayName = 'proto.rv.data.Audio.LogicalChannel.OutputChannel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Audio.PhysicalChannel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.Audio.PhysicalChannel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Audio.PhysicalChannel.displayName = 'proto.rv.data.Audio.PhysicalChannel';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Audio.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Audio.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Audio} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Audio.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Audio}
 */
proto.rv.data.Audio.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Audio;
  return proto.rv.data.Audio.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Audio} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Audio}
 */
proto.rv.data.Audio.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Audio.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Audio.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Audio} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Audio.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Audio.SettingsDocument.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Audio.SettingsDocument.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Audio.SettingsDocument} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Audio.SettingsDocument.toObject = function(includeInstance, msg) {
  var f, obj = {
outputSetup: (f = msg.getOutputSetup()) && proto.rv.data.Audio.OutputSetup.toObject(includeInstance, f),
monitorDevice: (f = msg.getMonitorDevice()) && proto.rv.data.Audio.Device.toObject(includeInstance, f),
monitorOnMains: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Audio.SettingsDocument}
 */
proto.rv.data.Audio.SettingsDocument.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Audio.SettingsDocument;
  return proto.rv.data.Audio.SettingsDocument.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Audio.SettingsDocument} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Audio.SettingsDocument}
 */
proto.rv.data.Audio.SettingsDocument.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.Audio.OutputSetup;
      reader.readMessage(value,proto.rv.data.Audio.OutputSetup.deserializeBinaryFromReader);
      msg.setOutputSetup(value);
      break;
    case 2:
      var value = new proto.rv.data.Audio.Device;
      reader.readMessage(value,proto.rv.data.Audio.Device.deserializeBinaryFromReader);
      msg.setMonitorDevice(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMonitorOnMains(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Audio.SettingsDocument.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Audio.SettingsDocument.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Audio.SettingsDocument} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Audio.SettingsDocument.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOutputSetup();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.Audio.OutputSetup.serializeBinaryToWriter
    );
  }
  f = message.getMonitorDevice();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rv.data.Audio.Device.serializeBinaryToWriter
    );
  }
  f = message.getMonitorOnMains();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional OutputSetup output_setup = 1;
 * @return {?proto.rv.data.Audio.OutputSetup}
 */
proto.rv.data.Audio.SettingsDocument.prototype.getOutputSetup = function() {
  return /** @type{?proto.rv.data.Audio.OutputSetup} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Audio.OutputSetup, 1));
};


/**
 * @param {?proto.rv.data.Audio.OutputSetup|undefined} value
 * @return {!proto.rv.data.Audio.SettingsDocument} returns this
*/
proto.rv.data.Audio.SettingsDocument.prototype.setOutputSetup = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Audio.SettingsDocument} returns this
 */
proto.rv.data.Audio.SettingsDocument.prototype.clearOutputSetup = function() {
  return this.setOutputSetup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Audio.SettingsDocument.prototype.hasOutputSetup = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Device monitor_device = 2;
 * @return {?proto.rv.data.Audio.Device}
 */
proto.rv.data.Audio.SettingsDocument.prototype.getMonitorDevice = function() {
  return /** @type{?proto.rv.data.Audio.Device} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Audio.Device, 2));
};


/**
 * @param {?proto.rv.data.Audio.Device|undefined} value
 * @return {!proto.rv.data.Audio.SettingsDocument} returns this
*/
proto.rv.data.Audio.SettingsDocument.prototype.setMonitorDevice = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Audio.SettingsDocument} returns this
 */
proto.rv.data.Audio.SettingsDocument.prototype.clearMonitorDevice = function() {
  return this.setMonitorDevice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Audio.SettingsDocument.prototype.hasMonitorDevice = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool monitor_on_mains = 3;
 * @return {boolean}
 */
proto.rv.data.Audio.SettingsDocument.prototype.getMonitorOnMains = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.Audio.SettingsDocument} returns this
 */
proto.rv.data.Audio.SettingsDocument.prototype.setMonitorOnMains = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rv.data.Audio.OutputSetup.repeatedFields_ = [3,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Audio.OutputSetup.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Audio.OutputSetup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Audio.OutputSetup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Audio.OutputSetup.toObject = function(includeInstance, msg) {
  var f, obj = {
uuid: (f = msg.getUuid()) && proto.rv.data.UUID.toObject(includeInstance, f),
audioDevice: (f = msg.getAudioDevice()) && proto.rv.data.Audio.Device.toObject(includeInstance, f),
logicalChannelsList: jspb.Message.toObjectList(msg.getLogicalChannelsList(),
    proto.rv.data.Audio.LogicalChannel.toObject, includeInstance),
audioDelay: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
masterLevel: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
physicalChanelsList: jspb.Message.toObjectList(msg.getPhysicalChanelsList(),
    proto.rv.data.Audio.PhysicalChannel.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Audio.OutputSetup}
 */
proto.rv.data.Audio.OutputSetup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Audio.OutputSetup;
  return proto.rv.data.Audio.OutputSetup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Audio.OutputSetup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Audio.OutputSetup}
 */
proto.rv.data.Audio.OutputSetup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.UUID;
      reader.readMessage(value,proto.rv.data.UUID.deserializeBinaryFromReader);
      msg.setUuid(value);
      break;
    case 2:
      var value = new proto.rv.data.Audio.Device;
      reader.readMessage(value,proto.rv.data.Audio.Device.deserializeBinaryFromReader);
      msg.setAudioDevice(value);
      break;
    case 3:
      var value = new proto.rv.data.Audio.LogicalChannel;
      reader.readMessage(value,proto.rv.data.Audio.LogicalChannel.deserializeBinaryFromReader);
      msg.addLogicalChannels(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAudioDelay(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMasterLevel(value);
      break;
    case 6:
      var value = new proto.rv.data.Audio.PhysicalChannel;
      reader.readMessage(value,proto.rv.data.Audio.PhysicalChannel.deserializeBinaryFromReader);
      msg.addPhysicalChanels(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Audio.OutputSetup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Audio.OutputSetup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Audio.OutputSetup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Audio.OutputSetup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.UUID.serializeBinaryToWriter
    );
  }
  f = message.getAudioDevice();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rv.data.Audio.Device.serializeBinaryToWriter
    );
  }
  f = message.getLogicalChannelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.rv.data.Audio.LogicalChannel.serializeBinaryToWriter
    );
  }
  f = message.getAudioDelay();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getMasterLevel();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getPhysicalChanelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.rv.data.Audio.PhysicalChannel.serializeBinaryToWriter
    );
  }
};


/**
 * optional UUID uuid = 1;
 * @return {?proto.rv.data.UUID}
 */
proto.rv.data.Audio.OutputSetup.prototype.getUuid = function() {
  return /** @type{?proto.rv.data.UUID} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.UUID, 1));
};


/**
 * @param {?proto.rv.data.UUID|undefined} value
 * @return {!proto.rv.data.Audio.OutputSetup} returns this
*/
proto.rv.data.Audio.OutputSetup.prototype.setUuid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Audio.OutputSetup} returns this
 */
proto.rv.data.Audio.OutputSetup.prototype.clearUuid = function() {
  return this.setUuid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Audio.OutputSetup.prototype.hasUuid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Device audio_device = 2;
 * @return {?proto.rv.data.Audio.Device}
 */
proto.rv.data.Audio.OutputSetup.prototype.getAudioDevice = function() {
  return /** @type{?proto.rv.data.Audio.Device} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Audio.Device, 2));
};


/**
 * @param {?proto.rv.data.Audio.Device|undefined} value
 * @return {!proto.rv.data.Audio.OutputSetup} returns this
*/
proto.rv.data.Audio.OutputSetup.prototype.setAudioDevice = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Audio.OutputSetup} returns this
 */
proto.rv.data.Audio.OutputSetup.prototype.clearAudioDevice = function() {
  return this.setAudioDevice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Audio.OutputSetup.prototype.hasAudioDevice = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated LogicalChannel logical_channels = 3;
 * @return {!Array<!proto.rv.data.Audio.LogicalChannel>}
 */
proto.rv.data.Audio.OutputSetup.prototype.getLogicalChannelsList = function() {
  return /** @type{!Array<!proto.rv.data.Audio.LogicalChannel>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rv.data.Audio.LogicalChannel, 3));
};


/**
 * @param {!Array<!proto.rv.data.Audio.LogicalChannel>} value
 * @return {!proto.rv.data.Audio.OutputSetup} returns this
*/
proto.rv.data.Audio.OutputSetup.prototype.setLogicalChannelsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.rv.data.Audio.LogicalChannel=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rv.data.Audio.LogicalChannel}
 */
proto.rv.data.Audio.OutputSetup.prototype.addLogicalChannels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.rv.data.Audio.LogicalChannel, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.Audio.OutputSetup} returns this
 */
proto.rv.data.Audio.OutputSetup.prototype.clearLogicalChannelsList = function() {
  return this.setLogicalChannelsList([]);
};


/**
 * optional double audio_delay = 4;
 * @return {number}
 */
proto.rv.data.Audio.OutputSetup.prototype.getAudioDelay = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.Audio.OutputSetup} returns this
 */
proto.rv.data.Audio.OutputSetup.prototype.setAudioDelay = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double master_level = 5;
 * @return {number}
 */
proto.rv.data.Audio.OutputSetup.prototype.getMasterLevel = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.Audio.OutputSetup} returns this
 */
proto.rv.data.Audio.OutputSetup.prototype.setMasterLevel = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * repeated PhysicalChannel physical_chanels = 6;
 * @return {!Array<!proto.rv.data.Audio.PhysicalChannel>}
 */
proto.rv.data.Audio.OutputSetup.prototype.getPhysicalChanelsList = function() {
  return /** @type{!Array<!proto.rv.data.Audio.PhysicalChannel>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rv.data.Audio.PhysicalChannel, 6));
};


/**
 * @param {!Array<!proto.rv.data.Audio.PhysicalChannel>} value
 * @return {!proto.rv.data.Audio.OutputSetup} returns this
*/
proto.rv.data.Audio.OutputSetup.prototype.setPhysicalChanelsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.rv.data.Audio.PhysicalChannel=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rv.data.Audio.PhysicalChannel}
 */
proto.rv.data.Audio.OutputSetup.prototype.addPhysicalChanels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.rv.data.Audio.PhysicalChannel, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.Audio.OutputSetup} returns this
 */
proto.rv.data.Audio.OutputSetup.prototype.clearPhysicalChanelsList = function() {
  return this.setPhysicalChanelsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rv.data.Audio.Device.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Audio.Device.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Audio.Device.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Audio.Device} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Audio.Device.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, ""),
renderid: jspb.Message.getFieldWithDefault(msg, 2, ""),
inputChannelCount: jspb.Message.getFieldWithDefault(msg, 3, 0),
outputChannelCount: jspb.Message.getFieldWithDefault(msg, 4, 0),
formatsList: jspb.Message.toObjectList(msg.getFormatsList(),
    proto.rv.data.Audio.Device.Format.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Audio.Device}
 */
proto.rv.data.Audio.Device.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Audio.Device;
  return proto.rv.data.Audio.Device.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Audio.Device} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Audio.Device}
 */
proto.rv.data.Audio.Device.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRenderid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInputChannelCount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOutputChannelCount(value);
      break;
    case 5:
      var value = new proto.rv.data.Audio.Device.Format;
      reader.readMessage(value,proto.rv.data.Audio.Device.Format.deserializeBinaryFromReader);
      msg.addFormats(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Audio.Device.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Audio.Device.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Audio.Device} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Audio.Device.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRenderid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getInputChannelCount();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getOutputChannelCount();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getFormatsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.rv.data.Audio.Device.Format.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Audio.Device.Format.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Audio.Device.Format.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Audio.Device.Format} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Audio.Device.Format.toObject = function(includeInstance, msg) {
  var f, obj = {
sampleRate: jspb.Message.getFieldWithDefault(msg, 1, 0),
bitDepth: jspb.Message.getFieldWithDefault(msg, 2, 0),
type: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Audio.Device.Format}
 */
proto.rv.data.Audio.Device.Format.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Audio.Device.Format;
  return proto.rv.data.Audio.Device.Format.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Audio.Device.Format} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Audio.Device.Format}
 */
proto.rv.data.Audio.Device.Format.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSampleRate(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBitDepth(value);
      break;
    case 3:
      var value = /** @type {!proto.rv.data.Audio.Device.Format.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Audio.Device.Format.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Audio.Device.Format.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Audio.Device.Format} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Audio.Device.Format.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSampleRate();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getBitDepth();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.rv.data.Audio.Device.Format.Type = {
  TYPE_INT: 0,
  TYPE_FLOAT: 1
};

/**
 * optional uint32 sample_rate = 1;
 * @return {number}
 */
proto.rv.data.Audio.Device.Format.prototype.getSampleRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.Audio.Device.Format} returns this
 */
proto.rv.data.Audio.Device.Format.prototype.setSampleRate = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 bit_depth = 2;
 * @return {number}
 */
proto.rv.data.Audio.Device.Format.prototype.getBitDepth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.Audio.Device.Format} returns this
 */
proto.rv.data.Audio.Device.Format.prototype.setBitDepth = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Type type = 3;
 * @return {!proto.rv.data.Audio.Device.Format.Type}
 */
proto.rv.data.Audio.Device.Format.prototype.getType = function() {
  return /** @type {!proto.rv.data.Audio.Device.Format.Type} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.rv.data.Audio.Device.Format.Type} value
 * @return {!proto.rv.data.Audio.Device.Format} returns this
 */
proto.rv.data.Audio.Device.Format.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.rv.data.Audio.Device.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.Audio.Device} returns this
 */
proto.rv.data.Audio.Device.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string renderID = 2;
 * @return {string}
 */
proto.rv.data.Audio.Device.prototype.getRenderid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.Audio.Device} returns this
 */
proto.rv.data.Audio.Device.prototype.setRenderid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 input_channel_count = 3;
 * @return {number}
 */
proto.rv.data.Audio.Device.prototype.getInputChannelCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.Audio.Device} returns this
 */
proto.rv.data.Audio.Device.prototype.setInputChannelCount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 output_channel_count = 4;
 * @return {number}
 */
proto.rv.data.Audio.Device.prototype.getOutputChannelCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.Audio.Device} returns this
 */
proto.rv.data.Audio.Device.prototype.setOutputChannelCount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated Format formats = 5;
 * @return {!Array<!proto.rv.data.Audio.Device.Format>}
 */
proto.rv.data.Audio.Device.prototype.getFormatsList = function() {
  return /** @type{!Array<!proto.rv.data.Audio.Device.Format>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rv.data.Audio.Device.Format, 5));
};


/**
 * @param {!Array<!proto.rv.data.Audio.Device.Format>} value
 * @return {!proto.rv.data.Audio.Device} returns this
*/
proto.rv.data.Audio.Device.prototype.setFormatsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.rv.data.Audio.Device.Format=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rv.data.Audio.Device.Format}
 */
proto.rv.data.Audio.Device.prototype.addFormats = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.rv.data.Audio.Device.Format, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.Audio.Device} returns this
 */
proto.rv.data.Audio.Device.prototype.clearFormatsList = function() {
  return this.setFormatsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rv.data.Audio.LogicalChannel.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Audio.LogicalChannel.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Audio.LogicalChannel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Audio.LogicalChannel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Audio.LogicalChannel.toObject = function(includeInstance, msg) {
  var f, obj = {
uuid: (f = msg.getUuid()) && proto.rv.data.UUID.toObject(includeInstance, f),
name: jspb.Message.getFieldWithDefault(msg, 2, ""),
index: jspb.Message.getFieldWithDefault(msg, 3, 0),
muted: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
physicalAudioChannelsList: jspb.Message.toObjectList(msg.getPhysicalAudioChannelsList(),
    proto.rv.data.Audio.LogicalChannel.OutputChannel.toObject, includeInstance),
solo: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
testTone: jspb.Message.getBooleanFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Audio.LogicalChannel}
 */
proto.rv.data.Audio.LogicalChannel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Audio.LogicalChannel;
  return proto.rv.data.Audio.LogicalChannel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Audio.LogicalChannel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Audio.LogicalChannel}
 */
proto.rv.data.Audio.LogicalChannel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.UUID;
      reader.readMessage(value,proto.rv.data.UUID.deserializeBinaryFromReader);
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMuted(value);
      break;
    case 5:
      var value = new proto.rv.data.Audio.LogicalChannel.OutputChannel;
      reader.readMessage(value,proto.rv.data.Audio.LogicalChannel.OutputChannel.deserializeBinaryFromReader);
      msg.addPhysicalAudioChannels(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSolo(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTestTone(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Audio.LogicalChannel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Audio.LogicalChannel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Audio.LogicalChannel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Audio.LogicalChannel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.UUID.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getMuted();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getPhysicalAudioChannelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.rv.data.Audio.LogicalChannel.OutputChannel.serializeBinaryToWriter
    );
  }
  f = message.getSolo();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getTestTone();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Audio.LogicalChannel.OutputChannel.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Audio.LogicalChannel.OutputChannel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Audio.LogicalChannel.OutputChannel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Audio.LogicalChannel.OutputChannel.toObject = function(includeInstance, msg) {
  var f, obj = {
index: jspb.Message.getFieldWithDefault(msg, 1, 0),
muted: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
solo: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
testTone: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Audio.LogicalChannel.OutputChannel}
 */
proto.rv.data.Audio.LogicalChannel.OutputChannel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Audio.LogicalChannel.OutputChannel;
  return proto.rv.data.Audio.LogicalChannel.OutputChannel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Audio.LogicalChannel.OutputChannel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Audio.LogicalChannel.OutputChannel}
 */
proto.rv.data.Audio.LogicalChannel.OutputChannel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMuted(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSolo(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTestTone(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Audio.LogicalChannel.OutputChannel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Audio.LogicalChannel.OutputChannel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Audio.LogicalChannel.OutputChannel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Audio.LogicalChannel.OutputChannel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMuted();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getSolo();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getTestTone();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional uint32 index = 1;
 * @return {number}
 */
proto.rv.data.Audio.LogicalChannel.OutputChannel.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.Audio.LogicalChannel.OutputChannel} returns this
 */
proto.rv.data.Audio.LogicalChannel.OutputChannel.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool muted = 2;
 * @return {boolean}
 */
proto.rv.data.Audio.LogicalChannel.OutputChannel.prototype.getMuted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.Audio.LogicalChannel.OutputChannel} returns this
 */
proto.rv.data.Audio.LogicalChannel.OutputChannel.prototype.setMuted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool solo = 3;
 * @return {boolean}
 */
proto.rv.data.Audio.LogicalChannel.OutputChannel.prototype.getSolo = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.Audio.LogicalChannel.OutputChannel} returns this
 */
proto.rv.data.Audio.LogicalChannel.OutputChannel.prototype.setSolo = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool test_tone = 4;
 * @return {boolean}
 */
proto.rv.data.Audio.LogicalChannel.OutputChannel.prototype.getTestTone = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.Audio.LogicalChannel.OutputChannel} returns this
 */
proto.rv.data.Audio.LogicalChannel.OutputChannel.prototype.setTestTone = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional UUID uuid = 1;
 * @return {?proto.rv.data.UUID}
 */
proto.rv.data.Audio.LogicalChannel.prototype.getUuid = function() {
  return /** @type{?proto.rv.data.UUID} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.UUID, 1));
};


/**
 * @param {?proto.rv.data.UUID|undefined} value
 * @return {!proto.rv.data.Audio.LogicalChannel} returns this
*/
proto.rv.data.Audio.LogicalChannel.prototype.setUuid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Audio.LogicalChannel} returns this
 */
proto.rv.data.Audio.LogicalChannel.prototype.clearUuid = function() {
  return this.setUuid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Audio.LogicalChannel.prototype.hasUuid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.rv.data.Audio.LogicalChannel.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.Audio.LogicalChannel} returns this
 */
proto.rv.data.Audio.LogicalChannel.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 index = 3;
 * @return {number}
 */
proto.rv.data.Audio.LogicalChannel.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.Audio.LogicalChannel} returns this
 */
proto.rv.data.Audio.LogicalChannel.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool muted = 4;
 * @return {boolean}
 */
proto.rv.data.Audio.LogicalChannel.prototype.getMuted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.Audio.LogicalChannel} returns this
 */
proto.rv.data.Audio.LogicalChannel.prototype.setMuted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * repeated OutputChannel physical_audio_channels = 5;
 * @return {!Array<!proto.rv.data.Audio.LogicalChannel.OutputChannel>}
 */
proto.rv.data.Audio.LogicalChannel.prototype.getPhysicalAudioChannelsList = function() {
  return /** @type{!Array<!proto.rv.data.Audio.LogicalChannel.OutputChannel>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rv.data.Audio.LogicalChannel.OutputChannel, 5));
};


/**
 * @param {!Array<!proto.rv.data.Audio.LogicalChannel.OutputChannel>} value
 * @return {!proto.rv.data.Audio.LogicalChannel} returns this
*/
proto.rv.data.Audio.LogicalChannel.prototype.setPhysicalAudioChannelsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.rv.data.Audio.LogicalChannel.OutputChannel=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rv.data.Audio.LogicalChannel.OutputChannel}
 */
proto.rv.data.Audio.LogicalChannel.prototype.addPhysicalAudioChannels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.rv.data.Audio.LogicalChannel.OutputChannel, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.Audio.LogicalChannel} returns this
 */
proto.rv.data.Audio.LogicalChannel.prototype.clearPhysicalAudioChannelsList = function() {
  return this.setPhysicalAudioChannelsList([]);
};


/**
 * optional bool solo = 6;
 * @return {boolean}
 */
proto.rv.data.Audio.LogicalChannel.prototype.getSolo = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.Audio.LogicalChannel} returns this
 */
proto.rv.data.Audio.LogicalChannel.prototype.setSolo = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool test_tone = 7;
 * @return {boolean}
 */
proto.rv.data.Audio.LogicalChannel.prototype.getTestTone = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.Audio.LogicalChannel} returns this
 */
proto.rv.data.Audio.LogicalChannel.prototype.setTestTone = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Audio.PhysicalChannel.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Audio.PhysicalChannel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Audio.PhysicalChannel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Audio.PhysicalChannel.toObject = function(includeInstance, msg) {
  var f, obj = {
index: jspb.Message.getFieldWithDefault(msg, 1, 0),
muteEnable: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
soloEnable: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
toneEnable: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Audio.PhysicalChannel}
 */
proto.rv.data.Audio.PhysicalChannel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Audio.PhysicalChannel;
  return proto.rv.data.Audio.PhysicalChannel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Audio.PhysicalChannel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Audio.PhysicalChannel}
 */
proto.rv.data.Audio.PhysicalChannel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMuteEnable(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSoloEnable(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setToneEnable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Audio.PhysicalChannel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Audio.PhysicalChannel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Audio.PhysicalChannel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Audio.PhysicalChannel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMuteEnable();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getSoloEnable();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getToneEnable();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional uint32 index = 1;
 * @return {number}
 */
proto.rv.data.Audio.PhysicalChannel.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.Audio.PhysicalChannel} returns this
 */
proto.rv.data.Audio.PhysicalChannel.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool mute_enable = 2;
 * @return {boolean}
 */
proto.rv.data.Audio.PhysicalChannel.prototype.getMuteEnable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.Audio.PhysicalChannel} returns this
 */
proto.rv.data.Audio.PhysicalChannel.prototype.setMuteEnable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool solo_enable = 3;
 * @return {boolean}
 */
proto.rv.data.Audio.PhysicalChannel.prototype.getSoloEnable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.Audio.PhysicalChannel} returns this
 */
proto.rv.data.Audio.PhysicalChannel.prototype.setSoloEnable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool tone_enable = 4;
 * @return {boolean}
 */
proto.rv.data.Audio.PhysicalChannel.prototype.getToneEnable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.Audio.PhysicalChannel} returns this
 */
proto.rv.data.Audio.PhysicalChannel.prototype.setToneEnable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


