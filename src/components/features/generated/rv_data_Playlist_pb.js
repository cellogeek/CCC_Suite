// source: playlist.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.rv.data.Playlist');
goog.provide('proto.rv.data.Playlist.ChildrentypeCase');
goog.provide('proto.rv.data.Playlist.FolderDirectory');
goog.provide('proto.rv.data.Playlist.FolderDirectory.ImportBehavior');
goog.provide('proto.rv.data.Playlist.LinkdataCase');
goog.provide('proto.rv.data.Playlist.PlaylistArray');
goog.provide('proto.rv.data.Playlist.PlaylistItems');
goog.provide('proto.rv.data.Playlist.StartupInfo');
goog.provide('proto.rv.data.Playlist.Tag');
goog.provide('proto.rv.data.Playlist.TimingType');
goog.provide('proto.rv.data.Playlist.Type');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.rv.data.Color');
goog.require('proto.rv.data.Cue');
goog.require('proto.rv.data.HotKey');
goog.require('proto.rv.data.PlanningCenterPlan');
goog.require('proto.rv.data.PlaylistItem');
goog.require('proto.rv.data.URL');
goog.require('proto.rv.data.UUID');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Playlist = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rv.data.Playlist.repeatedFields_, proto.rv.data.Playlist.oneofGroups_);
};
goog.inherits(proto.rv.data.Playlist, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Playlist.displayName = 'proto.rv.data.Playlist';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Playlist.PlaylistArray = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rv.data.Playlist.PlaylistArray.repeatedFields_, null);
};
goog.inherits(proto.rv.data.Playlist.PlaylistArray, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Playlist.PlaylistArray.displayName = 'proto.rv.data.Playlist.PlaylistArray';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Playlist.PlaylistItems = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rv.data.Playlist.PlaylistItems.repeatedFields_, null);
};
goog.inherits(proto.rv.data.Playlist.PlaylistItems, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Playlist.PlaylistItems.displayName = 'proto.rv.data.Playlist.PlaylistItems';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Playlist.FolderDirectory = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.Playlist.FolderDirectory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Playlist.FolderDirectory.displayName = 'proto.rv.data.Playlist.FolderDirectory';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Playlist.Tag = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.Playlist.Tag, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Playlist.Tag.displayName = 'proto.rv.data.Playlist.Tag';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Playlist.StartupInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.Playlist.StartupInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Playlist.StartupInfo.displayName = 'proto.rv.data.Playlist.StartupInfo';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rv.data.Playlist.repeatedFields_ = [8,9];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rv.data.Playlist.oneofGroups_ = [[12,13],[14,15]];

/**
 * @enum {number}
 */
proto.rv.data.Playlist.ChildrentypeCase = {
  CHILDRENTYPE_NOT_SET: 0,
  PLAYLISTS: 12,
  ITEMS: 13
};

/**
 * @return {proto.rv.data.Playlist.ChildrentypeCase}
 */
proto.rv.data.Playlist.prototype.getChildrentypeCase = function() {
  return /** @type {proto.rv.data.Playlist.ChildrentypeCase} */(jspb.Message.computeOneofCase(this, proto.rv.data.Playlist.oneofGroups_[0]));
};

/**
 * @enum {number}
 */
proto.rv.data.Playlist.LinkdataCase = {
  LINKDATA_NOT_SET: 0,
  SMART_DIRECTORY: 14,
  PCO_PLAN: 15
};

/**
 * @return {proto.rv.data.Playlist.LinkdataCase}
 */
proto.rv.data.Playlist.prototype.getLinkdataCase = function() {
  return /** @type {proto.rv.data.Playlist.LinkdataCase} */(jspb.Message.computeOneofCase(this, proto.rv.data.Playlist.oneofGroups_[1]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Playlist.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Playlist.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Playlist} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Playlist.toObject = function(includeInstance, msg) {
  var f, obj = {
uuid: (f = msg.getUuid()) && proto.rv.data.UUID.toObject(includeInstance, f),
name: jspb.Message.getFieldWithDefault(msg, 2, ""),
type: jspb.Message.getFieldWithDefault(msg, 3, 0),
expanded: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
targetedLayerUuid: (f = msg.getTargetedLayerUuid()) && proto.rv.data.UUID.toObject(includeInstance, f),
smartDirectoryPath: (f = msg.getSmartDirectoryPath()) && proto.rv.data.URL.toObject(includeInstance, f),
hotKey: (f = msg.getHotKey()) && proto.rv.data.HotKey.toObject(includeInstance, f),
cuesList: jspb.Message.toObjectList(msg.getCuesList(),
    proto.rv.data.Cue.toObject, includeInstance),
childrenList: jspb.Message.toObjectList(msg.getChildrenList(),
    proto.rv.data.Playlist.toObject, includeInstance),
timecodeEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
timing: jspb.Message.getFieldWithDefault(msg, 11, 0),
startupInfo: (f = msg.getStartupInfo()) && proto.rv.data.Playlist.StartupInfo.toObject(includeInstance, f),
playlists: (f = msg.getPlaylists()) && proto.rv.data.Playlist.PlaylistArray.toObject(includeInstance, f),
items: (f = msg.getItems()) && proto.rv.data.Playlist.PlaylistItems.toObject(includeInstance, f),
smartDirectory: (f = msg.getSmartDirectory()) && proto.rv.data.Playlist.FolderDirectory.toObject(includeInstance, f),
pcoPlan: (f = msg.getPcoPlan()) && proto.rv.data.PlanningCenterPlan.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Playlist}
 */
proto.rv.data.Playlist.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Playlist;
  return proto.rv.data.Playlist.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Playlist} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Playlist}
 */
proto.rv.data.Playlist.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.UUID;
      reader.readMessage(value,proto.rv.data.UUID.deserializeBinaryFromReader);
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {!proto.rv.data.Playlist.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExpanded(value);
      break;
    case 5:
      var value = new proto.rv.data.UUID;
      reader.readMessage(value,proto.rv.data.UUID.deserializeBinaryFromReader);
      msg.setTargetedLayerUuid(value);
      break;
    case 6:
      var value = new proto.rv.data.URL;
      reader.readMessage(value,proto.rv.data.URL.deserializeBinaryFromReader);
      msg.setSmartDirectoryPath(value);
      break;
    case 7:
      var value = new proto.rv.data.HotKey;
      reader.readMessage(value,proto.rv.data.HotKey.deserializeBinaryFromReader);
      msg.setHotKey(value);
      break;
    case 8:
      var value = new proto.rv.data.Cue;
      reader.readMessage(value,proto.rv.data.Cue.deserializeBinaryFromReader);
      msg.addCues(value);
      break;
    case 9:
      var value = new proto.rv.data.Playlist;
      reader.readMessage(value,proto.rv.data.Playlist.deserializeBinaryFromReader);
      msg.addChildren(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTimecodeEnabled(value);
      break;
    case 11:
      var value = /** @type {!proto.rv.data.Playlist.TimingType} */ (reader.readEnum());
      msg.setTiming(value);
      break;
    case 16:
      var value = new proto.rv.data.Playlist.StartupInfo;
      reader.readMessage(value,proto.rv.data.Playlist.StartupInfo.deserializeBinaryFromReader);
      msg.setStartupInfo(value);
      break;
    case 12:
      var value = new proto.rv.data.Playlist.PlaylistArray;
      reader.readMessage(value,proto.rv.data.Playlist.PlaylistArray.deserializeBinaryFromReader);
      msg.setPlaylists(value);
      break;
    case 13:
      var value = new proto.rv.data.Playlist.PlaylistItems;
      reader.readMessage(value,proto.rv.data.Playlist.PlaylistItems.deserializeBinaryFromReader);
      msg.setItems(value);
      break;
    case 14:
      var value = new proto.rv.data.Playlist.FolderDirectory;
      reader.readMessage(value,proto.rv.data.Playlist.FolderDirectory.deserializeBinaryFromReader);
      msg.setSmartDirectory(value);
      break;
    case 15:
      var value = new proto.rv.data.PlanningCenterPlan;
      reader.readMessage(value,proto.rv.data.PlanningCenterPlan.deserializeBinaryFromReader);
      msg.setPcoPlan(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Playlist.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Playlist.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Playlist} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Playlist.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.UUID.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getExpanded();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getTargetedLayerUuid();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.rv.data.UUID.serializeBinaryToWriter
    );
  }
  f = message.getSmartDirectoryPath();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.rv.data.URL.serializeBinaryToWriter
    );
  }
  f = message.getHotKey();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.rv.data.HotKey.serializeBinaryToWriter
    );
  }
  f = message.getCuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.rv.data.Cue.serializeBinaryToWriter
    );
  }
  f = message.getChildrenList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.rv.data.Playlist.serializeBinaryToWriter
    );
  }
  f = message.getTimecodeEnabled();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getTiming();
  if (f !== 0.0) {
    writer.writeEnum(
      11,
      f
    );
  }
  f = message.getStartupInfo();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.rv.data.Playlist.StartupInfo.serializeBinaryToWriter
    );
  }
  f = message.getPlaylists();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.rv.data.Playlist.PlaylistArray.serializeBinaryToWriter
    );
  }
  f = message.getItems();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.rv.data.Playlist.PlaylistItems.serializeBinaryToWriter
    );
  }
  f = message.getSmartDirectory();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.rv.data.Playlist.FolderDirectory.serializeBinaryToWriter
    );
  }
  f = message.getPcoPlan();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.rv.data.PlanningCenterPlan.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.rv.data.Playlist.Type = {
  TYPE_UNKNOWN: 0,
  TYPE_PLAYLIST: 1,
  TYPE_GROUP: 2,
  TYPE_SMART: 3,
  TYPE_ROOT: 4
};

/**
 * @enum {number}
 */
proto.rv.data.Playlist.TimingType = {
  TIMING_TYPE_NONE: 0,
  TIMING_TYPE_TIMECODE: 1,
  TIMING_TYPE_TIME_OF_DAY: 2
};


/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rv.data.Playlist.PlaylistArray.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Playlist.PlaylistArray.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Playlist.PlaylistArray.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Playlist.PlaylistArray} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Playlist.PlaylistArray.toObject = function(includeInstance, msg) {
  var f, obj = {
playlistsList: jspb.Message.toObjectList(msg.getPlaylistsList(),
    proto.rv.data.Playlist.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Playlist.PlaylistArray}
 */
proto.rv.data.Playlist.PlaylistArray.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Playlist.PlaylistArray;
  return proto.rv.data.Playlist.PlaylistArray.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Playlist.PlaylistArray} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Playlist.PlaylistArray}
 */
proto.rv.data.Playlist.PlaylistArray.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.Playlist;
      reader.readMessage(value,proto.rv.data.Playlist.deserializeBinaryFromReader);
      msg.addPlaylists(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Playlist.PlaylistArray.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Playlist.PlaylistArray.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Playlist.PlaylistArray} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Playlist.PlaylistArray.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlaylistsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rv.data.Playlist.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Playlist playlists = 1;
 * @return {!Array<!proto.rv.data.Playlist>}
 */
proto.rv.data.Playlist.PlaylistArray.prototype.getPlaylistsList = function() {
  return /** @type{!Array<!proto.rv.data.Playlist>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rv.data.Playlist, 1));
};


/**
 * @param {!Array<!proto.rv.data.Playlist>} value
 * @return {!proto.rv.data.Playlist.PlaylistArray} returns this
*/
proto.rv.data.Playlist.PlaylistArray.prototype.setPlaylistsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.rv.data.Playlist=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rv.data.Playlist}
 */
proto.rv.data.Playlist.PlaylistArray.prototype.addPlaylists = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rv.data.Playlist, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.Playlist.PlaylistArray} returns this
 */
proto.rv.data.Playlist.PlaylistArray.prototype.clearPlaylistsList = function() {
  return this.setPlaylistsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rv.data.Playlist.PlaylistItems.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Playlist.PlaylistItems.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Playlist.PlaylistItems.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Playlist.PlaylistItems} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Playlist.PlaylistItems.toObject = function(includeInstance, msg) {
  var f, obj = {
itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.rv.data.PlaylistItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Playlist.PlaylistItems}
 */
proto.rv.data.Playlist.PlaylistItems.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Playlist.PlaylistItems;
  return proto.rv.data.Playlist.PlaylistItems.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Playlist.PlaylistItems} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Playlist.PlaylistItems}
 */
proto.rv.data.Playlist.PlaylistItems.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.PlaylistItem;
      reader.readMessage(value,proto.rv.data.PlaylistItem.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Playlist.PlaylistItems.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Playlist.PlaylistItems.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Playlist.PlaylistItems} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Playlist.PlaylistItems.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rv.data.PlaylistItem.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PlaylistItem items = 1;
 * @return {!Array<!proto.rv.data.PlaylistItem>}
 */
proto.rv.data.Playlist.PlaylistItems.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.rv.data.PlaylistItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rv.data.PlaylistItem, 1));
};


/**
 * @param {!Array<!proto.rv.data.PlaylistItem>} value
 * @return {!proto.rv.data.Playlist.PlaylistItems} returns this
*/
proto.rv.data.Playlist.PlaylistItems.prototype.setItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.rv.data.PlaylistItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rv.data.PlaylistItem}
 */
proto.rv.data.Playlist.PlaylistItems.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rv.data.PlaylistItem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.Playlist.PlaylistItems} returns this
 */
proto.rv.data.Playlist.PlaylistItems.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Playlist.FolderDirectory.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Playlist.FolderDirectory.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Playlist.FolderDirectory} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Playlist.FolderDirectory.toObject = function(includeInstance, msg) {
  var f, obj = {
smartDirectory: (f = msg.getSmartDirectory()) && proto.rv.data.URL.toObject(includeInstance, f),
importBehavior: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Playlist.FolderDirectory}
 */
proto.rv.data.Playlist.FolderDirectory.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Playlist.FolderDirectory;
  return proto.rv.data.Playlist.FolderDirectory.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Playlist.FolderDirectory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Playlist.FolderDirectory}
 */
proto.rv.data.Playlist.FolderDirectory.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.URL;
      reader.readMessage(value,proto.rv.data.URL.deserializeBinaryFromReader);
      msg.setSmartDirectory(value);
      break;
    case 2:
      var value = /** @type {!proto.rv.data.Playlist.FolderDirectory.ImportBehavior} */ (reader.readEnum());
      msg.setImportBehavior(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Playlist.FolderDirectory.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Playlist.FolderDirectory.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Playlist.FolderDirectory} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Playlist.FolderDirectory.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSmartDirectory();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.URL.serializeBinaryToWriter
    );
  }
  f = message.getImportBehavior();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.rv.data.Playlist.FolderDirectory.ImportBehavior = {
  IMPORT_BEHAVIOR_BACKGROUND: 0,
  IMPORT_BEHAVIOR_FOREGROUND: 1
};

/**
 * optional URL smart_directory = 1;
 * @return {?proto.rv.data.URL}
 */
proto.rv.data.Playlist.FolderDirectory.prototype.getSmartDirectory = function() {
  return /** @type{?proto.rv.data.URL} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.URL, 1));
};


/**
 * @param {?proto.rv.data.URL|undefined} value
 * @return {!proto.rv.data.Playlist.FolderDirectory} returns this
*/
proto.rv.data.Playlist.FolderDirectory.prototype.setSmartDirectory = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Playlist.FolderDirectory} returns this
 */
proto.rv.data.Playlist.FolderDirectory.prototype.clearSmartDirectory = function() {
  return this.setSmartDirectory(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Playlist.FolderDirectory.prototype.hasSmartDirectory = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ImportBehavior import_behavior = 2;
 * @return {!proto.rv.data.Playlist.FolderDirectory.ImportBehavior}
 */
proto.rv.data.Playlist.FolderDirectory.prototype.getImportBehavior = function() {
  return /** @type {!proto.rv.data.Playlist.FolderDirectory.ImportBehavior} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.rv.data.Playlist.FolderDirectory.ImportBehavior} value
 * @return {!proto.rv.data.Playlist.FolderDirectory} returns this
 */
proto.rv.data.Playlist.FolderDirectory.prototype.setImportBehavior = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Playlist.Tag.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Playlist.Tag.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Playlist.Tag} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Playlist.Tag.toObject = function(includeInstance, msg) {
  var f, obj = {
color: (f = msg.getColor()) && proto.rv.data.Color.toObject(includeInstance, f),
name: jspb.Message.getFieldWithDefault(msg, 2, ""),
uuid: (f = msg.getUuid()) && proto.rv.data.UUID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Playlist.Tag}
 */
proto.rv.data.Playlist.Tag.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Playlist.Tag;
  return proto.rv.data.Playlist.Tag.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Playlist.Tag} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Playlist.Tag}
 */
proto.rv.data.Playlist.Tag.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.Color;
      reader.readMessage(value,proto.rv.data.Color.deserializeBinaryFromReader);
      msg.setColor(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.rv.data.UUID;
      reader.readMessage(value,proto.rv.data.UUID.deserializeBinaryFromReader);
      msg.setUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Playlist.Tag.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Playlist.Tag.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Playlist.Tag} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Playlist.Tag.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getColor();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.Color.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUuid();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rv.data.UUID.serializeBinaryToWriter
    );
  }
};


/**
 * optional Color color = 1;
 * @return {?proto.rv.data.Color}
 */
proto.rv.data.Playlist.Tag.prototype.getColor = function() {
  return /** @type{?proto.rv.data.Color} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Color, 1));
};


/**
 * @param {?proto.rv.data.Color|undefined} value
 * @return {!proto.rv.data.Playlist.Tag} returns this
*/
proto.rv.data.Playlist.Tag.prototype.setColor = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Playlist.Tag} returns this
 */
proto.rv.data.Playlist.Tag.prototype.clearColor = function() {
  return this.setColor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Playlist.Tag.prototype.hasColor = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.rv.data.Playlist.Tag.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.Playlist.Tag} returns this
 */
proto.rv.data.Playlist.Tag.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional UUID uuid = 3;
 * @return {?proto.rv.data.UUID}
 */
proto.rv.data.Playlist.Tag.prototype.getUuid = function() {
  return /** @type{?proto.rv.data.UUID} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.UUID, 3));
};


/**
 * @param {?proto.rv.data.UUID|undefined} value
 * @return {!proto.rv.data.Playlist.Tag} returns this
*/
proto.rv.data.Playlist.Tag.prototype.setUuid = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Playlist.Tag} returns this
 */
proto.rv.data.Playlist.Tag.prototype.clearUuid = function() {
  return this.setUuid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Playlist.Tag.prototype.hasUuid = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Playlist.StartupInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Playlist.StartupInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Playlist.StartupInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Playlist.StartupInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
triggerOnStartup: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Playlist.StartupInfo}
 */
proto.rv.data.Playlist.StartupInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Playlist.StartupInfo;
  return proto.rv.data.Playlist.StartupInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Playlist.StartupInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Playlist.StartupInfo}
 */
proto.rv.data.Playlist.StartupInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTriggerOnStartup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Playlist.StartupInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Playlist.StartupInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Playlist.StartupInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Playlist.StartupInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTriggerOnStartup();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool trigger_on_startup = 1;
 * @return {boolean}
 */
proto.rv.data.Playlist.StartupInfo.prototype.getTriggerOnStartup = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.Playlist.StartupInfo} returns this
 */
proto.rv.data.Playlist.StartupInfo.prototype.setTriggerOnStartup = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional UUID uuid = 1;
 * @return {?proto.rv.data.UUID}
 */
proto.rv.data.Playlist.prototype.getUuid = function() {
  return /** @type{?proto.rv.data.UUID} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.UUID, 1));
};


/**
 * @param {?proto.rv.data.UUID|undefined} value
 * @return {!proto.rv.data.Playlist} returns this
*/
proto.rv.data.Playlist.prototype.setUuid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Playlist} returns this
 */
proto.rv.data.Playlist.prototype.clearUuid = function() {
  return this.setUuid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Playlist.prototype.hasUuid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.rv.data.Playlist.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.Playlist} returns this
 */
proto.rv.data.Playlist.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Type type = 3;
 * @return {!proto.rv.data.Playlist.Type}
 */
proto.rv.data.Playlist.prototype.getType = function() {
  return /** @type {!proto.rv.data.Playlist.Type} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.rv.data.Playlist.Type} value
 * @return {!proto.rv.data.Playlist} returns this
 */
proto.rv.data.Playlist.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bool expanded = 4;
 * @return {boolean}
 */
proto.rv.data.Playlist.prototype.getExpanded = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.Playlist} returns this
 */
proto.rv.data.Playlist.prototype.setExpanded = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional UUID targeted_layer_uuid = 5;
 * @return {?proto.rv.data.UUID}
 */
proto.rv.data.Playlist.prototype.getTargetedLayerUuid = function() {
  return /** @type{?proto.rv.data.UUID} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.UUID, 5));
};


/**
 * @param {?proto.rv.data.UUID|undefined} value
 * @return {!proto.rv.data.Playlist} returns this
*/
proto.rv.data.Playlist.prototype.setTargetedLayerUuid = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Playlist} returns this
 */
proto.rv.data.Playlist.prototype.clearTargetedLayerUuid = function() {
  return this.setTargetedLayerUuid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Playlist.prototype.hasTargetedLayerUuid = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional URL smart_directory_path = 6;
 * @return {?proto.rv.data.URL}
 */
proto.rv.data.Playlist.prototype.getSmartDirectoryPath = function() {
  return /** @type{?proto.rv.data.URL} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.URL, 6));
};


/**
 * @param {?proto.rv.data.URL|undefined} value
 * @return {!proto.rv.data.Playlist} returns this
*/
proto.rv.data.Playlist.prototype.setSmartDirectoryPath = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Playlist} returns this
 */
proto.rv.data.Playlist.prototype.clearSmartDirectoryPath = function() {
  return this.setSmartDirectoryPath(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Playlist.prototype.hasSmartDirectoryPath = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional HotKey hot_key = 7;
 * @return {?proto.rv.data.HotKey}
 */
proto.rv.data.Playlist.prototype.getHotKey = function() {
  return /** @type{?proto.rv.data.HotKey} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.HotKey, 7));
};


/**
 * @param {?proto.rv.data.HotKey|undefined} value
 * @return {!proto.rv.data.Playlist} returns this
*/
proto.rv.data.Playlist.prototype.setHotKey = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Playlist} returns this
 */
proto.rv.data.Playlist.prototype.clearHotKey = function() {
  return this.setHotKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Playlist.prototype.hasHotKey = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * repeated Cue cues = 8;
 * @return {!Array<!proto.rv.data.Cue>}
 */
proto.rv.data.Playlist.prototype.getCuesList = function() {
  return /** @type{!Array<!proto.rv.data.Cue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rv.data.Cue, 8));
};


/**
 * @param {!Array<!proto.rv.data.Cue>} value
 * @return {!proto.rv.data.Playlist} returns this
*/
proto.rv.data.Playlist.prototype.setCuesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.rv.data.Cue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rv.data.Cue}
 */
proto.rv.data.Playlist.prototype.addCues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.rv.data.Cue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.Playlist} returns this
 */
proto.rv.data.Playlist.prototype.clearCuesList = function() {
  return this.setCuesList([]);
};


/**
 * repeated Playlist children = 9;
 * @return {!Array<!proto.rv.data.Playlist>}
 */
proto.rv.data.Playlist.prototype.getChildrenList = function() {
  return /** @type{!Array<!proto.rv.data.Playlist>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rv.data.Playlist, 9));
};


/**
 * @param {!Array<!proto.rv.data.Playlist>} value
 * @return {!proto.rv.data.Playlist} returns this
*/
proto.rv.data.Playlist.prototype.setChildrenList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.rv.data.Playlist=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rv.data.Playlist}
 */
proto.rv.data.Playlist.prototype.addChildren = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.rv.data.Playlist, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.Playlist} returns this
 */
proto.rv.data.Playlist.prototype.clearChildrenList = function() {
  return this.setChildrenList([]);
};


/**
 * optional bool timecode_enabled = 10;
 * @return {boolean}
 */
proto.rv.data.Playlist.prototype.getTimecodeEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.Playlist} returns this
 */
proto.rv.data.Playlist.prototype.setTimecodeEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional TimingType timing = 11;
 * @return {!proto.rv.data.Playlist.TimingType}
 */
proto.rv.data.Playlist.prototype.getTiming = function() {
  return /** @type {!proto.rv.data.Playlist.TimingType} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {!proto.rv.data.Playlist.TimingType} value
 * @return {!proto.rv.data.Playlist} returns this
 */
proto.rv.data.Playlist.prototype.setTiming = function(value) {
  return jspb.Message.setProto3EnumField(this, 11, value);
};


/**
 * optional StartupInfo startup_info = 16;
 * @return {?proto.rv.data.Playlist.StartupInfo}
 */
proto.rv.data.Playlist.prototype.getStartupInfo = function() {
  return /** @type{?proto.rv.data.Playlist.StartupInfo} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Playlist.StartupInfo, 16));
};


/**
 * @param {?proto.rv.data.Playlist.StartupInfo|undefined} value
 * @return {!proto.rv.data.Playlist} returns this
*/
proto.rv.data.Playlist.prototype.setStartupInfo = function(value) {
  return jspb.Message.setWrapperField(this, 16, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Playlist} returns this
 */
proto.rv.data.Playlist.prototype.clearStartupInfo = function() {
  return this.setStartupInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Playlist.prototype.hasStartupInfo = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional PlaylistArray playlists = 12;
 * @return {?proto.rv.data.Playlist.PlaylistArray}
 */
proto.rv.data.Playlist.prototype.getPlaylists = function() {
  return /** @type{?proto.rv.data.Playlist.PlaylistArray} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Playlist.PlaylistArray, 12));
};


/**
 * @param {?proto.rv.data.Playlist.PlaylistArray|undefined} value
 * @return {!proto.rv.data.Playlist} returns this
*/
proto.rv.data.Playlist.prototype.setPlaylists = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.rv.data.Playlist.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Playlist} returns this
 */
proto.rv.data.Playlist.prototype.clearPlaylists = function() {
  return this.setPlaylists(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Playlist.prototype.hasPlaylists = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional PlaylistItems items = 13;
 * @return {?proto.rv.data.Playlist.PlaylistItems}
 */
proto.rv.data.Playlist.prototype.getItems = function() {
  return /** @type{?proto.rv.data.Playlist.PlaylistItems} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Playlist.PlaylistItems, 13));
};


/**
 * @param {?proto.rv.data.Playlist.PlaylistItems|undefined} value
 * @return {!proto.rv.data.Playlist} returns this
*/
proto.rv.data.Playlist.prototype.setItems = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.rv.data.Playlist.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Playlist} returns this
 */
proto.rv.data.Playlist.prototype.clearItems = function() {
  return this.setItems(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Playlist.prototype.hasItems = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional FolderDirectory smart_directory = 14;
 * @return {?proto.rv.data.Playlist.FolderDirectory}
 */
proto.rv.data.Playlist.prototype.getSmartDirectory = function() {
  return /** @type{?proto.rv.data.Playlist.FolderDirectory} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Playlist.FolderDirectory, 14));
};


/**
 * @param {?proto.rv.data.Playlist.FolderDirectory|undefined} value
 * @return {!proto.rv.data.Playlist} returns this
*/
proto.rv.data.Playlist.prototype.setSmartDirectory = function(value) {
  return jspb.Message.setOneofWrapperField(this, 14, proto.rv.data.Playlist.oneofGroups_[1], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Playlist} returns this
 */
proto.rv.data.Playlist.prototype.clearSmartDirectory = function() {
  return this.setSmartDirectory(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Playlist.prototype.hasSmartDirectory = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional PlanningCenterPlan pco_plan = 15;
 * @return {?proto.rv.data.PlanningCenterPlan}
 */
proto.rv.data.Playlist.prototype.getPcoPlan = function() {
  return /** @type{?proto.rv.data.PlanningCenterPlan} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.PlanningCenterPlan, 15));
};


/**
 * @param {?proto.rv.data.PlanningCenterPlan|undefined} value
 * @return {!proto.rv.data.Playlist} returns this
*/
proto.rv.data.Playlist.prototype.setPcoPlan = function(value) {
  return jspb.Message.setOneofWrapperField(this, 15, proto.rv.data.Playlist.oneofGroups_[1], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Playlist} returns this
 */
proto.rv.data.Playlist.prototype.clearPcoPlan = function() {
  return this.setPcoPlan(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Playlist.prototype.hasPcoPlan = function() {
  return jspb.Message.getField(this, 15) != null;
};


