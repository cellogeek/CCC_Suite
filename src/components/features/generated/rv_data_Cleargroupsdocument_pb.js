// source: clearGroups.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.rv.data.ClearGroupsDocument');
goog.provide('proto.rv.data.ClearGroupsDocument.ClearGroup');
goog.provide('proto.rv.data.ClearGroupsDocument.ClearGroup.ImageType');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.rv.data.Action.ClearType');
goog.require('proto.rv.data.ApplicationInfo');
goog.require('proto.rv.data.Color');
goog.require('proto.rv.data.UUID');

goog.forwardDeclare('proto.rv.data.Action.ContentDestination');
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ClearGroupsDocument = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rv.data.ClearGroupsDocument.repeatedFields_, null);
};
goog.inherits(proto.rv.data.ClearGroupsDocument, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ClearGroupsDocument.displayName = 'proto.rv.data.ClearGroupsDocument';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ClearGroupsDocument.ClearGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rv.data.ClearGroupsDocument.ClearGroup.repeatedFields_, null);
};
goog.inherits(proto.rv.data.ClearGroupsDocument.ClearGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ClearGroupsDocument.ClearGroup.displayName = 'proto.rv.data.ClearGroupsDocument.ClearGroup';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rv.data.ClearGroupsDocument.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ClearGroupsDocument.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ClearGroupsDocument.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ClearGroupsDocument} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ClearGroupsDocument.toObject = function(includeInstance, msg) {
  var f, obj = {
applicationInfo: (f = msg.getApplicationInfo()) && proto.rv.data.ApplicationInfo.toObject(includeInstance, f),
groupsList: jspb.Message.toObjectList(msg.getGroupsList(),
    proto.rv.data.ClearGroupsDocument.ClearGroup.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ClearGroupsDocument}
 */
proto.rv.data.ClearGroupsDocument.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ClearGroupsDocument;
  return proto.rv.data.ClearGroupsDocument.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ClearGroupsDocument} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ClearGroupsDocument}
 */
proto.rv.data.ClearGroupsDocument.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.ApplicationInfo;
      reader.readMessage(value,proto.rv.data.ApplicationInfo.deserializeBinaryFromReader);
      msg.setApplicationInfo(value);
      break;
    case 2:
      var value = new proto.rv.data.ClearGroupsDocument.ClearGroup;
      reader.readMessage(value,proto.rv.data.ClearGroupsDocument.ClearGroup.deserializeBinaryFromReader);
      msg.addGroups(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ClearGroupsDocument.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ClearGroupsDocument.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ClearGroupsDocument} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ClearGroupsDocument.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApplicationInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.ApplicationInfo.serializeBinaryToWriter
    );
  }
  f = message.getGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.rv.data.ClearGroupsDocument.ClearGroup.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rv.data.ClearGroupsDocument.ClearGroup.repeatedFields_ = [3,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ClearGroupsDocument.ClearGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ClearGroupsDocument.ClearGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ClearGroupsDocument.ClearGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ClearGroupsDocument.ClearGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
uuid: (f = msg.getUuid()) && proto.rv.data.UUID.toObject(includeInstance, f),
name: jspb.Message.getFieldWithDefault(msg, 2, ""),
layerTargetsList: jspb.Message.toObjectList(msg.getLayerTargetsList(),
    proto.rv.data.Action.ClearType.toObject, includeInstance),
isHiddenInPreview: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
imageData: msg.getImageData_asB64(),
imageType: jspb.Message.getFieldWithDefault(msg, 6, 0),
isIconTinted: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
iconTintColor: (f = msg.getIconTintColor()) && proto.rv.data.Color.toObject(includeInstance, f),
timelineTargetsList: (f = jspb.Message.getRepeatedField(msg, 9)) == null ? undefined : f,
clearPresentationNextSlide: jspb.Message.getBooleanFieldWithDefault(msg, 10, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ClearGroupsDocument.ClearGroup}
 */
proto.rv.data.ClearGroupsDocument.ClearGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ClearGroupsDocument.ClearGroup;
  return proto.rv.data.ClearGroupsDocument.ClearGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ClearGroupsDocument.ClearGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ClearGroupsDocument.ClearGroup}
 */
proto.rv.data.ClearGroupsDocument.ClearGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.UUID;
      reader.readMessage(value,proto.rv.data.UUID.deserializeBinaryFromReader);
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.rv.data.Action.ClearType;
      reader.readMessage(value,proto.rv.data.Action.ClearType.deserializeBinaryFromReader);
      msg.addLayerTargets(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsHiddenInPreview(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setImageData(value);
      break;
    case 6:
      var value = /** @type {!proto.rv.data.ClearGroupsDocument.ClearGroup.ImageType} */ (reader.readEnum());
      msg.setImageType(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsIconTinted(value);
      break;
    case 8:
      var value = new proto.rv.data.Color;
      reader.readMessage(value,proto.rv.data.Color.deserializeBinaryFromReader);
      msg.setIconTintColor(value);
      break;
    case 9:
      var values = /** @type {!Array<!proto.rv.data.Action.ContentDestination>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addTimelineTargets(values[i]);
      }
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setClearPresentationNextSlide(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ClearGroupsDocument.ClearGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ClearGroupsDocument.ClearGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ClearGroupsDocument.ClearGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ClearGroupsDocument.ClearGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.UUID.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLayerTargetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.rv.data.Action.ClearType.serializeBinaryToWriter
    );
  }
  f = message.getIsHiddenInPreview();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getImageData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getImageType();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getIsIconTinted();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getIconTintColor();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.rv.data.Color.serializeBinaryToWriter
    );
  }
  f = message.getTimelineTargetsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      9,
      f
    );
  }
  f = message.getClearPresentationNextSlide();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.rv.data.ClearGroupsDocument.ClearGroup.ImageType = {
  IMAGETYPECUSTOM: 0,
  IMAGETYPEONE: 1,
  IMAGETYPETWO: 2,
  IMAGETYPETHREE: 3,
  IMAGETYPEFOUR: 4,
  IMAGETYPEFIVE: 5,
  IMAGETYPESIX: 6,
  IMAGETYPESEVEN: 7,
  IMAGETYPEEIGHT: 8,
  IMAGETYPENINE: 9,
  IMAGETYPEZERO: 10,
  IMAGETYPEALL: 11,
  IMAGETYPEMEGAHORN: 12,
  IMAGETYPEPLAY: 13,
  IMAGETYPEBULB: 14,
  IMAGETYPESUNGLASSES: 15,
  IMAGETYPEARROW: 16,
  IMAGETYPETARGET: 17,
  IMAGETYPESTAR: 18,
  IMAGETYPESUN: 19,
  IMAGETYPEBELL: 20,
  IMAGETYPEPAPERCLIP: 21,
  IMAGETYPEFLASK: 22,
  IMAGETYPEEYEGLASSES: 23,
  IMAGETYPECUPCAKE: 24,
  IMAGETYPESLIDE: 25,
  IMAGETYPEHAT: 26,
  IMAGETYPEFLOWER: 27,
  IMAGETYPEHEART: 28,
  IMAGETYPEMESSAGE: 29,
  IMAGETYPEAUDIO: 30,
  IMAGETYPECLOUD: 31,
  IMAGETYPEEXCLAMATION: 32
};

/**
 * optional UUID uuid = 1;
 * @return {?proto.rv.data.UUID}
 */
proto.rv.data.ClearGroupsDocument.ClearGroup.prototype.getUuid = function() {
  return /** @type{?proto.rv.data.UUID} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.UUID, 1));
};


/**
 * @param {?proto.rv.data.UUID|undefined} value
 * @return {!proto.rv.data.ClearGroupsDocument.ClearGroup} returns this
*/
proto.rv.data.ClearGroupsDocument.ClearGroup.prototype.setUuid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ClearGroupsDocument.ClearGroup} returns this
 */
proto.rv.data.ClearGroupsDocument.ClearGroup.prototype.clearUuid = function() {
  return this.setUuid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ClearGroupsDocument.ClearGroup.prototype.hasUuid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.rv.data.ClearGroupsDocument.ClearGroup.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.ClearGroupsDocument.ClearGroup} returns this
 */
proto.rv.data.ClearGroupsDocument.ClearGroup.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Action.ClearType layer_targets = 3;
 * @return {!Array<!proto.rv.data.Action.ClearType>}
 */
proto.rv.data.ClearGroupsDocument.ClearGroup.prototype.getLayerTargetsList = function() {
  return /** @type{!Array<!proto.rv.data.Action.ClearType>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rv.data.Action.ClearType, 3));
};


/**
 * @param {!Array<!proto.rv.data.Action.ClearType>} value
 * @return {!proto.rv.data.ClearGroupsDocument.ClearGroup} returns this
*/
proto.rv.data.ClearGroupsDocument.ClearGroup.prototype.setLayerTargetsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.rv.data.Action.ClearType=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rv.data.Action.ClearType}
 */
proto.rv.data.ClearGroupsDocument.ClearGroup.prototype.addLayerTargets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.rv.data.Action.ClearType, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.ClearGroupsDocument.ClearGroup} returns this
 */
proto.rv.data.ClearGroupsDocument.ClearGroup.prototype.clearLayerTargetsList = function() {
  return this.setLayerTargetsList([]);
};


/**
 * optional bool is_hidden_in_preview = 4;
 * @return {boolean}
 */
proto.rv.data.ClearGroupsDocument.ClearGroup.prototype.getIsHiddenInPreview = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.ClearGroupsDocument.ClearGroup} returns this
 */
proto.rv.data.ClearGroupsDocument.ClearGroup.prototype.setIsHiddenInPreview = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bytes image_data = 5;
 * @return {!(string|Uint8Array)}
 */
proto.rv.data.ClearGroupsDocument.ClearGroup.prototype.getImageData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes image_data = 5;
 * This is a type-conversion wrapper around `getImageData()`
 * @return {string}
 */
proto.rv.data.ClearGroupsDocument.ClearGroup.prototype.getImageData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getImageData()));
};


/**
 * optional bytes image_data = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getImageData()`
 * @return {!Uint8Array}
 */
proto.rv.data.ClearGroupsDocument.ClearGroup.prototype.getImageData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getImageData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rv.data.ClearGroupsDocument.ClearGroup} returns this
 */
proto.rv.data.ClearGroupsDocument.ClearGroup.prototype.setImageData = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional ImageType image_type = 6;
 * @return {!proto.rv.data.ClearGroupsDocument.ClearGroup.ImageType}
 */
proto.rv.data.ClearGroupsDocument.ClearGroup.prototype.getImageType = function() {
  return /** @type {!proto.rv.data.ClearGroupsDocument.ClearGroup.ImageType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.rv.data.ClearGroupsDocument.ClearGroup.ImageType} value
 * @return {!proto.rv.data.ClearGroupsDocument.ClearGroup} returns this
 */
proto.rv.data.ClearGroupsDocument.ClearGroup.prototype.setImageType = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional bool is_icon_tinted = 7;
 * @return {boolean}
 */
proto.rv.data.ClearGroupsDocument.ClearGroup.prototype.getIsIconTinted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.ClearGroupsDocument.ClearGroup} returns this
 */
proto.rv.data.ClearGroupsDocument.ClearGroup.prototype.setIsIconTinted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional Color icon_tint_color = 8;
 * @return {?proto.rv.data.Color}
 */
proto.rv.data.ClearGroupsDocument.ClearGroup.prototype.getIconTintColor = function() {
  return /** @type{?proto.rv.data.Color} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Color, 8));
};


/**
 * @param {?proto.rv.data.Color|undefined} value
 * @return {!proto.rv.data.ClearGroupsDocument.ClearGroup} returns this
*/
proto.rv.data.ClearGroupsDocument.ClearGroup.prototype.setIconTintColor = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ClearGroupsDocument.ClearGroup} returns this
 */
proto.rv.data.ClearGroupsDocument.ClearGroup.prototype.clearIconTintColor = function() {
  return this.setIconTintColor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ClearGroupsDocument.ClearGroup.prototype.hasIconTintColor = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * repeated Action.ContentDestination timeline_targets = 9;
 * @return {!Array<!proto.rv.data.Action.ContentDestination>}
 */
proto.rv.data.ClearGroupsDocument.ClearGroup.prototype.getTimelineTargetsList = function() {
  return /** @type {!Array<!proto.rv.data.Action.ContentDestination>} */ (jspb.Message.getRepeatedField(this, 9));
};


/**
 * @param {!Array<!proto.rv.data.Action.ContentDestination>} value
 * @return {!proto.rv.data.ClearGroupsDocument.ClearGroup} returns this
 */
proto.rv.data.ClearGroupsDocument.ClearGroup.prototype.setTimelineTargetsList = function(value) {
  return jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {!proto.rv.data.Action.ContentDestination} value
 * @param {number=} opt_index
 * @return {!proto.rv.data.ClearGroupsDocument.ClearGroup} returns this
 */
proto.rv.data.ClearGroupsDocument.ClearGroup.prototype.addTimelineTargets = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.ClearGroupsDocument.ClearGroup} returns this
 */
proto.rv.data.ClearGroupsDocument.ClearGroup.prototype.clearTimelineTargetsList = function() {
  return this.setTimelineTargetsList([]);
};


/**
 * optional bool clear_presentation_next_slide = 10;
 * @return {boolean}
 */
proto.rv.data.ClearGroupsDocument.ClearGroup.prototype.getClearPresentationNextSlide = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.ClearGroupsDocument.ClearGroup} returns this
 */
proto.rv.data.ClearGroupsDocument.ClearGroup.prototype.setClearPresentationNextSlide = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional ApplicationInfo application_info = 1;
 * @return {?proto.rv.data.ApplicationInfo}
 */
proto.rv.data.ClearGroupsDocument.prototype.getApplicationInfo = function() {
  return /** @type{?proto.rv.data.ApplicationInfo} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ApplicationInfo, 1));
};


/**
 * @param {?proto.rv.data.ApplicationInfo|undefined} value
 * @return {!proto.rv.data.ClearGroupsDocument} returns this
*/
proto.rv.data.ClearGroupsDocument.prototype.setApplicationInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ClearGroupsDocument} returns this
 */
proto.rv.data.ClearGroupsDocument.prototype.clearApplicationInfo = function() {
  return this.setApplicationInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ClearGroupsDocument.prototype.hasApplicationInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated ClearGroup groups = 2;
 * @return {!Array<!proto.rv.data.ClearGroupsDocument.ClearGroup>}
 */
proto.rv.data.ClearGroupsDocument.prototype.getGroupsList = function() {
  return /** @type{!Array<!proto.rv.data.ClearGroupsDocument.ClearGroup>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rv.data.ClearGroupsDocument.ClearGroup, 2));
};


/**
 * @param {!Array<!proto.rv.data.ClearGroupsDocument.ClearGroup>} value
 * @return {!proto.rv.data.ClearGroupsDocument} returns this
*/
proto.rv.data.ClearGroupsDocument.prototype.setGroupsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.rv.data.ClearGroupsDocument.ClearGroup=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rv.data.ClearGroupsDocument.ClearGroup}
 */
proto.rv.data.ClearGroupsDocument.prototype.addGroups = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.rv.data.ClearGroupsDocument.ClearGroup, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.ClearGroupsDocument} returns this
 */
proto.rv.data.ClearGroupsDocument.prototype.clearGroupsList = function() {
  return this.setGroupsList([]);
};


