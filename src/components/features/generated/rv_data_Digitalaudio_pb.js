// source: digitalAudio.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.rv.data.DigitalAudio');
goog.provide('proto.rv.data.DigitalAudio.Bus');
goog.provide('proto.rv.data.DigitalAudio.Device');
goog.provide('proto.rv.data.DigitalAudio.Device.Channel');
goog.provide('proto.rv.data.DigitalAudio.Device.Format');
goog.provide('proto.rv.data.DigitalAudio.Device.Format.Type');
goog.provide('proto.rv.data.DigitalAudio.Device.Map');
goog.provide('proto.rv.data.DigitalAudio.Device.Routing');
goog.provide('proto.rv.data.DigitalAudio.Setup');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.DigitalAudio = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.DigitalAudio, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.DigitalAudio.displayName = 'proto.rv.data.DigitalAudio';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.DigitalAudio.Setup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rv.data.DigitalAudio.Setup.repeatedFields_, null);
};
goog.inherits(proto.rv.data.DigitalAudio.Setup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.DigitalAudio.Setup.displayName = 'proto.rv.data.DigitalAudio.Setup';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.DigitalAudio.Bus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.DigitalAudio.Bus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.DigitalAudio.Bus.displayName = 'proto.rv.data.DigitalAudio.Bus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.DigitalAudio.Device = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rv.data.DigitalAudio.Device.repeatedFields_, null);
};
goog.inherits(proto.rv.data.DigitalAudio.Device, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.DigitalAudio.Device.displayName = 'proto.rv.data.DigitalAudio.Device';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.DigitalAudio.Device.Format = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.DigitalAudio.Device.Format, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.DigitalAudio.Device.Format.displayName = 'proto.rv.data.DigitalAudio.Device.Format';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.DigitalAudio.Device.Map = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rv.data.DigitalAudio.Device.Map.repeatedFields_, null);
};
goog.inherits(proto.rv.data.DigitalAudio.Device.Map, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.DigitalAudio.Device.Map.displayName = 'proto.rv.data.DigitalAudio.Device.Map';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.DigitalAudio.Device.Channel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.DigitalAudio.Device.Channel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.DigitalAudio.Device.Channel.displayName = 'proto.rv.data.DigitalAudio.Device.Channel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.DigitalAudio.Device.Routing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rv.data.DigitalAudio.Device.Routing.repeatedFields_, null);
};
goog.inherits(proto.rv.data.DigitalAudio.Device.Routing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.DigitalAudio.Device.Routing.displayName = 'proto.rv.data.DigitalAudio.Device.Routing';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.DigitalAudio.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.DigitalAudio.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.DigitalAudio} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.DigitalAudio.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.DigitalAudio}
 */
proto.rv.data.DigitalAudio.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.DigitalAudio;
  return proto.rv.data.DigitalAudio.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.DigitalAudio} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.DigitalAudio}
 */
proto.rv.data.DigitalAudio.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.DigitalAudio.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.DigitalAudio.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.DigitalAudio} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.DigitalAudio.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rv.data.DigitalAudio.Setup.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.DigitalAudio.Setup.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.DigitalAudio.Setup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.DigitalAudio.Setup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.DigitalAudio.Setup.toObject = function(includeInstance, msg) {
  var f, obj = {
busesList: jspb.Message.toObjectList(msg.getBusesList(),
    proto.rv.data.DigitalAudio.Bus.toObject, includeInstance),
monitorDevice: (f = msg.getMonitorDevice()) && proto.rv.data.DigitalAudio.Device.toObject(includeInstance, f),
mainOutputDevice: (f = msg.getMainOutputDevice()) && proto.rv.data.DigitalAudio.Device.toObject(includeInstance, f),
enableSdiNdiDevice: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
sdiNdiDevice: (f = msg.getSdiNdiDevice()) && proto.rv.data.DigitalAudio.Device.toObject(includeInstance, f),
monitorOnMains: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
disableMainOutputDevice: jspb.Message.getBooleanFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.DigitalAudio.Setup}
 */
proto.rv.data.DigitalAudio.Setup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.DigitalAudio.Setup;
  return proto.rv.data.DigitalAudio.Setup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.DigitalAudio.Setup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.DigitalAudio.Setup}
 */
proto.rv.data.DigitalAudio.Setup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.DigitalAudio.Bus;
      reader.readMessage(value,proto.rv.data.DigitalAudio.Bus.deserializeBinaryFromReader);
      msg.addBuses(value);
      break;
    case 2:
      var value = new proto.rv.data.DigitalAudio.Device;
      reader.readMessage(value,proto.rv.data.DigitalAudio.Device.deserializeBinaryFromReader);
      msg.setMonitorDevice(value);
      break;
    case 3:
      var value = new proto.rv.data.DigitalAudio.Device;
      reader.readMessage(value,proto.rv.data.DigitalAudio.Device.deserializeBinaryFromReader);
      msg.setMainOutputDevice(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableSdiNdiDevice(value);
      break;
    case 5:
      var value = new proto.rv.data.DigitalAudio.Device;
      reader.readMessage(value,proto.rv.data.DigitalAudio.Device.deserializeBinaryFromReader);
      msg.setSdiNdiDevice(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMonitorOnMains(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisableMainOutputDevice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.DigitalAudio.Setup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.DigitalAudio.Setup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.DigitalAudio.Setup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.DigitalAudio.Setup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBusesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rv.data.DigitalAudio.Bus.serializeBinaryToWriter
    );
  }
  f = message.getMonitorDevice();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rv.data.DigitalAudio.Device.serializeBinaryToWriter
    );
  }
  f = message.getMainOutputDevice();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rv.data.DigitalAudio.Device.serializeBinaryToWriter
    );
  }
  f = message.getEnableSdiNdiDevice();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getSdiNdiDevice();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.rv.data.DigitalAudio.Device.serializeBinaryToWriter
    );
  }
  f = message.getMonitorOnMains();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getDisableMainOutputDevice();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * repeated Bus buses = 1;
 * @return {!Array<!proto.rv.data.DigitalAudio.Bus>}
 */
proto.rv.data.DigitalAudio.Setup.prototype.getBusesList = function() {
  return /** @type{!Array<!proto.rv.data.DigitalAudio.Bus>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rv.data.DigitalAudio.Bus, 1));
};


/**
 * @param {!Array<!proto.rv.data.DigitalAudio.Bus>} value
 * @return {!proto.rv.data.DigitalAudio.Setup} returns this
*/
proto.rv.data.DigitalAudio.Setup.prototype.setBusesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.rv.data.DigitalAudio.Bus=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rv.data.DigitalAudio.Bus}
 */
proto.rv.data.DigitalAudio.Setup.prototype.addBuses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rv.data.DigitalAudio.Bus, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.DigitalAudio.Setup} returns this
 */
proto.rv.data.DigitalAudio.Setup.prototype.clearBusesList = function() {
  return this.setBusesList([]);
};


/**
 * optional Device monitor_device = 2;
 * @return {?proto.rv.data.DigitalAudio.Device}
 */
proto.rv.data.DigitalAudio.Setup.prototype.getMonitorDevice = function() {
  return /** @type{?proto.rv.data.DigitalAudio.Device} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.DigitalAudio.Device, 2));
};


/**
 * @param {?proto.rv.data.DigitalAudio.Device|undefined} value
 * @return {!proto.rv.data.DigitalAudio.Setup} returns this
*/
proto.rv.data.DigitalAudio.Setup.prototype.setMonitorDevice = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.DigitalAudio.Setup} returns this
 */
proto.rv.data.DigitalAudio.Setup.prototype.clearMonitorDevice = function() {
  return this.setMonitorDevice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.DigitalAudio.Setup.prototype.hasMonitorDevice = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Device main_output_device = 3;
 * @return {?proto.rv.data.DigitalAudio.Device}
 */
proto.rv.data.DigitalAudio.Setup.prototype.getMainOutputDevice = function() {
  return /** @type{?proto.rv.data.DigitalAudio.Device} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.DigitalAudio.Device, 3));
};


/**
 * @param {?proto.rv.data.DigitalAudio.Device|undefined} value
 * @return {!proto.rv.data.DigitalAudio.Setup} returns this
*/
proto.rv.data.DigitalAudio.Setup.prototype.setMainOutputDevice = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.DigitalAudio.Setup} returns this
 */
proto.rv.data.DigitalAudio.Setup.prototype.clearMainOutputDevice = function() {
  return this.setMainOutputDevice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.DigitalAudio.Setup.prototype.hasMainOutputDevice = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool enable_sdi_ndi_device = 4;
 * @return {boolean}
 */
proto.rv.data.DigitalAudio.Setup.prototype.getEnableSdiNdiDevice = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.DigitalAudio.Setup} returns this
 */
proto.rv.data.DigitalAudio.Setup.prototype.setEnableSdiNdiDevice = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional Device sdi_ndi_device = 5;
 * @return {?proto.rv.data.DigitalAudio.Device}
 */
proto.rv.data.DigitalAudio.Setup.prototype.getSdiNdiDevice = function() {
  return /** @type{?proto.rv.data.DigitalAudio.Device} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.DigitalAudio.Device, 5));
};


/**
 * @param {?proto.rv.data.DigitalAudio.Device|undefined} value
 * @return {!proto.rv.data.DigitalAudio.Setup} returns this
*/
proto.rv.data.DigitalAudio.Setup.prototype.setSdiNdiDevice = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.DigitalAudio.Setup} returns this
 */
proto.rv.data.DigitalAudio.Setup.prototype.clearSdiNdiDevice = function() {
  return this.setSdiNdiDevice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.DigitalAudio.Setup.prototype.hasSdiNdiDevice = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool monitor_on_mains = 6;
 * @return {boolean}
 */
proto.rv.data.DigitalAudio.Setup.prototype.getMonitorOnMains = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.DigitalAudio.Setup} returns this
 */
proto.rv.data.DigitalAudio.Setup.prototype.setMonitorOnMains = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool disable_main_output_device = 7;
 * @return {boolean}
 */
proto.rv.data.DigitalAudio.Setup.prototype.getDisableMainOutputDevice = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.DigitalAudio.Setup} returns this
 */
proto.rv.data.DigitalAudio.Setup.prototype.setDisableMainOutputDevice = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.DigitalAudio.Bus.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.DigitalAudio.Bus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.DigitalAudio.Bus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.DigitalAudio.Bus.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, ""),
muted: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
solo: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
testTone: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
masterLevel: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.DigitalAudio.Bus}
 */
proto.rv.data.DigitalAudio.Bus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.DigitalAudio.Bus;
  return proto.rv.data.DigitalAudio.Bus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.DigitalAudio.Bus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.DigitalAudio.Bus}
 */
proto.rv.data.DigitalAudio.Bus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMuted(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSolo(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTestTone(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMasterLevel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.DigitalAudio.Bus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.DigitalAudio.Bus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.DigitalAudio.Bus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.DigitalAudio.Bus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMuted();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getSolo();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getTestTone();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getMasterLevel();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.rv.data.DigitalAudio.Bus.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.DigitalAudio.Bus} returns this
 */
proto.rv.data.DigitalAudio.Bus.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool muted = 2;
 * @return {boolean}
 */
proto.rv.data.DigitalAudio.Bus.prototype.getMuted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.DigitalAudio.Bus} returns this
 */
proto.rv.data.DigitalAudio.Bus.prototype.setMuted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool solo = 3;
 * @return {boolean}
 */
proto.rv.data.DigitalAudio.Bus.prototype.getSolo = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.DigitalAudio.Bus} returns this
 */
proto.rv.data.DigitalAudio.Bus.prototype.setSolo = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool test_tone = 4;
 * @return {boolean}
 */
proto.rv.data.DigitalAudio.Bus.prototype.getTestTone = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.DigitalAudio.Bus} returns this
 */
proto.rv.data.DigitalAudio.Bus.prototype.setTestTone = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional double master_level = 5;
 * @return {number}
 */
proto.rv.data.DigitalAudio.Bus.prototype.getMasterLevel = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.DigitalAudio.Bus} returns this
 */
proto.rv.data.DigitalAudio.Bus.prototype.setMasterLevel = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rv.data.DigitalAudio.Device.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.DigitalAudio.Device.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.DigitalAudio.Device.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.DigitalAudio.Device} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.DigitalAudio.Device.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, ""),
renderid: jspb.Message.getFieldWithDefault(msg, 2, ""),
formatsList: jspb.Message.toObjectList(msg.getFormatsList(),
    proto.rv.data.DigitalAudio.Device.Format.toObject, includeInstance),
routing: (f = msg.getRouting()) && proto.rv.data.DigitalAudio.Device.Routing.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.DigitalAudio.Device}
 */
proto.rv.data.DigitalAudio.Device.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.DigitalAudio.Device;
  return proto.rv.data.DigitalAudio.Device.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.DigitalAudio.Device} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.DigitalAudio.Device}
 */
proto.rv.data.DigitalAudio.Device.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRenderid(value);
      break;
    case 3:
      var value = new proto.rv.data.DigitalAudio.Device.Format;
      reader.readMessage(value,proto.rv.data.DigitalAudio.Device.Format.deserializeBinaryFromReader);
      msg.addFormats(value);
      break;
    case 4:
      var value = new proto.rv.data.DigitalAudio.Device.Routing;
      reader.readMessage(value,proto.rv.data.DigitalAudio.Device.Routing.deserializeBinaryFromReader);
      msg.setRouting(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.DigitalAudio.Device.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.DigitalAudio.Device.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.DigitalAudio.Device} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.DigitalAudio.Device.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRenderid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFormatsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.rv.data.DigitalAudio.Device.Format.serializeBinaryToWriter
    );
  }
  f = message.getRouting();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rv.data.DigitalAudio.Device.Routing.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.DigitalAudio.Device.Format.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.DigitalAudio.Device.Format.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.DigitalAudio.Device.Format} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.DigitalAudio.Device.Format.toObject = function(includeInstance, msg) {
  var f, obj = {
sampleRate: jspb.Message.getFieldWithDefault(msg, 1, 0),
bitDepth: jspb.Message.getFieldWithDefault(msg, 2, 0),
type: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.DigitalAudio.Device.Format}
 */
proto.rv.data.DigitalAudio.Device.Format.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.DigitalAudio.Device.Format;
  return proto.rv.data.DigitalAudio.Device.Format.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.DigitalAudio.Device.Format} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.DigitalAudio.Device.Format}
 */
proto.rv.data.DigitalAudio.Device.Format.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSampleRate(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBitDepth(value);
      break;
    case 3:
      var value = /** @type {!proto.rv.data.DigitalAudio.Device.Format.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.DigitalAudio.Device.Format.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.DigitalAudio.Device.Format.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.DigitalAudio.Device.Format} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.DigitalAudio.Device.Format.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSampleRate();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getBitDepth();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.rv.data.DigitalAudio.Device.Format.Type = {
  TYPE_INT: 0,
  TYPE_FLOAT: 1
};

/**
 * optional uint32 sample_rate = 1;
 * @return {number}
 */
proto.rv.data.DigitalAudio.Device.Format.prototype.getSampleRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.DigitalAudio.Device.Format} returns this
 */
proto.rv.data.DigitalAudio.Device.Format.prototype.setSampleRate = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 bit_depth = 2;
 * @return {number}
 */
proto.rv.data.DigitalAudio.Device.Format.prototype.getBitDepth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.DigitalAudio.Device.Format} returns this
 */
proto.rv.data.DigitalAudio.Device.Format.prototype.setBitDepth = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Type type = 3;
 * @return {!proto.rv.data.DigitalAudio.Device.Format.Type}
 */
proto.rv.data.DigitalAudio.Device.Format.prototype.getType = function() {
  return /** @type {!proto.rv.data.DigitalAudio.Device.Format.Type} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.rv.data.DigitalAudio.Device.Format.Type} value
 * @return {!proto.rv.data.DigitalAudio.Device.Format} returns this
 */
proto.rv.data.DigitalAudio.Device.Format.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rv.data.DigitalAudio.Device.Map.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.DigitalAudio.Device.Map.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.DigitalAudio.Device.Map.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.DigitalAudio.Device.Map} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.DigitalAudio.Device.Map.toObject = function(includeInstance, msg) {
  var f, obj = {
channelIndex: jspb.Message.getFieldWithDefault(msg, 1, 0),
mappedIndicesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.DigitalAudio.Device.Map}
 */
proto.rv.data.DigitalAudio.Device.Map.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.DigitalAudio.Device.Map;
  return proto.rv.data.DigitalAudio.Device.Map.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.DigitalAudio.Device.Map} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.DigitalAudio.Device.Map}
 */
proto.rv.data.DigitalAudio.Device.Map.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChannelIndex(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addMappedIndices(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.DigitalAudio.Device.Map.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.DigitalAudio.Device.Map.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.DigitalAudio.Device.Map} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.DigitalAudio.Device.Map.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelIndex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMappedIndicesList();
  if (f.length > 0) {
    writer.writePackedUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 channel_index = 1;
 * @return {number}
 */
proto.rv.data.DigitalAudio.Device.Map.prototype.getChannelIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.DigitalAudio.Device.Map} returns this
 */
proto.rv.data.DigitalAudio.Device.Map.prototype.setChannelIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated uint32 mapped_indices = 2;
 * @return {!Array<number>}
 */
proto.rv.data.DigitalAudio.Device.Map.prototype.getMappedIndicesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.rv.data.DigitalAudio.Device.Map} returns this
 */
proto.rv.data.DigitalAudio.Device.Map.prototype.setMappedIndicesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.rv.data.DigitalAudio.Device.Map} returns this
 */
proto.rv.data.DigitalAudio.Device.Map.prototype.addMappedIndices = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.DigitalAudio.Device.Map} returns this
 */
proto.rv.data.DigitalAudio.Device.Map.prototype.clearMappedIndicesList = function() {
  return this.setMappedIndicesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.DigitalAudio.Device.Channel.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.DigitalAudio.Device.Channel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.DigitalAudio.Device.Channel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.DigitalAudio.Device.Channel.toObject = function(includeInstance, msg) {
  var f, obj = {
muteEnable: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
soloEnable: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
toneEnable: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
audioDelay: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
level: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.DigitalAudio.Device.Channel}
 */
proto.rv.data.DigitalAudio.Device.Channel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.DigitalAudio.Device.Channel;
  return proto.rv.data.DigitalAudio.Device.Channel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.DigitalAudio.Device.Channel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.DigitalAudio.Device.Channel}
 */
proto.rv.data.DigitalAudio.Device.Channel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMuteEnable(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSoloEnable(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setToneEnable(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAudioDelay(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLevel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.DigitalAudio.Device.Channel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.DigitalAudio.Device.Channel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.DigitalAudio.Device.Channel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.DigitalAudio.Device.Channel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMuteEnable();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getSoloEnable();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getToneEnable();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getAudioDelay();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
};


/**
 * optional bool mute_enable = 1;
 * @return {boolean}
 */
proto.rv.data.DigitalAudio.Device.Channel.prototype.getMuteEnable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.DigitalAudio.Device.Channel} returns this
 */
proto.rv.data.DigitalAudio.Device.Channel.prototype.setMuteEnable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool solo_enable = 2;
 * @return {boolean}
 */
proto.rv.data.DigitalAudio.Device.Channel.prototype.getSoloEnable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.DigitalAudio.Device.Channel} returns this
 */
proto.rv.data.DigitalAudio.Device.Channel.prototype.setSoloEnable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool tone_enable = 3;
 * @return {boolean}
 */
proto.rv.data.DigitalAudio.Device.Channel.prototype.getToneEnable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.DigitalAudio.Device.Channel} returns this
 */
proto.rv.data.DigitalAudio.Device.Channel.prototype.setToneEnable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional double audio_delay = 4;
 * @return {number}
 */
proto.rv.data.DigitalAudio.Device.Channel.prototype.getAudioDelay = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.DigitalAudio.Device.Channel} returns this
 */
proto.rv.data.DigitalAudio.Device.Channel.prototype.setAudioDelay = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double level = 5;
 * @return {number}
 */
proto.rv.data.DigitalAudio.Device.Channel.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.DigitalAudio.Device.Channel} returns this
 */
proto.rv.data.DigitalAudio.Device.Channel.prototype.setLevel = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rv.data.DigitalAudio.Device.Routing.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.DigitalAudio.Device.Routing.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.DigitalAudio.Device.Routing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.DigitalAudio.Device.Routing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.DigitalAudio.Device.Routing.toObject = function(includeInstance, msg) {
  var f, obj = {
channelsList: jspb.Message.toObjectList(msg.getChannelsList(),
    proto.rv.data.DigitalAudio.Device.Channel.toObject, includeInstance),
mapList: jspb.Message.toObjectList(msg.getMapList(),
    proto.rv.data.DigitalAudio.Device.Map.toObject, includeInstance),
isCustomMap: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
masterChannel: (f = msg.getMasterChannel()) && proto.rv.data.DigitalAudio.Device.Channel.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.DigitalAudio.Device.Routing}
 */
proto.rv.data.DigitalAudio.Device.Routing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.DigitalAudio.Device.Routing;
  return proto.rv.data.DigitalAudio.Device.Routing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.DigitalAudio.Device.Routing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.DigitalAudio.Device.Routing}
 */
proto.rv.data.DigitalAudio.Device.Routing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.DigitalAudio.Device.Channel;
      reader.readMessage(value,proto.rv.data.DigitalAudio.Device.Channel.deserializeBinaryFromReader);
      msg.addChannels(value);
      break;
    case 2:
      var value = new proto.rv.data.DigitalAudio.Device.Map;
      reader.readMessage(value,proto.rv.data.DigitalAudio.Device.Map.deserializeBinaryFromReader);
      msg.addMap(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsCustomMap(value);
      break;
    case 4:
      var value = new proto.rv.data.DigitalAudio.Device.Channel;
      reader.readMessage(value,proto.rv.data.DigitalAudio.Device.Channel.deserializeBinaryFromReader);
      msg.setMasterChannel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.DigitalAudio.Device.Routing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.DigitalAudio.Device.Routing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.DigitalAudio.Device.Routing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.DigitalAudio.Device.Routing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rv.data.DigitalAudio.Device.Channel.serializeBinaryToWriter
    );
  }
  f = message.getMapList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.rv.data.DigitalAudio.Device.Map.serializeBinaryToWriter
    );
  }
  f = message.getIsCustomMap();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getMasterChannel();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rv.data.DigitalAudio.Device.Channel.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Channel channels = 1;
 * @return {!Array<!proto.rv.data.DigitalAudio.Device.Channel>}
 */
proto.rv.data.DigitalAudio.Device.Routing.prototype.getChannelsList = function() {
  return /** @type{!Array<!proto.rv.data.DigitalAudio.Device.Channel>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rv.data.DigitalAudio.Device.Channel, 1));
};


/**
 * @param {!Array<!proto.rv.data.DigitalAudio.Device.Channel>} value
 * @return {!proto.rv.data.DigitalAudio.Device.Routing} returns this
*/
proto.rv.data.DigitalAudio.Device.Routing.prototype.setChannelsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.rv.data.DigitalAudio.Device.Channel=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rv.data.DigitalAudio.Device.Channel}
 */
proto.rv.data.DigitalAudio.Device.Routing.prototype.addChannels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rv.data.DigitalAudio.Device.Channel, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.DigitalAudio.Device.Routing} returns this
 */
proto.rv.data.DigitalAudio.Device.Routing.prototype.clearChannelsList = function() {
  return this.setChannelsList([]);
};


/**
 * repeated Map map = 2;
 * @return {!Array<!proto.rv.data.DigitalAudio.Device.Map>}
 */
proto.rv.data.DigitalAudio.Device.Routing.prototype.getMapList = function() {
  return /** @type{!Array<!proto.rv.data.DigitalAudio.Device.Map>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rv.data.DigitalAudio.Device.Map, 2));
};


/**
 * @param {!Array<!proto.rv.data.DigitalAudio.Device.Map>} value
 * @return {!proto.rv.data.DigitalAudio.Device.Routing} returns this
*/
proto.rv.data.DigitalAudio.Device.Routing.prototype.setMapList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.rv.data.DigitalAudio.Device.Map=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rv.data.DigitalAudio.Device.Map}
 */
proto.rv.data.DigitalAudio.Device.Routing.prototype.addMap = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.rv.data.DigitalAudio.Device.Map, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.DigitalAudio.Device.Routing} returns this
 */
proto.rv.data.DigitalAudio.Device.Routing.prototype.clearMapList = function() {
  return this.setMapList([]);
};


/**
 * optional bool is_custom_map = 3;
 * @return {boolean}
 */
proto.rv.data.DigitalAudio.Device.Routing.prototype.getIsCustomMap = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.DigitalAudio.Device.Routing} returns this
 */
proto.rv.data.DigitalAudio.Device.Routing.prototype.setIsCustomMap = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional Channel master_channel = 4;
 * @return {?proto.rv.data.DigitalAudio.Device.Channel}
 */
proto.rv.data.DigitalAudio.Device.Routing.prototype.getMasterChannel = function() {
  return /** @type{?proto.rv.data.DigitalAudio.Device.Channel} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.DigitalAudio.Device.Channel, 4));
};


/**
 * @param {?proto.rv.data.DigitalAudio.Device.Channel|undefined} value
 * @return {!proto.rv.data.DigitalAudio.Device.Routing} returns this
*/
proto.rv.data.DigitalAudio.Device.Routing.prototype.setMasterChannel = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.DigitalAudio.Device.Routing} returns this
 */
proto.rv.data.DigitalAudio.Device.Routing.prototype.clearMasterChannel = function() {
  return this.setMasterChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.DigitalAudio.Device.Routing.prototype.hasMasterChannel = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.rv.data.DigitalAudio.Device.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.DigitalAudio.Device} returns this
 */
proto.rv.data.DigitalAudio.Device.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string renderID = 2;
 * @return {string}
 */
proto.rv.data.DigitalAudio.Device.prototype.getRenderid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.DigitalAudio.Device} returns this
 */
proto.rv.data.DigitalAudio.Device.prototype.setRenderid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Format formats = 3;
 * @return {!Array<!proto.rv.data.DigitalAudio.Device.Format>}
 */
proto.rv.data.DigitalAudio.Device.prototype.getFormatsList = function() {
  return /** @type{!Array<!proto.rv.data.DigitalAudio.Device.Format>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rv.data.DigitalAudio.Device.Format, 3));
};


/**
 * @param {!Array<!proto.rv.data.DigitalAudio.Device.Format>} value
 * @return {!proto.rv.data.DigitalAudio.Device} returns this
*/
proto.rv.data.DigitalAudio.Device.prototype.setFormatsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.rv.data.DigitalAudio.Device.Format=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rv.data.DigitalAudio.Device.Format}
 */
proto.rv.data.DigitalAudio.Device.prototype.addFormats = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.rv.data.DigitalAudio.Device.Format, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.DigitalAudio.Device} returns this
 */
proto.rv.data.DigitalAudio.Device.prototype.clearFormatsList = function() {
  return this.setFormatsList([]);
};


/**
 * optional Routing routing = 4;
 * @return {?proto.rv.data.DigitalAudio.Device.Routing}
 */
proto.rv.data.DigitalAudio.Device.prototype.getRouting = function() {
  return /** @type{?proto.rv.data.DigitalAudio.Device.Routing} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.DigitalAudio.Device.Routing, 4));
};


/**
 * @param {?proto.rv.data.DigitalAudio.Device.Routing|undefined} value
 * @return {!proto.rv.data.DigitalAudio.Device} returns this
*/
proto.rv.data.DigitalAudio.Device.prototype.setRouting = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.DigitalAudio.Device} returns this
 */
proto.rv.data.DigitalAudio.Device.prototype.clearRouting = function() {
  return this.setRouting(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.DigitalAudio.Device.prototype.hasRouting = function() {
  return jspb.Message.getField(this, 4) != null;
};


