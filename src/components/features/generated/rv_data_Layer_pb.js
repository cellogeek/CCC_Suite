// source: layers.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.rv.data.Layer');
goog.provide('proto.rv.data.Layer.BlendMode');
goog.provide('proto.rv.data.Layer.Blending');
goog.provide('proto.rv.data.Layer.Blending.BlendingtypeCase');
goog.provide('proto.rv.data.Layer.Blending.Matte');
goog.provide('proto.rv.data.Layer.Blending.Matte.Alpha');
goog.provide('proto.rv.data.Layer.Blending.Matte.Luma');
goog.provide('proto.rv.data.Layer.Blending.Matte.MattetypeCase');
goog.provide('proto.rv.data.Layer.Blending.Matte.White');
goog.provide('proto.rv.data.Layer.Blending.Standard');
goog.provide('proto.rv.data.Layer.Preset');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.rv.data.Color');
goog.require('proto.rv.data.Effect');
goog.require('proto.rv.data.HotKey');
goog.require('proto.rv.data.Transition');
goog.require('proto.rv.data.UUID');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Layer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rv.data.Layer.repeatedFields_, null);
};
goog.inherits(proto.rv.data.Layer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Layer.displayName = 'proto.rv.data.Layer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Layer.Preset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.Layer.Preset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Layer.Preset.displayName = 'proto.rv.data.Layer.Preset';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Layer.Blending = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rv.data.Layer.Blending.oneofGroups_);
};
goog.inherits(proto.rv.data.Layer.Blending, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Layer.Blending.displayName = 'proto.rv.data.Layer.Blending';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Layer.Blending.Standard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.Layer.Blending.Standard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Layer.Blending.Standard.displayName = 'proto.rv.data.Layer.Blending.Standard';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Layer.Blending.Matte = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rv.data.Layer.Blending.Matte.oneofGroups_);
};
goog.inherits(proto.rv.data.Layer.Blending.Matte, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Layer.Blending.Matte.displayName = 'proto.rv.data.Layer.Blending.Matte';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Layer.Blending.Matte.Alpha = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.Layer.Blending.Matte.Alpha, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Layer.Blending.Matte.Alpha.displayName = 'proto.rv.data.Layer.Blending.Matte.Alpha';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Layer.Blending.Matte.Luma = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.Layer.Blending.Matte.Luma, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Layer.Blending.Matte.Luma.displayName = 'proto.rv.data.Layer.Blending.Matte.Luma';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Layer.Blending.Matte.White = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.Layer.Blending.Matte.White, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Layer.Blending.Matte.White.displayName = 'proto.rv.data.Layer.Blending.Matte.White';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rv.data.Layer.repeatedFields_ = [14];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Layer.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Layer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Layer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Layer.toObject = function(includeInstance, msg) {
  var f, obj = {
uuid: (f = msg.getUuid()) && proto.rv.data.UUID.toObject(includeInstance, f),
name: jspb.Message.getFieldWithDefault(msg, 2, ""),
color: (f = msg.getColor()) && proto.rv.data.Color.toObject(includeInstance, f),
muted: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
hidden: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
blendMode: jspb.Message.getFieldWithDefault(msg, 6, 0),
opacity: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
selectedTargetSetUuid: (f = msg.getSelectedTargetSetUuid()) && proto.rv.data.UUID.toObject(includeInstance, f),
effectsPresetUuid: (f = msg.getEffectsPresetUuid()) && proto.rv.data.UUID.toObject(includeInstance, f),
effectsBuildDuration: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
layerPresetUuid: (f = msg.getLayerPresetUuid()) && proto.rv.data.UUID.toObject(includeInstance, f),
hotKey: (f = msg.getHotKey()) && proto.rv.data.HotKey.toObject(includeInstance, f),
transition: (f = msg.getTransition()) && proto.rv.data.Transition.toObject(includeInstance, f),
effectsList: jspb.Message.toObjectList(msg.getEffectsList(),
    proto.rv.data.Effect.toObject, includeInstance),
blend: (f = msg.getBlend()) && proto.rv.data.Layer.Blending.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Layer}
 */
proto.rv.data.Layer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Layer;
  return proto.rv.data.Layer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Layer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Layer}
 */
proto.rv.data.Layer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.UUID;
      reader.readMessage(value,proto.rv.data.UUID.deserializeBinaryFromReader);
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.rv.data.Color;
      reader.readMessage(value,proto.rv.data.Color.deserializeBinaryFromReader);
      msg.setColor(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMuted(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHidden(value);
      break;
    case 6:
      var value = /** @type {!proto.rv.data.Layer.BlendMode} */ (reader.readEnum());
      msg.setBlendMode(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOpacity(value);
      break;
    case 8:
      var value = new proto.rv.data.UUID;
      reader.readMessage(value,proto.rv.data.UUID.deserializeBinaryFromReader);
      msg.setSelectedTargetSetUuid(value);
      break;
    case 9:
      var value = new proto.rv.data.UUID;
      reader.readMessage(value,proto.rv.data.UUID.deserializeBinaryFromReader);
      msg.setEffectsPresetUuid(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEffectsBuildDuration(value);
      break;
    case 11:
      var value = new proto.rv.data.UUID;
      reader.readMessage(value,proto.rv.data.UUID.deserializeBinaryFromReader);
      msg.setLayerPresetUuid(value);
      break;
    case 12:
      var value = new proto.rv.data.HotKey;
      reader.readMessage(value,proto.rv.data.HotKey.deserializeBinaryFromReader);
      msg.setHotKey(value);
      break;
    case 13:
      var value = new proto.rv.data.Transition;
      reader.readMessage(value,proto.rv.data.Transition.deserializeBinaryFromReader);
      msg.setTransition(value);
      break;
    case 14:
      var value = new proto.rv.data.Effect;
      reader.readMessage(value,proto.rv.data.Effect.deserializeBinaryFromReader);
      msg.addEffects(value);
      break;
    case 15:
      var value = new proto.rv.data.Layer.Blending;
      reader.readMessage(value,proto.rv.data.Layer.Blending.deserializeBinaryFromReader);
      msg.setBlend(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Layer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Layer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Layer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Layer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.UUID.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getColor();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rv.data.Color.serializeBinaryToWriter
    );
  }
  f = message.getMuted();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getHidden();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getBlendMode();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getOpacity();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getSelectedTargetSetUuid();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.rv.data.UUID.serializeBinaryToWriter
    );
  }
  f = message.getEffectsPresetUuid();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.rv.data.UUID.serializeBinaryToWriter
    );
  }
  f = message.getEffectsBuildDuration();
  if (f !== 0.0) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = message.getLayerPresetUuid();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.rv.data.UUID.serializeBinaryToWriter
    );
  }
  f = message.getHotKey();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.rv.data.HotKey.serializeBinaryToWriter
    );
  }
  f = message.getTransition();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.rv.data.Transition.serializeBinaryToWriter
    );
  }
  f = message.getEffectsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      proto.rv.data.Effect.serializeBinaryToWriter
    );
  }
  f = message.getBlend();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.rv.data.Layer.Blending.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.rv.data.Layer.BlendMode = {
  BLEND_MODE_NORMAL: 0,
  BLEND_MODE_DISSOLVE: 1,
  BLEND_MODE_DARKEN: 2,
  BLEND_MODE_MULTIPLY: 3,
  BLEND_MODE_COLOR_BURN: 4,
  BLEND_MODE_LINEAR_BURN: 5,
  BLEND_MODE_DARKER_COLOR: 6,
  BLEND_MODE_LIGHTEN: 7,
  BLEND_MODE_SCREEN: 8,
  BLEND_MODE_COLOR_DODGE: 9,
  BLEND_MODE_LINEAR_DODGE: 10,
  BLEND_MODE_LIGHTER_COLOR: 11,
  BLEND_MODE_OVERLAY: 12,
  BLEND_MODE_SOFT_LIGHT: 13,
  BLEND_MODE_HARD_LIGHT: 14,
  BLEND_MODE_VIVID_LIGHT: 15,
  BLEND_MODE_LINEAR_LIGHT: 16,
  BLEND_MODE_PIN_LIGHT: 17,
  BLEND_MODE_HARD_MIX: 18,
  BLEND_MODE_DIFFERENCE: 19,
  BLEND_MODE_EXCLUSION: 20,
  BLEND_MODE_SUBTRACT: 21,
  BLEND_MODE_DIVIDE: 22,
  BLEND_MODE_HUE: 23,
  BLEND_MODE_SATURATION: 24,
  BLEND_MODE_COLOR: 25,
  BLEND_MODE_LUMINOSITY: 26
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Layer.Preset.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Layer.Preset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Layer.Preset} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Layer.Preset.toObject = function(includeInstance, msg) {
  var f, obj = {
uuid: (f = msg.getUuid()) && proto.rv.data.UUID.toObject(includeInstance, f),
name: jspb.Message.getFieldWithDefault(msg, 2, ""),
layer: (f = msg.getLayer()) && proto.rv.data.Layer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Layer.Preset}
 */
proto.rv.data.Layer.Preset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Layer.Preset;
  return proto.rv.data.Layer.Preset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Layer.Preset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Layer.Preset}
 */
proto.rv.data.Layer.Preset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.UUID;
      reader.readMessage(value,proto.rv.data.UUID.deserializeBinaryFromReader);
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.rv.data.Layer;
      reader.readMessage(value,proto.rv.data.Layer.deserializeBinaryFromReader);
      msg.setLayer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Layer.Preset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Layer.Preset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Layer.Preset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Layer.Preset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.UUID.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLayer();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rv.data.Layer.serializeBinaryToWriter
    );
  }
};


/**
 * optional UUID uuid = 1;
 * @return {?proto.rv.data.UUID}
 */
proto.rv.data.Layer.Preset.prototype.getUuid = function() {
  return /** @type{?proto.rv.data.UUID} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.UUID, 1));
};


/**
 * @param {?proto.rv.data.UUID|undefined} value
 * @return {!proto.rv.data.Layer.Preset} returns this
*/
proto.rv.data.Layer.Preset.prototype.setUuid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Layer.Preset} returns this
 */
proto.rv.data.Layer.Preset.prototype.clearUuid = function() {
  return this.setUuid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Layer.Preset.prototype.hasUuid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.rv.data.Layer.Preset.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.Layer.Preset} returns this
 */
proto.rv.data.Layer.Preset.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Layer layer = 3;
 * @return {?proto.rv.data.Layer}
 */
proto.rv.data.Layer.Preset.prototype.getLayer = function() {
  return /** @type{?proto.rv.data.Layer} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Layer, 3));
};


/**
 * @param {?proto.rv.data.Layer|undefined} value
 * @return {!proto.rv.data.Layer.Preset} returns this
*/
proto.rv.data.Layer.Preset.prototype.setLayer = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Layer.Preset} returns this
 */
proto.rv.data.Layer.Preset.prototype.clearLayer = function() {
  return this.setLayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Layer.Preset.prototype.hasLayer = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rv.data.Layer.Blending.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.rv.data.Layer.Blending.BlendingtypeCase = {
  BLENDINGTYPE_NOT_SET: 0,
  STANDARD: 1,
  MATTE: 2
};

/**
 * @return {proto.rv.data.Layer.Blending.BlendingtypeCase}
 */
proto.rv.data.Layer.Blending.prototype.getBlendingtypeCase = function() {
  return /** @type {proto.rv.data.Layer.Blending.BlendingtypeCase} */(jspb.Message.computeOneofCase(this, proto.rv.data.Layer.Blending.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Layer.Blending.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Layer.Blending.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Layer.Blending} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Layer.Blending.toObject = function(includeInstance, msg) {
  var f, obj = {
standard: (f = msg.getStandard()) && proto.rv.data.Layer.Blending.Standard.toObject(includeInstance, f),
matte: (f = msg.getMatte()) && proto.rv.data.Layer.Blending.Matte.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Layer.Blending}
 */
proto.rv.data.Layer.Blending.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Layer.Blending;
  return proto.rv.data.Layer.Blending.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Layer.Blending} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Layer.Blending}
 */
proto.rv.data.Layer.Blending.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.Layer.Blending.Standard;
      reader.readMessage(value,proto.rv.data.Layer.Blending.Standard.deserializeBinaryFromReader);
      msg.setStandard(value);
      break;
    case 2:
      var value = new proto.rv.data.Layer.Blending.Matte;
      reader.readMessage(value,proto.rv.data.Layer.Blending.Matte.deserializeBinaryFromReader);
      msg.setMatte(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Layer.Blending.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Layer.Blending.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Layer.Blending} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Layer.Blending.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStandard();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.Layer.Blending.Standard.serializeBinaryToWriter
    );
  }
  f = message.getMatte();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rv.data.Layer.Blending.Matte.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Layer.Blending.Standard.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Layer.Blending.Standard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Layer.Blending.Standard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Layer.Blending.Standard.toObject = function(includeInstance, msg) {
  var f, obj = {
mode: jspb.Message.getFieldWithDefault(msg, 1, 0),
opacity: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Layer.Blending.Standard}
 */
proto.rv.data.Layer.Blending.Standard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Layer.Blending.Standard;
  return proto.rv.data.Layer.Blending.Standard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Layer.Blending.Standard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Layer.Blending.Standard}
 */
proto.rv.data.Layer.Blending.Standard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.rv.data.Layer.BlendMode} */ (reader.readEnum());
      msg.setMode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOpacity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Layer.Blending.Standard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Layer.Blending.Standard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Layer.Blending.Standard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Layer.Blending.Standard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getOpacity();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional BlendMode mode = 1;
 * @return {!proto.rv.data.Layer.BlendMode}
 */
proto.rv.data.Layer.Blending.Standard.prototype.getMode = function() {
  return /** @type {!proto.rv.data.Layer.BlendMode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.rv.data.Layer.BlendMode} value
 * @return {!proto.rv.data.Layer.Blending.Standard} returns this
 */
proto.rv.data.Layer.Blending.Standard.prototype.setMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional double opacity = 2;
 * @return {number}
 */
proto.rv.data.Layer.Blending.Standard.prototype.getOpacity = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.Layer.Blending.Standard} returns this
 */
proto.rv.data.Layer.Blending.Standard.prototype.setOpacity = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rv.data.Layer.Blending.Matte.oneofGroups_ = [[1,2,4]];

/**
 * @enum {number}
 */
proto.rv.data.Layer.Blending.Matte.MattetypeCase = {
  MATTETYPE_NOT_SET: 0,
  ALPHA: 1,
  LUMA: 2,
  WHITE: 4
};

/**
 * @return {proto.rv.data.Layer.Blending.Matte.MattetypeCase}
 */
proto.rv.data.Layer.Blending.Matte.prototype.getMattetypeCase = function() {
  return /** @type {proto.rv.data.Layer.Blending.Matte.MattetypeCase} */(jspb.Message.computeOneofCase(this, proto.rv.data.Layer.Blending.Matte.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Layer.Blending.Matte.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Layer.Blending.Matte.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Layer.Blending.Matte} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Layer.Blending.Matte.toObject = function(includeInstance, msg) {
  var f, obj = {
alpha: (f = msg.getAlpha()) && proto.rv.data.Layer.Blending.Matte.Alpha.toObject(includeInstance, f),
luma: (f = msg.getLuma()) && proto.rv.data.Layer.Blending.Matte.Luma.toObject(includeInstance, f),
white: (f = msg.getWhite()) && proto.rv.data.Layer.Blending.Matte.White.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Layer.Blending.Matte}
 */
proto.rv.data.Layer.Blending.Matte.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Layer.Blending.Matte;
  return proto.rv.data.Layer.Blending.Matte.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Layer.Blending.Matte} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Layer.Blending.Matte}
 */
proto.rv.data.Layer.Blending.Matte.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.Layer.Blending.Matte.Alpha;
      reader.readMessage(value,proto.rv.data.Layer.Blending.Matte.Alpha.deserializeBinaryFromReader);
      msg.setAlpha(value);
      break;
    case 2:
      var value = new proto.rv.data.Layer.Blending.Matte.Luma;
      reader.readMessage(value,proto.rv.data.Layer.Blending.Matte.Luma.deserializeBinaryFromReader);
      msg.setLuma(value);
      break;
    case 4:
      var value = new proto.rv.data.Layer.Blending.Matte.White;
      reader.readMessage(value,proto.rv.data.Layer.Blending.Matte.White.deserializeBinaryFromReader);
      msg.setWhite(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Layer.Blending.Matte.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Layer.Blending.Matte.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Layer.Blending.Matte} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Layer.Blending.Matte.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAlpha();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.Layer.Blending.Matte.Alpha.serializeBinaryToWriter
    );
  }
  f = message.getLuma();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rv.data.Layer.Blending.Matte.Luma.serializeBinaryToWriter
    );
  }
  f = message.getWhite();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rv.data.Layer.Blending.Matte.White.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Layer.Blending.Matte.Alpha.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Layer.Blending.Matte.Alpha.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Layer.Blending.Matte.Alpha} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Layer.Blending.Matte.Alpha.toObject = function(includeInstance, msg) {
  var f, obj = {
inverted: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Layer.Blending.Matte.Alpha}
 */
proto.rv.data.Layer.Blending.Matte.Alpha.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Layer.Blending.Matte.Alpha;
  return proto.rv.data.Layer.Blending.Matte.Alpha.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Layer.Blending.Matte.Alpha} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Layer.Blending.Matte.Alpha}
 */
proto.rv.data.Layer.Blending.Matte.Alpha.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInverted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Layer.Blending.Matte.Alpha.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Layer.Blending.Matte.Alpha.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Layer.Blending.Matte.Alpha} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Layer.Blending.Matte.Alpha.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInverted();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool inverted = 1;
 * @return {boolean}
 */
proto.rv.data.Layer.Blending.Matte.Alpha.prototype.getInverted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.Layer.Blending.Matte.Alpha} returns this
 */
proto.rv.data.Layer.Blending.Matte.Alpha.prototype.setInverted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Layer.Blending.Matte.Luma.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Layer.Blending.Matte.Luma.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Layer.Blending.Matte.Luma} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Layer.Blending.Matte.Luma.toObject = function(includeInstance, msg) {
  var f, obj = {
inverted: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Layer.Blending.Matte.Luma}
 */
proto.rv.data.Layer.Blending.Matte.Luma.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Layer.Blending.Matte.Luma;
  return proto.rv.data.Layer.Blending.Matte.Luma.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Layer.Blending.Matte.Luma} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Layer.Blending.Matte.Luma}
 */
proto.rv.data.Layer.Blending.Matte.Luma.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInverted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Layer.Blending.Matte.Luma.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Layer.Blending.Matte.Luma.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Layer.Blending.Matte.Luma} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Layer.Blending.Matte.Luma.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInverted();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool inverted = 1;
 * @return {boolean}
 */
proto.rv.data.Layer.Blending.Matte.Luma.prototype.getInverted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.Layer.Blending.Matte.Luma} returns this
 */
proto.rv.data.Layer.Blending.Matte.Luma.prototype.setInverted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Layer.Blending.Matte.White.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Layer.Blending.Matte.White.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Layer.Blending.Matte.White} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Layer.Blending.Matte.White.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Layer.Blending.Matte.White}
 */
proto.rv.data.Layer.Blending.Matte.White.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Layer.Blending.Matte.White;
  return proto.rv.data.Layer.Blending.Matte.White.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Layer.Blending.Matte.White} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Layer.Blending.Matte.White}
 */
proto.rv.data.Layer.Blending.Matte.White.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Layer.Blending.Matte.White.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Layer.Blending.Matte.White.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Layer.Blending.Matte.White} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Layer.Blending.Matte.White.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * optional Alpha alpha = 1;
 * @return {?proto.rv.data.Layer.Blending.Matte.Alpha}
 */
proto.rv.data.Layer.Blending.Matte.prototype.getAlpha = function() {
  return /** @type{?proto.rv.data.Layer.Blending.Matte.Alpha} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Layer.Blending.Matte.Alpha, 1));
};


/**
 * @param {?proto.rv.data.Layer.Blending.Matte.Alpha|undefined} value
 * @return {!proto.rv.data.Layer.Blending.Matte} returns this
*/
proto.rv.data.Layer.Blending.Matte.prototype.setAlpha = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.rv.data.Layer.Blending.Matte.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Layer.Blending.Matte} returns this
 */
proto.rv.data.Layer.Blending.Matte.prototype.clearAlpha = function() {
  return this.setAlpha(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Layer.Blending.Matte.prototype.hasAlpha = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Luma luma = 2;
 * @return {?proto.rv.data.Layer.Blending.Matte.Luma}
 */
proto.rv.data.Layer.Blending.Matte.prototype.getLuma = function() {
  return /** @type{?proto.rv.data.Layer.Blending.Matte.Luma} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Layer.Blending.Matte.Luma, 2));
};


/**
 * @param {?proto.rv.data.Layer.Blending.Matte.Luma|undefined} value
 * @return {!proto.rv.data.Layer.Blending.Matte} returns this
*/
proto.rv.data.Layer.Blending.Matte.prototype.setLuma = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.rv.data.Layer.Blending.Matte.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Layer.Blending.Matte} returns this
 */
proto.rv.data.Layer.Blending.Matte.prototype.clearLuma = function() {
  return this.setLuma(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Layer.Blending.Matte.prototype.hasLuma = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional White white = 4;
 * @return {?proto.rv.data.Layer.Blending.Matte.White}
 */
proto.rv.data.Layer.Blending.Matte.prototype.getWhite = function() {
  return /** @type{?proto.rv.data.Layer.Blending.Matte.White} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Layer.Blending.Matte.White, 4));
};


/**
 * @param {?proto.rv.data.Layer.Blending.Matte.White|undefined} value
 * @return {!proto.rv.data.Layer.Blending.Matte} returns this
*/
proto.rv.data.Layer.Blending.Matte.prototype.setWhite = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.rv.data.Layer.Blending.Matte.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Layer.Blending.Matte} returns this
 */
proto.rv.data.Layer.Blending.Matte.prototype.clearWhite = function() {
  return this.setWhite(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Layer.Blending.Matte.prototype.hasWhite = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Standard standard = 1;
 * @return {?proto.rv.data.Layer.Blending.Standard}
 */
proto.rv.data.Layer.Blending.prototype.getStandard = function() {
  return /** @type{?proto.rv.data.Layer.Blending.Standard} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Layer.Blending.Standard, 1));
};


/**
 * @param {?proto.rv.data.Layer.Blending.Standard|undefined} value
 * @return {!proto.rv.data.Layer.Blending} returns this
*/
proto.rv.data.Layer.Blending.prototype.setStandard = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.rv.data.Layer.Blending.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Layer.Blending} returns this
 */
proto.rv.data.Layer.Blending.prototype.clearStandard = function() {
  return this.setStandard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Layer.Blending.prototype.hasStandard = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Matte matte = 2;
 * @return {?proto.rv.data.Layer.Blending.Matte}
 */
proto.rv.data.Layer.Blending.prototype.getMatte = function() {
  return /** @type{?proto.rv.data.Layer.Blending.Matte} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Layer.Blending.Matte, 2));
};


/**
 * @param {?proto.rv.data.Layer.Blending.Matte|undefined} value
 * @return {!proto.rv.data.Layer.Blending} returns this
*/
proto.rv.data.Layer.Blending.prototype.setMatte = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.rv.data.Layer.Blending.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Layer.Blending} returns this
 */
proto.rv.data.Layer.Blending.prototype.clearMatte = function() {
  return this.setMatte(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Layer.Blending.prototype.hasMatte = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional UUID uuid = 1;
 * @return {?proto.rv.data.UUID}
 */
proto.rv.data.Layer.prototype.getUuid = function() {
  return /** @type{?proto.rv.data.UUID} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.UUID, 1));
};


/**
 * @param {?proto.rv.data.UUID|undefined} value
 * @return {!proto.rv.data.Layer} returns this
*/
proto.rv.data.Layer.prototype.setUuid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Layer} returns this
 */
proto.rv.data.Layer.prototype.clearUuid = function() {
  return this.setUuid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Layer.prototype.hasUuid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.rv.data.Layer.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.Layer} returns this
 */
proto.rv.data.Layer.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Color color = 3;
 * @return {?proto.rv.data.Color}
 */
proto.rv.data.Layer.prototype.getColor = function() {
  return /** @type{?proto.rv.data.Color} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Color, 3));
};


/**
 * @param {?proto.rv.data.Color|undefined} value
 * @return {!proto.rv.data.Layer} returns this
*/
proto.rv.data.Layer.prototype.setColor = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Layer} returns this
 */
proto.rv.data.Layer.prototype.clearColor = function() {
  return this.setColor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Layer.prototype.hasColor = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool muted = 4;
 * @return {boolean}
 */
proto.rv.data.Layer.prototype.getMuted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.Layer} returns this
 */
proto.rv.data.Layer.prototype.setMuted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool hidden = 5;
 * @return {boolean}
 */
proto.rv.data.Layer.prototype.getHidden = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.Layer} returns this
 */
proto.rv.data.Layer.prototype.setHidden = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional BlendMode blend_mode = 6;
 * @return {!proto.rv.data.Layer.BlendMode}
 */
proto.rv.data.Layer.prototype.getBlendMode = function() {
  return /** @type {!proto.rv.data.Layer.BlendMode} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.rv.data.Layer.BlendMode} value
 * @return {!proto.rv.data.Layer} returns this
 */
proto.rv.data.Layer.prototype.setBlendMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional double opacity = 7;
 * @return {number}
 */
proto.rv.data.Layer.prototype.getOpacity = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.Layer} returns this
 */
proto.rv.data.Layer.prototype.setOpacity = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional UUID selected_target_set_uuid = 8;
 * @return {?proto.rv.data.UUID}
 */
proto.rv.data.Layer.prototype.getSelectedTargetSetUuid = function() {
  return /** @type{?proto.rv.data.UUID} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.UUID, 8));
};


/**
 * @param {?proto.rv.data.UUID|undefined} value
 * @return {!proto.rv.data.Layer} returns this
*/
proto.rv.data.Layer.prototype.setSelectedTargetSetUuid = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Layer} returns this
 */
proto.rv.data.Layer.prototype.clearSelectedTargetSetUuid = function() {
  return this.setSelectedTargetSetUuid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Layer.prototype.hasSelectedTargetSetUuid = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional UUID effects_preset_uuid = 9;
 * @return {?proto.rv.data.UUID}
 */
proto.rv.data.Layer.prototype.getEffectsPresetUuid = function() {
  return /** @type{?proto.rv.data.UUID} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.UUID, 9));
};


/**
 * @param {?proto.rv.data.UUID|undefined} value
 * @return {!proto.rv.data.Layer} returns this
*/
proto.rv.data.Layer.prototype.setEffectsPresetUuid = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Layer} returns this
 */
proto.rv.data.Layer.prototype.clearEffectsPresetUuid = function() {
  return this.setEffectsPresetUuid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Layer.prototype.hasEffectsPresetUuid = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional double effects_build_duration = 10;
 * @return {number}
 */
proto.rv.data.Layer.prototype.getEffectsBuildDuration = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.Layer} returns this
 */
proto.rv.data.Layer.prototype.setEffectsBuildDuration = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional UUID layer_preset_uuid = 11;
 * @return {?proto.rv.data.UUID}
 */
proto.rv.data.Layer.prototype.getLayerPresetUuid = function() {
  return /** @type{?proto.rv.data.UUID} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.UUID, 11));
};


/**
 * @param {?proto.rv.data.UUID|undefined} value
 * @return {!proto.rv.data.Layer} returns this
*/
proto.rv.data.Layer.prototype.setLayerPresetUuid = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Layer} returns this
 */
proto.rv.data.Layer.prototype.clearLayerPresetUuid = function() {
  return this.setLayerPresetUuid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Layer.prototype.hasLayerPresetUuid = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional HotKey hot_key = 12;
 * @return {?proto.rv.data.HotKey}
 */
proto.rv.data.Layer.prototype.getHotKey = function() {
  return /** @type{?proto.rv.data.HotKey} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.HotKey, 12));
};


/**
 * @param {?proto.rv.data.HotKey|undefined} value
 * @return {!proto.rv.data.Layer} returns this
*/
proto.rv.data.Layer.prototype.setHotKey = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Layer} returns this
 */
proto.rv.data.Layer.prototype.clearHotKey = function() {
  return this.setHotKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Layer.prototype.hasHotKey = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional Transition transition = 13;
 * @return {?proto.rv.data.Transition}
 */
proto.rv.data.Layer.prototype.getTransition = function() {
  return /** @type{?proto.rv.data.Transition} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Transition, 13));
};


/**
 * @param {?proto.rv.data.Transition|undefined} value
 * @return {!proto.rv.data.Layer} returns this
*/
proto.rv.data.Layer.prototype.setTransition = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Layer} returns this
 */
proto.rv.data.Layer.prototype.clearTransition = function() {
  return this.setTransition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Layer.prototype.hasTransition = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * repeated Effect effects = 14;
 * @return {!Array<!proto.rv.data.Effect>}
 */
proto.rv.data.Layer.prototype.getEffectsList = function() {
  return /** @type{!Array<!proto.rv.data.Effect>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rv.data.Effect, 14));
};


/**
 * @param {!Array<!proto.rv.data.Effect>} value
 * @return {!proto.rv.data.Layer} returns this
*/
proto.rv.data.Layer.prototype.setEffectsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 14, value);
};


/**
 * @param {!proto.rv.data.Effect=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rv.data.Effect}
 */
proto.rv.data.Layer.prototype.addEffects = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.rv.data.Effect, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.Layer} returns this
 */
proto.rv.data.Layer.prototype.clearEffectsList = function() {
  return this.setEffectsList([]);
};


/**
 * optional Blending blend = 15;
 * @return {?proto.rv.data.Layer.Blending}
 */
proto.rv.data.Layer.prototype.getBlend = function() {
  return /** @type{?proto.rv.data.Layer.Blending} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Layer.Blending, 15));
};


/**
 * @param {?proto.rv.data.Layer.Blending|undefined} value
 * @return {!proto.rv.data.Layer} returns this
*/
proto.rv.data.Layer.prototype.setBlend = function(value) {
  return jspb.Message.setWrapperField(this, 15, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Layer} returns this
 */
proto.rv.data.Layer.prototype.clearBlend = function() {
  return this.setBlend(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Layer.prototype.hasBlend = function() {
  return jspb.Message.getField(this, 15) != null;
};


