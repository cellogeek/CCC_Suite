// source: proCore.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.rv.data.TriggerCue');
goog.provide('proto.rv.data.TriggerCue.PresentationCue');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.rv.data.Cue');
goog.require('proto.rv.data.Playlist');
goog.require('proto.rv.data.Presentation');
goog.require('proto.rv.data.TriggerOptions');
goog.require('proto.rv.data.UUID');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TriggerCue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.TriggerCue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TriggerCue.displayName = 'proto.rv.data.TriggerCue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TriggerCue.PresentationCue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.TriggerCue.PresentationCue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TriggerCue.PresentationCue.displayName = 'proto.rv.data.TriggerCue.PresentationCue';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TriggerCue.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TriggerCue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TriggerCue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TriggerCue.toObject = function(includeInstance, msg) {
  var f, obj = {
triggerHandle: jspb.Message.getFieldWithDefault(msg, 1, 0),
triggerOptions: (f = msg.getTriggerOptions()) && proto.rv.data.TriggerOptions.toObject(includeInstance, f),
cue: (f = msg.getCue()) && proto.rv.data.Cue.toObject(includeInstance, f),
presentation: (f = msg.getPresentation()) && proto.rv.data.TriggerCue.PresentationCue.toObject(includeInstance, f),
playlist: (f = msg.getPlaylist()) && proto.rv.data.Playlist.toObject(includeInstance, f),
clientData: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TriggerCue}
 */
proto.rv.data.TriggerCue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TriggerCue;
  return proto.rv.data.TriggerCue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TriggerCue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TriggerCue}
 */
proto.rv.data.TriggerCue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTriggerHandle(value);
      break;
    case 2:
      var value = new proto.rv.data.TriggerOptions;
      reader.readMessage(value,proto.rv.data.TriggerOptions.deserializeBinaryFromReader);
      msg.setTriggerOptions(value);
      break;
    case 3:
      var value = new proto.rv.data.Cue;
      reader.readMessage(value,proto.rv.data.Cue.deserializeBinaryFromReader);
      msg.setCue(value);
      break;
    case 4:
      var value = new proto.rv.data.TriggerCue.PresentationCue;
      reader.readMessage(value,proto.rv.data.TriggerCue.PresentationCue.deserializeBinaryFromReader);
      msg.setPresentation(value);
      break;
    case 5:
      var value = new proto.rv.data.Playlist;
      reader.readMessage(value,proto.rv.data.Playlist.deserializeBinaryFromReader);
      msg.setPlaylist(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setClientData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TriggerCue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TriggerCue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TriggerCue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TriggerCue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTriggerHandle();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTriggerOptions();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rv.data.TriggerOptions.serializeBinaryToWriter
    );
  }
  f = message.getCue();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rv.data.Cue.serializeBinaryToWriter
    );
  }
  f = message.getPresentation();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rv.data.TriggerCue.PresentationCue.serializeBinaryToWriter
    );
  }
  f = message.getPlaylist();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.rv.data.Playlist.serializeBinaryToWriter
    );
  }
  f = message.getClientData();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TriggerCue.PresentationCue.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TriggerCue.PresentationCue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TriggerCue.PresentationCue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TriggerCue.PresentationCue.toObject = function(includeInstance, msg) {
  var f, obj = {
presentation: (f = msg.getPresentation()) && proto.rv.data.Presentation.toObject(includeInstance, f),
arrangementId: (f = msg.getArrangementId()) && proto.rv.data.UUID.toObject(includeInstance, f),
cueIndex: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TriggerCue.PresentationCue}
 */
proto.rv.data.TriggerCue.PresentationCue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TriggerCue.PresentationCue;
  return proto.rv.data.TriggerCue.PresentationCue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TriggerCue.PresentationCue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TriggerCue.PresentationCue}
 */
proto.rv.data.TriggerCue.PresentationCue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.Presentation;
      reader.readMessage(value,proto.rv.data.Presentation.deserializeBinaryFromReader);
      msg.setPresentation(value);
      break;
    case 2:
      var value = new proto.rv.data.UUID;
      reader.readMessage(value,proto.rv.data.UUID.deserializeBinaryFromReader);
      msg.setArrangementId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCueIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TriggerCue.PresentationCue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TriggerCue.PresentationCue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TriggerCue.PresentationCue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TriggerCue.PresentationCue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPresentation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.Presentation.serializeBinaryToWriter
    );
  }
  f = message.getArrangementId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rv.data.UUID.serializeBinaryToWriter
    );
  }
  f = message.getCueIndex();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional Presentation presentation = 1;
 * @return {?proto.rv.data.Presentation}
 */
proto.rv.data.TriggerCue.PresentationCue.prototype.getPresentation = function() {
  return /** @type{?proto.rv.data.Presentation} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Presentation, 1));
};


/**
 * @param {?proto.rv.data.Presentation|undefined} value
 * @return {!proto.rv.data.TriggerCue.PresentationCue} returns this
*/
proto.rv.data.TriggerCue.PresentationCue.prototype.setPresentation = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TriggerCue.PresentationCue} returns this
 */
proto.rv.data.TriggerCue.PresentationCue.prototype.clearPresentation = function() {
  return this.setPresentation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TriggerCue.PresentationCue.prototype.hasPresentation = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional UUID arrangement_id = 2;
 * @return {?proto.rv.data.UUID}
 */
proto.rv.data.TriggerCue.PresentationCue.prototype.getArrangementId = function() {
  return /** @type{?proto.rv.data.UUID} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.UUID, 2));
};


/**
 * @param {?proto.rv.data.UUID|undefined} value
 * @return {!proto.rv.data.TriggerCue.PresentationCue} returns this
*/
proto.rv.data.TriggerCue.PresentationCue.prototype.setArrangementId = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TriggerCue.PresentationCue} returns this
 */
proto.rv.data.TriggerCue.PresentationCue.prototype.clearArrangementId = function() {
  return this.setArrangementId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TriggerCue.PresentationCue.prototype.hasArrangementId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 cue_index = 3;
 * @return {number}
 */
proto.rv.data.TriggerCue.PresentationCue.prototype.getCueIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.TriggerCue.PresentationCue} returns this
 */
proto.rv.data.TriggerCue.PresentationCue.prototype.setCueIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 trigger_handle = 1;
 * @return {number}
 */
proto.rv.data.TriggerCue.prototype.getTriggerHandle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.TriggerCue} returns this
 */
proto.rv.data.TriggerCue.prototype.setTriggerHandle = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional TriggerOptions trigger_options = 2;
 * @return {?proto.rv.data.TriggerOptions}
 */
proto.rv.data.TriggerCue.prototype.getTriggerOptions = function() {
  return /** @type{?proto.rv.data.TriggerOptions} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TriggerOptions, 2));
};


/**
 * @param {?proto.rv.data.TriggerOptions|undefined} value
 * @return {!proto.rv.data.TriggerCue} returns this
*/
proto.rv.data.TriggerCue.prototype.setTriggerOptions = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TriggerCue} returns this
 */
proto.rv.data.TriggerCue.prototype.clearTriggerOptions = function() {
  return this.setTriggerOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TriggerCue.prototype.hasTriggerOptions = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Cue cue = 3;
 * @return {?proto.rv.data.Cue}
 */
proto.rv.data.TriggerCue.prototype.getCue = function() {
  return /** @type{?proto.rv.data.Cue} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Cue, 3));
};


/**
 * @param {?proto.rv.data.Cue|undefined} value
 * @return {!proto.rv.data.TriggerCue} returns this
*/
proto.rv.data.TriggerCue.prototype.setCue = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TriggerCue} returns this
 */
proto.rv.data.TriggerCue.prototype.clearCue = function() {
  return this.setCue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TriggerCue.prototype.hasCue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PresentationCue presentation = 4;
 * @return {?proto.rv.data.TriggerCue.PresentationCue}
 */
proto.rv.data.TriggerCue.prototype.getPresentation = function() {
  return /** @type{?proto.rv.data.TriggerCue.PresentationCue} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TriggerCue.PresentationCue, 4));
};


/**
 * @param {?proto.rv.data.TriggerCue.PresentationCue|undefined} value
 * @return {!proto.rv.data.TriggerCue} returns this
*/
proto.rv.data.TriggerCue.prototype.setPresentation = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TriggerCue} returns this
 */
proto.rv.data.TriggerCue.prototype.clearPresentation = function() {
  return this.setPresentation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TriggerCue.prototype.hasPresentation = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Playlist playlist = 5;
 * @return {?proto.rv.data.Playlist}
 */
proto.rv.data.TriggerCue.prototype.getPlaylist = function() {
  return /** @type{?proto.rv.data.Playlist} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Playlist, 5));
};


/**
 * @param {?proto.rv.data.Playlist|undefined} value
 * @return {!proto.rv.data.TriggerCue} returns this
*/
proto.rv.data.TriggerCue.prototype.setPlaylist = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TriggerCue} returns this
 */
proto.rv.data.TriggerCue.prototype.clearPlaylist = function() {
  return this.setPlaylist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TriggerCue.prototype.hasPlaylist = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint64 client_data = 6;
 * @return {number}
 */
proto.rv.data.TriggerCue.prototype.getClientData = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.TriggerCue} returns this
 */
proto.rv.data.TriggerCue.prototype.setClientData = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


