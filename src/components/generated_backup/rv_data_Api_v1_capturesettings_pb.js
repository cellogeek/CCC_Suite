// source: proApiV1Capture.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.rv.data.API_v1_CaptureSettings');
goog.provide('proto.rv.data.API_v1_CaptureSettings.DestinationCase');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.rv.data.API_v1_AudioRouting');
goog.require('proto.rv.data.API_v1_DiskCapture');
goog.require('proto.rv.data.API_v1_RTMPCapture');
goog.require('proto.rv.data.API_v1_ResiCapture');
goog.require('proto.rv.data.UUID');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.API_v1_CaptureSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rv.data.API_v1_CaptureSettings.repeatedFields_, proto.rv.data.API_v1_CaptureSettings.oneofGroups_);
};
goog.inherits(proto.rv.data.API_v1_CaptureSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.API_v1_CaptureSettings.displayName = 'proto.rv.data.API_v1_CaptureSettings';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rv.data.API_v1_CaptureSettings.repeatedFields_ = [2];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rv.data.API_v1_CaptureSettings.oneofGroups_ = [[3,4,5]];

/**
 * @enum {number}
 */
proto.rv.data.API_v1_CaptureSettings.DestinationCase = {
  DESTINATION_NOT_SET: 0,
  DISK: 3,
  RTMP: 4,
  RESI: 5
};

/**
 * @return {proto.rv.data.API_v1_CaptureSettings.DestinationCase}
 */
proto.rv.data.API_v1_CaptureSettings.prototype.getDestinationCase = function() {
  return /** @type {proto.rv.data.API_v1_CaptureSettings.DestinationCase} */(jspb.Message.computeOneofCase(this, proto.rv.data.API_v1_CaptureSettings.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.API_v1_CaptureSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.API_v1_CaptureSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.API_v1_CaptureSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.API_v1_CaptureSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
source: (f = msg.getSource()) && proto.rv.data.UUID.toObject(includeInstance, f),
audioRoutingList: jspb.Message.toObjectList(msg.getAudioRoutingList(),
    proto.rv.data.API_v1_AudioRouting.toObject, includeInstance),
disk: (f = msg.getDisk()) && proto.rv.data.API_v1_DiskCapture.toObject(includeInstance, f),
rtmp: (f = msg.getRtmp()) && proto.rv.data.API_v1_RTMPCapture.toObject(includeInstance, f),
resi: (f = msg.getResi()) && proto.rv.data.API_v1_ResiCapture.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.API_v1_CaptureSettings}
 */
proto.rv.data.API_v1_CaptureSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.API_v1_CaptureSettings;
  return proto.rv.data.API_v1_CaptureSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.API_v1_CaptureSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.API_v1_CaptureSettings}
 */
proto.rv.data.API_v1_CaptureSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.UUID;
      reader.readMessage(value,proto.rv.data.UUID.deserializeBinaryFromReader);
      msg.setSource(value);
      break;
    case 2:
      var value = new proto.rv.data.API_v1_AudioRouting;
      reader.readMessage(value,proto.rv.data.API_v1_AudioRouting.deserializeBinaryFromReader);
      msg.addAudioRouting(value);
      break;
    case 3:
      var value = new proto.rv.data.API_v1_DiskCapture;
      reader.readMessage(value,proto.rv.data.API_v1_DiskCapture.deserializeBinaryFromReader);
      msg.setDisk(value);
      break;
    case 4:
      var value = new proto.rv.data.API_v1_RTMPCapture;
      reader.readMessage(value,proto.rv.data.API_v1_RTMPCapture.deserializeBinaryFromReader);
      msg.setRtmp(value);
      break;
    case 5:
      var value = new proto.rv.data.API_v1_ResiCapture;
      reader.readMessage(value,proto.rv.data.API_v1_ResiCapture.deserializeBinaryFromReader);
      msg.setResi(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.API_v1_CaptureSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.API_v1_CaptureSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.API_v1_CaptureSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.API_v1_CaptureSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSource();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.UUID.serializeBinaryToWriter
    );
  }
  f = message.getAudioRoutingList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.rv.data.API_v1_AudioRouting.serializeBinaryToWriter
    );
  }
  f = message.getDisk();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rv.data.API_v1_DiskCapture.serializeBinaryToWriter
    );
  }
  f = message.getRtmp();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rv.data.API_v1_RTMPCapture.serializeBinaryToWriter
    );
  }
  f = message.getResi();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.rv.data.API_v1_ResiCapture.serializeBinaryToWriter
    );
  }
};


/**
 * optional UUID source = 1;
 * @return {?proto.rv.data.UUID}
 */
proto.rv.data.API_v1_CaptureSettings.prototype.getSource = function() {
  return /** @type{?proto.rv.data.UUID} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.UUID, 1));
};


/**
 * @param {?proto.rv.data.UUID|undefined} value
 * @return {!proto.rv.data.API_v1_CaptureSettings} returns this
*/
proto.rv.data.API_v1_CaptureSettings.prototype.setSource = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.API_v1_CaptureSettings} returns this
 */
proto.rv.data.API_v1_CaptureSettings.prototype.clearSource = function() {
  return this.setSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.API_v1_CaptureSettings.prototype.hasSource = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated API_v1_AudioRouting audio_routing = 2;
 * @return {!Array<!proto.rv.data.API_v1_AudioRouting>}
 */
proto.rv.data.API_v1_CaptureSettings.prototype.getAudioRoutingList = function() {
  return /** @type{!Array<!proto.rv.data.API_v1_AudioRouting>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rv.data.API_v1_AudioRouting, 2));
};


/**
 * @param {!Array<!proto.rv.data.API_v1_AudioRouting>} value
 * @return {!proto.rv.data.API_v1_CaptureSettings} returns this
*/
proto.rv.data.API_v1_CaptureSettings.prototype.setAudioRoutingList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.rv.data.API_v1_AudioRouting=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rv.data.API_v1_AudioRouting}
 */
proto.rv.data.API_v1_CaptureSettings.prototype.addAudioRouting = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.rv.data.API_v1_AudioRouting, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.API_v1_CaptureSettings} returns this
 */
proto.rv.data.API_v1_CaptureSettings.prototype.clearAudioRoutingList = function() {
  return this.setAudioRoutingList([]);
};


/**
 * optional API_v1_DiskCapture disk = 3;
 * @return {?proto.rv.data.API_v1_DiskCapture}
 */
proto.rv.data.API_v1_CaptureSettings.prototype.getDisk = function() {
  return /** @type{?proto.rv.data.API_v1_DiskCapture} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.API_v1_DiskCapture, 3));
};


/**
 * @param {?proto.rv.data.API_v1_DiskCapture|undefined} value
 * @return {!proto.rv.data.API_v1_CaptureSettings} returns this
*/
proto.rv.data.API_v1_CaptureSettings.prototype.setDisk = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.rv.data.API_v1_CaptureSettings.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.API_v1_CaptureSettings} returns this
 */
proto.rv.data.API_v1_CaptureSettings.prototype.clearDisk = function() {
  return this.setDisk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.API_v1_CaptureSettings.prototype.hasDisk = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional API_v1_RTMPCapture rtmp = 4;
 * @return {?proto.rv.data.API_v1_RTMPCapture}
 */
proto.rv.data.API_v1_CaptureSettings.prototype.getRtmp = function() {
  return /** @type{?proto.rv.data.API_v1_RTMPCapture} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.API_v1_RTMPCapture, 4));
};


/**
 * @param {?proto.rv.data.API_v1_RTMPCapture|undefined} value
 * @return {!proto.rv.data.API_v1_CaptureSettings} returns this
*/
proto.rv.data.API_v1_CaptureSettings.prototype.setRtmp = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.rv.data.API_v1_CaptureSettings.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.API_v1_CaptureSettings} returns this
 */
proto.rv.data.API_v1_CaptureSettings.prototype.clearRtmp = function() {
  return this.setRtmp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.API_v1_CaptureSettings.prototype.hasRtmp = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional API_v1_ResiCapture resi = 5;
 * @return {?proto.rv.data.API_v1_ResiCapture}
 */
proto.rv.data.API_v1_CaptureSettings.prototype.getResi = function() {
  return /** @type{?proto.rv.data.API_v1_ResiCapture} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.API_v1_ResiCapture, 5));
};


/**
 * @param {?proto.rv.data.API_v1_ResiCapture|undefined} value
 * @return {!proto.rv.data.API_v1_CaptureSettings} returns this
*/
proto.rv.data.API_v1_CaptureSettings.prototype.setResi = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.rv.data.API_v1_CaptureSettings.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.API_v1_CaptureSettings} returns this
 */
proto.rv.data.API_v1_CaptureSettings.prototype.clearResi = function() {
  return this.setResi(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.API_v1_CaptureSettings.prototype.hasResi = function() {
  return jspb.Message.getField(this, 5) != null;
};


