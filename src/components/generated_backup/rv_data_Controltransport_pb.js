// source: proCore.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.rv.data.ControlTransport');
goog.provide('proto.rv.data.ControlTransport.BeginScrubControlType');
goog.provide('proto.rv.data.ControlTransport.ControltypeCase');
goog.provide('proto.rv.data.ControlTransport.EndScrubControlType');
goog.provide('proto.rv.data.ControlTransport.FastForwardControlType');
goog.provide('proto.rv.data.ControlTransport.GoToEndControlType');
goog.provide('proto.rv.data.ControlTransport.GoToStartControlType');
goog.provide('proto.rv.data.ControlTransport.JumpToPercentControlType');
goog.provide('proto.rv.data.ControlTransport.JumpToTimeControlType');
goog.provide('proto.rv.data.ControlTransport.MarkInPointControlType');
goog.provide('proto.rv.data.ControlTransport.MarkOutPointControlType');
goog.provide('proto.rv.data.ControlTransport.PauseControlType');
goog.provide('proto.rv.data.ControlTransport.PlayControlType');
goog.provide('proto.rv.data.ControlTransport.RewindControlType');
goog.provide('proto.rv.data.ControlTransport.ScrubToPercentControlType');
goog.provide('proto.rv.data.ControlTransport.ScrubToTimeControlType');
goog.provide('proto.rv.data.ControlTransport.SetAlphaTypeControlType');
goog.provide('proto.rv.data.ControlTransport.SetAudioFadeType');
goog.provide('proto.rv.data.ControlTransport.SetAudioPropertiesType');
goog.provide('proto.rv.data.ControlTransport.SetEffectsControlType');
goog.provide('proto.rv.data.ControlTransport.SetFlippedModeControlType');
goog.provide('proto.rv.data.ControlTransport.SetNativeRotationControlType');
goog.provide('proto.rv.data.ControlTransport.SetPlayRateControlType');
goog.provide('proto.rv.data.ControlTransport.SetScaleModeControlType');
goog.provide('proto.rv.data.ControlTransport.SkipBackControlType');
goog.provide('proto.rv.data.ControlTransport.SkipForwardControlType');
goog.provide('proto.rv.data.ControlTransport.StepBackControlType');
goog.provide('proto.rv.data.ControlTransport.StepForwardControlType');
goog.provide('proto.rv.data.ControlTransport.TogglePlaybackControlType');
goog.provide('proto.rv.data.ControlTransport.UpdateEffectControlType');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.rv.data.Effect');
goog.require('proto.rv.data.Media.AudioProperties');

goog.forwardDeclare('proto.rv.data.AlphaType');
goog.forwardDeclare('proto.rv.data.Media.DrawingProperties.NativeRotationType');
goog.forwardDeclare('proto.rv.data.Media.ScaleAlignment');
goog.forwardDeclare('proto.rv.data.Media.ScaleBehavior');
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ControlTransport = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rv.data.ControlTransport.oneofGroups_);
};
goog.inherits(proto.rv.data.ControlTransport, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ControlTransport.displayName = 'proto.rv.data.ControlTransport';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ControlTransport.PlayControlType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ControlTransport.PlayControlType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ControlTransport.PlayControlType.displayName = 'proto.rv.data.ControlTransport.PlayControlType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ControlTransport.PauseControlType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ControlTransport.PauseControlType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ControlTransport.PauseControlType.displayName = 'proto.rv.data.ControlTransport.PauseControlType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ControlTransport.RewindControlType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ControlTransport.RewindControlType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ControlTransport.RewindControlType.displayName = 'proto.rv.data.ControlTransport.RewindControlType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ControlTransport.FastForwardControlType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ControlTransport.FastForwardControlType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ControlTransport.FastForwardControlType.displayName = 'proto.rv.data.ControlTransport.FastForwardControlType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ControlTransport.SkipBackControlType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ControlTransport.SkipBackControlType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ControlTransport.SkipBackControlType.displayName = 'proto.rv.data.ControlTransport.SkipBackControlType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ControlTransport.SkipForwardControlType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ControlTransport.SkipForwardControlType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ControlTransport.SkipForwardControlType.displayName = 'proto.rv.data.ControlTransport.SkipForwardControlType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ControlTransport.StepBackControlType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ControlTransport.StepBackControlType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ControlTransport.StepBackControlType.displayName = 'proto.rv.data.ControlTransport.StepBackControlType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ControlTransport.StepForwardControlType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ControlTransport.StepForwardControlType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ControlTransport.StepForwardControlType.displayName = 'proto.rv.data.ControlTransport.StepForwardControlType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ControlTransport.GoToStartControlType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ControlTransport.GoToStartControlType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ControlTransport.GoToStartControlType.displayName = 'proto.rv.data.ControlTransport.GoToStartControlType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ControlTransport.GoToEndControlType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ControlTransport.GoToEndControlType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ControlTransport.GoToEndControlType.displayName = 'proto.rv.data.ControlTransport.GoToEndControlType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ControlTransport.JumpToTimeControlType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ControlTransport.JumpToTimeControlType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ControlTransport.JumpToTimeControlType.displayName = 'proto.rv.data.ControlTransport.JumpToTimeControlType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ControlTransport.JumpToPercentControlType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ControlTransport.JumpToPercentControlType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ControlTransport.JumpToPercentControlType.displayName = 'proto.rv.data.ControlTransport.JumpToPercentControlType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ControlTransport.MarkInPointControlType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ControlTransport.MarkInPointControlType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ControlTransport.MarkInPointControlType.displayName = 'proto.rv.data.ControlTransport.MarkInPointControlType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ControlTransport.MarkOutPointControlType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ControlTransport.MarkOutPointControlType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ControlTransport.MarkOutPointControlType.displayName = 'proto.rv.data.ControlTransport.MarkOutPointControlType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ControlTransport.SetScaleModeControlType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ControlTransport.SetScaleModeControlType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ControlTransport.SetScaleModeControlType.displayName = 'proto.rv.data.ControlTransport.SetScaleModeControlType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ControlTransport.SetFlippedModeControlType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ControlTransport.SetFlippedModeControlType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ControlTransport.SetFlippedModeControlType.displayName = 'proto.rv.data.ControlTransport.SetFlippedModeControlType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ControlTransport.SetPlayRateControlType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ControlTransport.SetPlayRateControlType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ControlTransport.SetPlayRateControlType.displayName = 'proto.rv.data.ControlTransport.SetPlayRateControlType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ControlTransport.SetNativeRotationControlType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ControlTransport.SetNativeRotationControlType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ControlTransport.SetNativeRotationControlType.displayName = 'proto.rv.data.ControlTransport.SetNativeRotationControlType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ControlTransport.SetAlphaTypeControlType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ControlTransport.SetAlphaTypeControlType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ControlTransport.SetAlphaTypeControlType.displayName = 'proto.rv.data.ControlTransport.SetAlphaTypeControlType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ControlTransport.TogglePlaybackControlType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ControlTransport.TogglePlaybackControlType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ControlTransport.TogglePlaybackControlType.displayName = 'proto.rv.data.ControlTransport.TogglePlaybackControlType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ControlTransport.SetEffectsControlType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rv.data.ControlTransport.SetEffectsControlType.repeatedFields_, null);
};
goog.inherits(proto.rv.data.ControlTransport.SetEffectsControlType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ControlTransport.SetEffectsControlType.displayName = 'proto.rv.data.ControlTransport.SetEffectsControlType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ControlTransport.UpdateEffectControlType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ControlTransport.UpdateEffectControlType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ControlTransport.UpdateEffectControlType.displayName = 'proto.rv.data.ControlTransport.UpdateEffectControlType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ControlTransport.BeginScrubControlType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ControlTransport.BeginScrubControlType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ControlTransport.BeginScrubControlType.displayName = 'proto.rv.data.ControlTransport.BeginScrubControlType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ControlTransport.EndScrubControlType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ControlTransport.EndScrubControlType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ControlTransport.EndScrubControlType.displayName = 'proto.rv.data.ControlTransport.EndScrubControlType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ControlTransport.ScrubToTimeControlType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ControlTransport.ScrubToTimeControlType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ControlTransport.ScrubToTimeControlType.displayName = 'proto.rv.data.ControlTransport.ScrubToTimeControlType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ControlTransport.ScrubToPercentControlType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ControlTransport.ScrubToPercentControlType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ControlTransport.ScrubToPercentControlType.displayName = 'proto.rv.data.ControlTransport.ScrubToPercentControlType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ControlTransport.SetAudioFadeType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ControlTransport.SetAudioFadeType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ControlTransport.SetAudioFadeType.displayName = 'proto.rv.data.ControlTransport.SetAudioFadeType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ControlTransport.SetAudioPropertiesType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rv.data.ControlTransport.SetAudioPropertiesType.repeatedFields_, null);
};
goog.inherits(proto.rv.data.ControlTransport.SetAudioPropertiesType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ControlTransport.SetAudioPropertiesType.displayName = 'proto.rv.data.ControlTransport.SetAudioPropertiesType';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rv.data.ControlTransport.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]];

/**
 * @enum {number}
 */
proto.rv.data.ControlTransport.ControltypeCase = {
  CONTROLTYPE_NOT_SET: 0,
  PLAY: 1,
  PAUSE: 2,
  REWIND: 3,
  FASTFORWARD: 4,
  SKIP_BACK: 5,
  SKIP_FORWARD: 6,
  STEP_BACK: 7,
  STEP_FORWARD: 8,
  GO_TO_START: 9,
  GO_TO_END: 10,
  JUMP_TO_TIME: 11,
  JUMP_TO_PERCENT: 12,
  MARK_IN: 13,
  MARK_OUT: 14,
  SET_SCALE_MODE: 15,
  SET_FLIPPED_MODE: 16,
  SET_PLAY_RATE: 17,
  SET_ROTATION: 18,
  TOGGLE_PLAYBACK: 19,
  SET_EFFECTS: 20,
  UPDATE_EFFECT: 21,
  BEGIN_SCRUB: 22,
  END_SCRUB: 23,
  SCRUB_TO_TIME: 24,
  SCRUB_TO_PERCENT: 25,
  SET_AUDIO_FADE: 26,
  SET_AUDIO_PROPERTIES: 27,
  SET_ALPHA_TYPE: 28
};

/**
 * @return {proto.rv.data.ControlTransport.ControltypeCase}
 */
proto.rv.data.ControlTransport.prototype.getControltypeCase = function() {
  return /** @type {proto.rv.data.ControlTransport.ControltypeCase} */(jspb.Message.computeOneofCase(this, proto.rv.data.ControlTransport.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ControlTransport.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ControlTransport.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ControlTransport} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.toObject = function(includeInstance, msg) {
  var f, obj = {
play: (f = msg.getPlay()) && proto.rv.data.ControlTransport.PlayControlType.toObject(includeInstance, f),
pause: (f = msg.getPause()) && proto.rv.data.ControlTransport.PauseControlType.toObject(includeInstance, f),
rewind: (f = msg.getRewind()) && proto.rv.data.ControlTransport.RewindControlType.toObject(includeInstance, f),
fastforward: (f = msg.getFastforward()) && proto.rv.data.ControlTransport.FastForwardControlType.toObject(includeInstance, f),
skipBack: (f = msg.getSkipBack()) && proto.rv.data.ControlTransport.SkipBackControlType.toObject(includeInstance, f),
skipForward: (f = msg.getSkipForward()) && proto.rv.data.ControlTransport.SkipForwardControlType.toObject(includeInstance, f),
stepBack: (f = msg.getStepBack()) && proto.rv.data.ControlTransport.StepBackControlType.toObject(includeInstance, f),
stepForward: (f = msg.getStepForward()) && proto.rv.data.ControlTransport.StepForwardControlType.toObject(includeInstance, f),
goToStart: (f = msg.getGoToStart()) && proto.rv.data.ControlTransport.GoToStartControlType.toObject(includeInstance, f),
goToEnd: (f = msg.getGoToEnd()) && proto.rv.data.ControlTransport.GoToEndControlType.toObject(includeInstance, f),
jumpToTime: (f = msg.getJumpToTime()) && proto.rv.data.ControlTransport.JumpToTimeControlType.toObject(includeInstance, f),
jumpToPercent: (f = msg.getJumpToPercent()) && proto.rv.data.ControlTransport.JumpToPercentControlType.toObject(includeInstance, f),
markIn: (f = msg.getMarkIn()) && proto.rv.data.ControlTransport.MarkInPointControlType.toObject(includeInstance, f),
markOut: (f = msg.getMarkOut()) && proto.rv.data.ControlTransport.MarkOutPointControlType.toObject(includeInstance, f),
setScaleMode: (f = msg.getSetScaleMode()) && proto.rv.data.ControlTransport.SetScaleModeControlType.toObject(includeInstance, f),
setFlippedMode: (f = msg.getSetFlippedMode()) && proto.rv.data.ControlTransport.SetFlippedModeControlType.toObject(includeInstance, f),
setPlayRate: (f = msg.getSetPlayRate()) && proto.rv.data.ControlTransport.SetPlayRateControlType.toObject(includeInstance, f),
setRotation: (f = msg.getSetRotation()) && proto.rv.data.ControlTransport.SetNativeRotationControlType.toObject(includeInstance, f),
togglePlayback: (f = msg.getTogglePlayback()) && proto.rv.data.ControlTransport.TogglePlaybackControlType.toObject(includeInstance, f),
setEffects: (f = msg.getSetEffects()) && proto.rv.data.ControlTransport.SetEffectsControlType.toObject(includeInstance, f),
updateEffect: (f = msg.getUpdateEffect()) && proto.rv.data.ControlTransport.UpdateEffectControlType.toObject(includeInstance, f),
beginScrub: (f = msg.getBeginScrub()) && proto.rv.data.ControlTransport.BeginScrubControlType.toObject(includeInstance, f),
endScrub: (f = msg.getEndScrub()) && proto.rv.data.ControlTransport.EndScrubControlType.toObject(includeInstance, f),
scrubToTime: (f = msg.getScrubToTime()) && proto.rv.data.ControlTransport.ScrubToTimeControlType.toObject(includeInstance, f),
scrubToPercent: (f = msg.getScrubToPercent()) && proto.rv.data.ControlTransport.ScrubToPercentControlType.toObject(includeInstance, f),
setAudioFade: (f = msg.getSetAudioFade()) && proto.rv.data.ControlTransport.SetAudioFadeType.toObject(includeInstance, f),
setAudioProperties: (f = msg.getSetAudioProperties()) && proto.rv.data.ControlTransport.SetAudioPropertiesType.toObject(includeInstance, f),
setAlphaType: (f = msg.getSetAlphaType()) && proto.rv.data.ControlTransport.SetAlphaTypeControlType.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ControlTransport}
 */
proto.rv.data.ControlTransport.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ControlTransport;
  return proto.rv.data.ControlTransport.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ControlTransport} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ControlTransport}
 */
proto.rv.data.ControlTransport.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.ControlTransport.PlayControlType;
      reader.readMessage(value,proto.rv.data.ControlTransport.PlayControlType.deserializeBinaryFromReader);
      msg.setPlay(value);
      break;
    case 2:
      var value = new proto.rv.data.ControlTransport.PauseControlType;
      reader.readMessage(value,proto.rv.data.ControlTransport.PauseControlType.deserializeBinaryFromReader);
      msg.setPause(value);
      break;
    case 3:
      var value = new proto.rv.data.ControlTransport.RewindControlType;
      reader.readMessage(value,proto.rv.data.ControlTransport.RewindControlType.deserializeBinaryFromReader);
      msg.setRewind(value);
      break;
    case 4:
      var value = new proto.rv.data.ControlTransport.FastForwardControlType;
      reader.readMessage(value,proto.rv.data.ControlTransport.FastForwardControlType.deserializeBinaryFromReader);
      msg.setFastforward(value);
      break;
    case 5:
      var value = new proto.rv.data.ControlTransport.SkipBackControlType;
      reader.readMessage(value,proto.rv.data.ControlTransport.SkipBackControlType.deserializeBinaryFromReader);
      msg.setSkipBack(value);
      break;
    case 6:
      var value = new proto.rv.data.ControlTransport.SkipForwardControlType;
      reader.readMessage(value,proto.rv.data.ControlTransport.SkipForwardControlType.deserializeBinaryFromReader);
      msg.setSkipForward(value);
      break;
    case 7:
      var value = new proto.rv.data.ControlTransport.StepBackControlType;
      reader.readMessage(value,proto.rv.data.ControlTransport.StepBackControlType.deserializeBinaryFromReader);
      msg.setStepBack(value);
      break;
    case 8:
      var value = new proto.rv.data.ControlTransport.StepForwardControlType;
      reader.readMessage(value,proto.rv.data.ControlTransport.StepForwardControlType.deserializeBinaryFromReader);
      msg.setStepForward(value);
      break;
    case 9:
      var value = new proto.rv.data.ControlTransport.GoToStartControlType;
      reader.readMessage(value,proto.rv.data.ControlTransport.GoToStartControlType.deserializeBinaryFromReader);
      msg.setGoToStart(value);
      break;
    case 10:
      var value = new proto.rv.data.ControlTransport.GoToEndControlType;
      reader.readMessage(value,proto.rv.data.ControlTransport.GoToEndControlType.deserializeBinaryFromReader);
      msg.setGoToEnd(value);
      break;
    case 11:
      var value = new proto.rv.data.ControlTransport.JumpToTimeControlType;
      reader.readMessage(value,proto.rv.data.ControlTransport.JumpToTimeControlType.deserializeBinaryFromReader);
      msg.setJumpToTime(value);
      break;
    case 12:
      var value = new proto.rv.data.ControlTransport.JumpToPercentControlType;
      reader.readMessage(value,proto.rv.data.ControlTransport.JumpToPercentControlType.deserializeBinaryFromReader);
      msg.setJumpToPercent(value);
      break;
    case 13:
      var value = new proto.rv.data.ControlTransport.MarkInPointControlType;
      reader.readMessage(value,proto.rv.data.ControlTransport.MarkInPointControlType.deserializeBinaryFromReader);
      msg.setMarkIn(value);
      break;
    case 14:
      var value = new proto.rv.data.ControlTransport.MarkOutPointControlType;
      reader.readMessage(value,proto.rv.data.ControlTransport.MarkOutPointControlType.deserializeBinaryFromReader);
      msg.setMarkOut(value);
      break;
    case 15:
      var value = new proto.rv.data.ControlTransport.SetScaleModeControlType;
      reader.readMessage(value,proto.rv.data.ControlTransport.SetScaleModeControlType.deserializeBinaryFromReader);
      msg.setSetScaleMode(value);
      break;
    case 16:
      var value = new proto.rv.data.ControlTransport.SetFlippedModeControlType;
      reader.readMessage(value,proto.rv.data.ControlTransport.SetFlippedModeControlType.deserializeBinaryFromReader);
      msg.setSetFlippedMode(value);
      break;
    case 17:
      var value = new proto.rv.data.ControlTransport.SetPlayRateControlType;
      reader.readMessage(value,proto.rv.data.ControlTransport.SetPlayRateControlType.deserializeBinaryFromReader);
      msg.setSetPlayRate(value);
      break;
    case 18:
      var value = new proto.rv.data.ControlTransport.SetNativeRotationControlType;
      reader.readMessage(value,proto.rv.data.ControlTransport.SetNativeRotationControlType.deserializeBinaryFromReader);
      msg.setSetRotation(value);
      break;
    case 19:
      var value = new proto.rv.data.ControlTransport.TogglePlaybackControlType;
      reader.readMessage(value,proto.rv.data.ControlTransport.TogglePlaybackControlType.deserializeBinaryFromReader);
      msg.setTogglePlayback(value);
      break;
    case 20:
      var value = new proto.rv.data.ControlTransport.SetEffectsControlType;
      reader.readMessage(value,proto.rv.data.ControlTransport.SetEffectsControlType.deserializeBinaryFromReader);
      msg.setSetEffects(value);
      break;
    case 21:
      var value = new proto.rv.data.ControlTransport.UpdateEffectControlType;
      reader.readMessage(value,proto.rv.data.ControlTransport.UpdateEffectControlType.deserializeBinaryFromReader);
      msg.setUpdateEffect(value);
      break;
    case 22:
      var value = new proto.rv.data.ControlTransport.BeginScrubControlType;
      reader.readMessage(value,proto.rv.data.ControlTransport.BeginScrubControlType.deserializeBinaryFromReader);
      msg.setBeginScrub(value);
      break;
    case 23:
      var value = new proto.rv.data.ControlTransport.EndScrubControlType;
      reader.readMessage(value,proto.rv.data.ControlTransport.EndScrubControlType.deserializeBinaryFromReader);
      msg.setEndScrub(value);
      break;
    case 24:
      var value = new proto.rv.data.ControlTransport.ScrubToTimeControlType;
      reader.readMessage(value,proto.rv.data.ControlTransport.ScrubToTimeControlType.deserializeBinaryFromReader);
      msg.setScrubToTime(value);
      break;
    case 25:
      var value = new proto.rv.data.ControlTransport.ScrubToPercentControlType;
      reader.readMessage(value,proto.rv.data.ControlTransport.ScrubToPercentControlType.deserializeBinaryFromReader);
      msg.setScrubToPercent(value);
      break;
    case 26:
      var value = new proto.rv.data.ControlTransport.SetAudioFadeType;
      reader.readMessage(value,proto.rv.data.ControlTransport.SetAudioFadeType.deserializeBinaryFromReader);
      msg.setSetAudioFade(value);
      break;
    case 27:
      var value = new proto.rv.data.ControlTransport.SetAudioPropertiesType;
      reader.readMessage(value,proto.rv.data.ControlTransport.SetAudioPropertiesType.deserializeBinaryFromReader);
      msg.setSetAudioProperties(value);
      break;
    case 28:
      var value = new proto.rv.data.ControlTransport.SetAlphaTypeControlType;
      reader.readMessage(value,proto.rv.data.ControlTransport.SetAlphaTypeControlType.deserializeBinaryFromReader);
      msg.setSetAlphaType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ControlTransport.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ControlTransport.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ControlTransport} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlay();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.ControlTransport.PlayControlType.serializeBinaryToWriter
    );
  }
  f = message.getPause();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rv.data.ControlTransport.PauseControlType.serializeBinaryToWriter
    );
  }
  f = message.getRewind();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rv.data.ControlTransport.RewindControlType.serializeBinaryToWriter
    );
  }
  f = message.getFastforward();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rv.data.ControlTransport.FastForwardControlType.serializeBinaryToWriter
    );
  }
  f = message.getSkipBack();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.rv.data.ControlTransport.SkipBackControlType.serializeBinaryToWriter
    );
  }
  f = message.getSkipForward();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.rv.data.ControlTransport.SkipForwardControlType.serializeBinaryToWriter
    );
  }
  f = message.getStepBack();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.rv.data.ControlTransport.StepBackControlType.serializeBinaryToWriter
    );
  }
  f = message.getStepForward();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.rv.data.ControlTransport.StepForwardControlType.serializeBinaryToWriter
    );
  }
  f = message.getGoToStart();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.rv.data.ControlTransport.GoToStartControlType.serializeBinaryToWriter
    );
  }
  f = message.getGoToEnd();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.rv.data.ControlTransport.GoToEndControlType.serializeBinaryToWriter
    );
  }
  f = message.getJumpToTime();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.rv.data.ControlTransport.JumpToTimeControlType.serializeBinaryToWriter
    );
  }
  f = message.getJumpToPercent();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.rv.data.ControlTransport.JumpToPercentControlType.serializeBinaryToWriter
    );
  }
  f = message.getMarkIn();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.rv.data.ControlTransport.MarkInPointControlType.serializeBinaryToWriter
    );
  }
  f = message.getMarkOut();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.rv.data.ControlTransport.MarkOutPointControlType.serializeBinaryToWriter
    );
  }
  f = message.getSetScaleMode();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.rv.data.ControlTransport.SetScaleModeControlType.serializeBinaryToWriter
    );
  }
  f = message.getSetFlippedMode();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.rv.data.ControlTransport.SetFlippedModeControlType.serializeBinaryToWriter
    );
  }
  f = message.getSetPlayRate();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.rv.data.ControlTransport.SetPlayRateControlType.serializeBinaryToWriter
    );
  }
  f = message.getSetRotation();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.rv.data.ControlTransport.SetNativeRotationControlType.serializeBinaryToWriter
    );
  }
  f = message.getTogglePlayback();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.rv.data.ControlTransport.TogglePlaybackControlType.serializeBinaryToWriter
    );
  }
  f = message.getSetEffects();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.rv.data.ControlTransport.SetEffectsControlType.serializeBinaryToWriter
    );
  }
  f = message.getUpdateEffect();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.rv.data.ControlTransport.UpdateEffectControlType.serializeBinaryToWriter
    );
  }
  f = message.getBeginScrub();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.rv.data.ControlTransport.BeginScrubControlType.serializeBinaryToWriter
    );
  }
  f = message.getEndScrub();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      proto.rv.data.ControlTransport.EndScrubControlType.serializeBinaryToWriter
    );
  }
  f = message.getScrubToTime();
  if (f != null) {
    writer.writeMessage(
      24,
      f,
      proto.rv.data.ControlTransport.ScrubToTimeControlType.serializeBinaryToWriter
    );
  }
  f = message.getScrubToPercent();
  if (f != null) {
    writer.writeMessage(
      25,
      f,
      proto.rv.data.ControlTransport.ScrubToPercentControlType.serializeBinaryToWriter
    );
  }
  f = message.getSetAudioFade();
  if (f != null) {
    writer.writeMessage(
      26,
      f,
      proto.rv.data.ControlTransport.SetAudioFadeType.serializeBinaryToWriter
    );
  }
  f = message.getSetAudioProperties();
  if (f != null) {
    writer.writeMessage(
      27,
      f,
      proto.rv.data.ControlTransport.SetAudioPropertiesType.serializeBinaryToWriter
    );
  }
  f = message.getSetAlphaType();
  if (f != null) {
    writer.writeMessage(
      28,
      f,
      proto.rv.data.ControlTransport.SetAlphaTypeControlType.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ControlTransport.PlayControlType.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ControlTransport.PlayControlType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ControlTransport.PlayControlType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.PlayControlType.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ControlTransport.PlayControlType}
 */
proto.rv.data.ControlTransport.PlayControlType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ControlTransport.PlayControlType;
  return proto.rv.data.ControlTransport.PlayControlType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ControlTransport.PlayControlType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ControlTransport.PlayControlType}
 */
proto.rv.data.ControlTransport.PlayControlType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ControlTransport.PlayControlType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ControlTransport.PlayControlType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ControlTransport.PlayControlType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.PlayControlType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ControlTransport.PauseControlType.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ControlTransport.PauseControlType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ControlTransport.PauseControlType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.PauseControlType.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ControlTransport.PauseControlType}
 */
proto.rv.data.ControlTransport.PauseControlType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ControlTransport.PauseControlType;
  return proto.rv.data.ControlTransport.PauseControlType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ControlTransport.PauseControlType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ControlTransport.PauseControlType}
 */
proto.rv.data.ControlTransport.PauseControlType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ControlTransport.PauseControlType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ControlTransport.PauseControlType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ControlTransport.PauseControlType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.PauseControlType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ControlTransport.RewindControlType.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ControlTransport.RewindControlType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ControlTransport.RewindControlType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.RewindControlType.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ControlTransport.RewindControlType}
 */
proto.rv.data.ControlTransport.RewindControlType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ControlTransport.RewindControlType;
  return proto.rv.data.ControlTransport.RewindControlType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ControlTransport.RewindControlType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ControlTransport.RewindControlType}
 */
proto.rv.data.ControlTransport.RewindControlType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ControlTransport.RewindControlType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ControlTransport.RewindControlType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ControlTransport.RewindControlType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.RewindControlType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ControlTransport.FastForwardControlType.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ControlTransport.FastForwardControlType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ControlTransport.FastForwardControlType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.FastForwardControlType.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ControlTransport.FastForwardControlType}
 */
proto.rv.data.ControlTransport.FastForwardControlType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ControlTransport.FastForwardControlType;
  return proto.rv.data.ControlTransport.FastForwardControlType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ControlTransport.FastForwardControlType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ControlTransport.FastForwardControlType}
 */
proto.rv.data.ControlTransport.FastForwardControlType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ControlTransport.FastForwardControlType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ControlTransport.FastForwardControlType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ControlTransport.FastForwardControlType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.FastForwardControlType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ControlTransport.SkipBackControlType.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ControlTransport.SkipBackControlType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ControlTransport.SkipBackControlType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.SkipBackControlType.toObject = function(includeInstance, msg) {
  var f, obj = {
offset: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ControlTransport.SkipBackControlType}
 */
proto.rv.data.ControlTransport.SkipBackControlType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ControlTransport.SkipBackControlType;
  return proto.rv.data.ControlTransport.SkipBackControlType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ControlTransport.SkipBackControlType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ControlTransport.SkipBackControlType}
 */
proto.rv.data.ControlTransport.SkipBackControlType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ControlTransport.SkipBackControlType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ControlTransport.SkipBackControlType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ControlTransport.SkipBackControlType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.SkipBackControlType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOffset();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
};


/**
 * optional double offset = 1;
 * @return {number}
 */
proto.rv.data.ControlTransport.SkipBackControlType.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.ControlTransport.SkipBackControlType} returns this
 */
proto.rv.data.ControlTransport.SkipBackControlType.prototype.setOffset = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ControlTransport.SkipForwardControlType.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ControlTransport.SkipForwardControlType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ControlTransport.SkipForwardControlType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.SkipForwardControlType.toObject = function(includeInstance, msg) {
  var f, obj = {
offset: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ControlTransport.SkipForwardControlType}
 */
proto.rv.data.ControlTransport.SkipForwardControlType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ControlTransport.SkipForwardControlType;
  return proto.rv.data.ControlTransport.SkipForwardControlType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ControlTransport.SkipForwardControlType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ControlTransport.SkipForwardControlType}
 */
proto.rv.data.ControlTransport.SkipForwardControlType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ControlTransport.SkipForwardControlType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ControlTransport.SkipForwardControlType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ControlTransport.SkipForwardControlType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.SkipForwardControlType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOffset();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
};


/**
 * optional double offset = 1;
 * @return {number}
 */
proto.rv.data.ControlTransport.SkipForwardControlType.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.ControlTransport.SkipForwardControlType} returns this
 */
proto.rv.data.ControlTransport.SkipForwardControlType.prototype.setOffset = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ControlTransport.StepBackControlType.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ControlTransport.StepBackControlType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ControlTransport.StepBackControlType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.StepBackControlType.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ControlTransport.StepBackControlType}
 */
proto.rv.data.ControlTransport.StepBackControlType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ControlTransport.StepBackControlType;
  return proto.rv.data.ControlTransport.StepBackControlType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ControlTransport.StepBackControlType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ControlTransport.StepBackControlType}
 */
proto.rv.data.ControlTransport.StepBackControlType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ControlTransport.StepBackControlType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ControlTransport.StepBackControlType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ControlTransport.StepBackControlType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.StepBackControlType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ControlTransport.StepForwardControlType.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ControlTransport.StepForwardControlType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ControlTransport.StepForwardControlType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.StepForwardControlType.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ControlTransport.StepForwardControlType}
 */
proto.rv.data.ControlTransport.StepForwardControlType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ControlTransport.StepForwardControlType;
  return proto.rv.data.ControlTransport.StepForwardControlType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ControlTransport.StepForwardControlType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ControlTransport.StepForwardControlType}
 */
proto.rv.data.ControlTransport.StepForwardControlType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ControlTransport.StepForwardControlType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ControlTransport.StepForwardControlType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ControlTransport.StepForwardControlType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.StepForwardControlType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ControlTransport.GoToStartControlType.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ControlTransport.GoToStartControlType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ControlTransport.GoToStartControlType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.GoToStartControlType.toObject = function(includeInstance, msg) {
  var f, obj = {
offset: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ControlTransport.GoToStartControlType}
 */
proto.rv.data.ControlTransport.GoToStartControlType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ControlTransport.GoToStartControlType;
  return proto.rv.data.ControlTransport.GoToStartControlType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ControlTransport.GoToStartControlType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ControlTransport.GoToStartControlType}
 */
proto.rv.data.ControlTransport.GoToStartControlType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ControlTransport.GoToStartControlType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ControlTransport.GoToStartControlType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ControlTransport.GoToStartControlType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.GoToStartControlType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOffset();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
};


/**
 * optional double offset = 1;
 * @return {number}
 */
proto.rv.data.ControlTransport.GoToStartControlType.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.ControlTransport.GoToStartControlType} returns this
 */
proto.rv.data.ControlTransport.GoToStartControlType.prototype.setOffset = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ControlTransport.GoToEndControlType.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ControlTransport.GoToEndControlType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ControlTransport.GoToEndControlType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.GoToEndControlType.toObject = function(includeInstance, msg) {
  var f, obj = {
offset: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ControlTransport.GoToEndControlType}
 */
proto.rv.data.ControlTransport.GoToEndControlType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ControlTransport.GoToEndControlType;
  return proto.rv.data.ControlTransport.GoToEndControlType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ControlTransport.GoToEndControlType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ControlTransport.GoToEndControlType}
 */
proto.rv.data.ControlTransport.GoToEndControlType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ControlTransport.GoToEndControlType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ControlTransport.GoToEndControlType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ControlTransport.GoToEndControlType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.GoToEndControlType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOffset();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
};


/**
 * optional double offset = 1;
 * @return {number}
 */
proto.rv.data.ControlTransport.GoToEndControlType.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.ControlTransport.GoToEndControlType} returns this
 */
proto.rv.data.ControlTransport.GoToEndControlType.prototype.setOffset = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ControlTransport.JumpToTimeControlType.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ControlTransport.JumpToTimeControlType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ControlTransport.JumpToTimeControlType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.JumpToTimeControlType.toObject = function(includeInstance, msg) {
  var f, obj = {
time: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ControlTransport.JumpToTimeControlType}
 */
proto.rv.data.ControlTransport.JumpToTimeControlType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ControlTransport.JumpToTimeControlType;
  return proto.rv.data.ControlTransport.JumpToTimeControlType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ControlTransport.JumpToTimeControlType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ControlTransport.JumpToTimeControlType}
 */
proto.rv.data.ControlTransport.JumpToTimeControlType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ControlTransport.JumpToTimeControlType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ControlTransport.JumpToTimeControlType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ControlTransport.JumpToTimeControlType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.JumpToTimeControlType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
};


/**
 * optional double time = 1;
 * @return {number}
 */
proto.rv.data.ControlTransport.JumpToTimeControlType.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.ControlTransport.JumpToTimeControlType} returns this
 */
proto.rv.data.ControlTransport.JumpToTimeControlType.prototype.setTime = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ControlTransport.JumpToPercentControlType.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ControlTransport.JumpToPercentControlType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ControlTransport.JumpToPercentControlType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.JumpToPercentControlType.toObject = function(includeInstance, msg) {
  var f, obj = {
percent: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ControlTransport.JumpToPercentControlType}
 */
proto.rv.data.ControlTransport.JumpToPercentControlType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ControlTransport.JumpToPercentControlType;
  return proto.rv.data.ControlTransport.JumpToPercentControlType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ControlTransport.JumpToPercentControlType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ControlTransport.JumpToPercentControlType}
 */
proto.rv.data.ControlTransport.JumpToPercentControlType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPercent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ControlTransport.JumpToPercentControlType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ControlTransport.JumpToPercentControlType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ControlTransport.JumpToPercentControlType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.JumpToPercentControlType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPercent();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
};


/**
 * optional double percent = 1;
 * @return {number}
 */
proto.rv.data.ControlTransport.JumpToPercentControlType.prototype.getPercent = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.ControlTransport.JumpToPercentControlType} returns this
 */
proto.rv.data.ControlTransport.JumpToPercentControlType.prototype.setPercent = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ControlTransport.MarkInPointControlType.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ControlTransport.MarkInPointControlType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ControlTransport.MarkInPointControlType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.MarkInPointControlType.toObject = function(includeInstance, msg) {
  var f, obj = {
time: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ControlTransport.MarkInPointControlType}
 */
proto.rv.data.ControlTransport.MarkInPointControlType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ControlTransport.MarkInPointControlType;
  return proto.rv.data.ControlTransport.MarkInPointControlType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ControlTransport.MarkInPointControlType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ControlTransport.MarkInPointControlType}
 */
proto.rv.data.ControlTransport.MarkInPointControlType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ControlTransport.MarkInPointControlType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ControlTransport.MarkInPointControlType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ControlTransport.MarkInPointControlType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.MarkInPointControlType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
};


/**
 * optional double time = 1;
 * @return {number}
 */
proto.rv.data.ControlTransport.MarkInPointControlType.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.ControlTransport.MarkInPointControlType} returns this
 */
proto.rv.data.ControlTransport.MarkInPointControlType.prototype.setTime = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ControlTransport.MarkOutPointControlType.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ControlTransport.MarkOutPointControlType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ControlTransport.MarkOutPointControlType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.MarkOutPointControlType.toObject = function(includeInstance, msg) {
  var f, obj = {
time: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ControlTransport.MarkOutPointControlType}
 */
proto.rv.data.ControlTransport.MarkOutPointControlType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ControlTransport.MarkOutPointControlType;
  return proto.rv.data.ControlTransport.MarkOutPointControlType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ControlTransport.MarkOutPointControlType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ControlTransport.MarkOutPointControlType}
 */
proto.rv.data.ControlTransport.MarkOutPointControlType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ControlTransport.MarkOutPointControlType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ControlTransport.MarkOutPointControlType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ControlTransport.MarkOutPointControlType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.MarkOutPointControlType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
};


/**
 * optional double time = 1;
 * @return {number}
 */
proto.rv.data.ControlTransport.MarkOutPointControlType.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.ControlTransport.MarkOutPointControlType} returns this
 */
proto.rv.data.ControlTransport.MarkOutPointControlType.prototype.setTime = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ControlTransport.SetScaleModeControlType.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ControlTransport.SetScaleModeControlType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ControlTransport.SetScaleModeControlType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.SetScaleModeControlType.toObject = function(includeInstance, msg) {
  var f, obj = {
mode: jspb.Message.getFieldWithDefault(msg, 1, 0),
isBlurred: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
alignment: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ControlTransport.SetScaleModeControlType}
 */
proto.rv.data.ControlTransport.SetScaleModeControlType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ControlTransport.SetScaleModeControlType;
  return proto.rv.data.ControlTransport.SetScaleModeControlType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ControlTransport.SetScaleModeControlType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ControlTransport.SetScaleModeControlType}
 */
proto.rv.data.ControlTransport.SetScaleModeControlType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.rv.data.Media.ScaleBehavior} */ (reader.readEnum());
      msg.setMode(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsBlurred(value);
      break;
    case 2:
      var value = /** @type {!proto.rv.data.Media.ScaleAlignment} */ (reader.readEnum());
      msg.setAlignment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ControlTransport.SetScaleModeControlType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ControlTransport.SetScaleModeControlType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ControlTransport.SetScaleModeControlType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.SetScaleModeControlType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getIsBlurred();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getAlignment();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional Media.ScaleBehavior mode = 1;
 * @return {!proto.rv.data.Media.ScaleBehavior}
 */
proto.rv.data.ControlTransport.SetScaleModeControlType.prototype.getMode = function() {
  return /** @type {!proto.rv.data.Media.ScaleBehavior} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.rv.data.Media.ScaleBehavior} value
 * @return {!proto.rv.data.ControlTransport.SetScaleModeControlType} returns this
 */
proto.rv.data.ControlTransport.SetScaleModeControlType.prototype.setMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bool is_blurred = 3;
 * @return {boolean}
 */
proto.rv.data.ControlTransport.SetScaleModeControlType.prototype.getIsBlurred = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.ControlTransport.SetScaleModeControlType} returns this
 */
proto.rv.data.ControlTransport.SetScaleModeControlType.prototype.setIsBlurred = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional Media.ScaleAlignment alignment = 2;
 * @return {!proto.rv.data.Media.ScaleAlignment}
 */
proto.rv.data.ControlTransport.SetScaleModeControlType.prototype.getAlignment = function() {
  return /** @type {!proto.rv.data.Media.ScaleAlignment} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.rv.data.Media.ScaleAlignment} value
 * @return {!proto.rv.data.ControlTransport.SetScaleModeControlType} returns this
 */
proto.rv.data.ControlTransport.SetScaleModeControlType.prototype.setAlignment = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ControlTransport.SetFlippedModeControlType.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ControlTransport.SetFlippedModeControlType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ControlTransport.SetFlippedModeControlType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.SetFlippedModeControlType.toObject = function(includeInstance, msg) {
  var f, obj = {
horizontal: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
vertical: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ControlTransport.SetFlippedModeControlType}
 */
proto.rv.data.ControlTransport.SetFlippedModeControlType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ControlTransport.SetFlippedModeControlType;
  return proto.rv.data.ControlTransport.SetFlippedModeControlType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ControlTransport.SetFlippedModeControlType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ControlTransport.SetFlippedModeControlType}
 */
proto.rv.data.ControlTransport.SetFlippedModeControlType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHorizontal(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVertical(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ControlTransport.SetFlippedModeControlType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ControlTransport.SetFlippedModeControlType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ControlTransport.SetFlippedModeControlType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.SetFlippedModeControlType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHorizontal();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getVertical();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional bool horizontal = 1;
 * @return {boolean}
 */
proto.rv.data.ControlTransport.SetFlippedModeControlType.prototype.getHorizontal = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.ControlTransport.SetFlippedModeControlType} returns this
 */
proto.rv.data.ControlTransport.SetFlippedModeControlType.prototype.setHorizontal = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool vertical = 2;
 * @return {boolean}
 */
proto.rv.data.ControlTransport.SetFlippedModeControlType.prototype.getVertical = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.ControlTransport.SetFlippedModeControlType} returns this
 */
proto.rv.data.ControlTransport.SetFlippedModeControlType.prototype.setVertical = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ControlTransport.SetPlayRateControlType.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ControlTransport.SetPlayRateControlType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ControlTransport.SetPlayRateControlType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.SetPlayRateControlType.toObject = function(includeInstance, msg) {
  var f, obj = {
playRate: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ControlTransport.SetPlayRateControlType}
 */
proto.rv.data.ControlTransport.SetPlayRateControlType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ControlTransport.SetPlayRateControlType;
  return proto.rv.data.ControlTransport.SetPlayRateControlType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ControlTransport.SetPlayRateControlType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ControlTransport.SetPlayRateControlType}
 */
proto.rv.data.ControlTransport.SetPlayRateControlType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPlayRate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ControlTransport.SetPlayRateControlType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ControlTransport.SetPlayRateControlType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ControlTransport.SetPlayRateControlType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.SetPlayRateControlType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayRate();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
};


/**
 * optional double play_rate = 1;
 * @return {number}
 */
proto.rv.data.ControlTransport.SetPlayRateControlType.prototype.getPlayRate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.ControlTransport.SetPlayRateControlType} returns this
 */
proto.rv.data.ControlTransport.SetPlayRateControlType.prototype.setPlayRate = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ControlTransport.SetNativeRotationControlType.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ControlTransport.SetNativeRotationControlType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ControlTransport.SetNativeRotationControlType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.SetNativeRotationControlType.toObject = function(includeInstance, msg) {
  var f, obj = {
rotation: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ControlTransport.SetNativeRotationControlType}
 */
proto.rv.data.ControlTransport.SetNativeRotationControlType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ControlTransport.SetNativeRotationControlType;
  return proto.rv.data.ControlTransport.SetNativeRotationControlType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ControlTransport.SetNativeRotationControlType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ControlTransport.SetNativeRotationControlType}
 */
proto.rv.data.ControlTransport.SetNativeRotationControlType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.rv.data.Media.DrawingProperties.NativeRotationType} */ (reader.readEnum());
      msg.setRotation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ControlTransport.SetNativeRotationControlType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ControlTransport.SetNativeRotationControlType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ControlTransport.SetNativeRotationControlType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.SetNativeRotationControlType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRotation();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional Media.DrawingProperties.NativeRotationType rotation = 1;
 * @return {!proto.rv.data.Media.DrawingProperties.NativeRotationType}
 */
proto.rv.data.ControlTransport.SetNativeRotationControlType.prototype.getRotation = function() {
  return /** @type {!proto.rv.data.Media.DrawingProperties.NativeRotationType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.rv.data.Media.DrawingProperties.NativeRotationType} value
 * @return {!proto.rv.data.ControlTransport.SetNativeRotationControlType} returns this
 */
proto.rv.data.ControlTransport.SetNativeRotationControlType.prototype.setRotation = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ControlTransport.SetAlphaTypeControlType.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ControlTransport.SetAlphaTypeControlType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ControlTransport.SetAlphaTypeControlType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.SetAlphaTypeControlType.toObject = function(includeInstance, msg) {
  var f, obj = {
alphaType: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ControlTransport.SetAlphaTypeControlType}
 */
proto.rv.data.ControlTransport.SetAlphaTypeControlType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ControlTransport.SetAlphaTypeControlType;
  return proto.rv.data.ControlTransport.SetAlphaTypeControlType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ControlTransport.SetAlphaTypeControlType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ControlTransport.SetAlphaTypeControlType}
 */
proto.rv.data.ControlTransport.SetAlphaTypeControlType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.rv.data.AlphaType} */ (reader.readEnum());
      msg.setAlphaType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ControlTransport.SetAlphaTypeControlType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ControlTransport.SetAlphaTypeControlType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ControlTransport.SetAlphaTypeControlType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.SetAlphaTypeControlType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAlphaType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional AlphaType alpha_type = 1;
 * @return {!proto.rv.data.AlphaType}
 */
proto.rv.data.ControlTransport.SetAlphaTypeControlType.prototype.getAlphaType = function() {
  return /** @type {!proto.rv.data.AlphaType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.rv.data.AlphaType} value
 * @return {!proto.rv.data.ControlTransport.SetAlphaTypeControlType} returns this
 */
proto.rv.data.ControlTransport.SetAlphaTypeControlType.prototype.setAlphaType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ControlTransport.TogglePlaybackControlType.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ControlTransport.TogglePlaybackControlType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ControlTransport.TogglePlaybackControlType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.TogglePlaybackControlType.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ControlTransport.TogglePlaybackControlType}
 */
proto.rv.data.ControlTransport.TogglePlaybackControlType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ControlTransport.TogglePlaybackControlType;
  return proto.rv.data.ControlTransport.TogglePlaybackControlType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ControlTransport.TogglePlaybackControlType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ControlTransport.TogglePlaybackControlType}
 */
proto.rv.data.ControlTransport.TogglePlaybackControlType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ControlTransport.TogglePlaybackControlType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ControlTransport.TogglePlaybackControlType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ControlTransport.TogglePlaybackControlType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.TogglePlaybackControlType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rv.data.ControlTransport.SetEffectsControlType.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ControlTransport.SetEffectsControlType.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ControlTransport.SetEffectsControlType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ControlTransport.SetEffectsControlType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.SetEffectsControlType.toObject = function(includeInstance, msg) {
  var f, obj = {
effectsList: jspb.Message.toObjectList(msg.getEffectsList(),
    proto.rv.data.Effect.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ControlTransport.SetEffectsControlType}
 */
proto.rv.data.ControlTransport.SetEffectsControlType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ControlTransport.SetEffectsControlType;
  return proto.rv.data.ControlTransport.SetEffectsControlType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ControlTransport.SetEffectsControlType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ControlTransport.SetEffectsControlType}
 */
proto.rv.data.ControlTransport.SetEffectsControlType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.Effect;
      reader.readMessage(value,proto.rv.data.Effect.deserializeBinaryFromReader);
      msg.addEffects(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ControlTransport.SetEffectsControlType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ControlTransport.SetEffectsControlType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ControlTransport.SetEffectsControlType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.SetEffectsControlType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEffectsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rv.data.Effect.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Effect effects = 1;
 * @return {!Array<!proto.rv.data.Effect>}
 */
proto.rv.data.ControlTransport.SetEffectsControlType.prototype.getEffectsList = function() {
  return /** @type{!Array<!proto.rv.data.Effect>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rv.data.Effect, 1));
};


/**
 * @param {!Array<!proto.rv.data.Effect>} value
 * @return {!proto.rv.data.ControlTransport.SetEffectsControlType} returns this
*/
proto.rv.data.ControlTransport.SetEffectsControlType.prototype.setEffectsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.rv.data.Effect=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rv.data.Effect}
 */
proto.rv.data.ControlTransport.SetEffectsControlType.prototype.addEffects = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rv.data.Effect, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.ControlTransport.SetEffectsControlType} returns this
 */
proto.rv.data.ControlTransport.SetEffectsControlType.prototype.clearEffectsList = function() {
  return this.setEffectsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ControlTransport.UpdateEffectControlType.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ControlTransport.UpdateEffectControlType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ControlTransport.UpdateEffectControlType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.UpdateEffectControlType.toObject = function(includeInstance, msg) {
  var f, obj = {
effect: (f = msg.getEffect()) && proto.rv.data.Effect.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ControlTransport.UpdateEffectControlType}
 */
proto.rv.data.ControlTransport.UpdateEffectControlType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ControlTransport.UpdateEffectControlType;
  return proto.rv.data.ControlTransport.UpdateEffectControlType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ControlTransport.UpdateEffectControlType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ControlTransport.UpdateEffectControlType}
 */
proto.rv.data.ControlTransport.UpdateEffectControlType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.Effect;
      reader.readMessage(value,proto.rv.data.Effect.deserializeBinaryFromReader);
      msg.setEffect(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ControlTransport.UpdateEffectControlType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ControlTransport.UpdateEffectControlType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ControlTransport.UpdateEffectControlType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.UpdateEffectControlType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEffect();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.Effect.serializeBinaryToWriter
    );
  }
};


/**
 * optional Effect effect = 1;
 * @return {?proto.rv.data.Effect}
 */
proto.rv.data.ControlTransport.UpdateEffectControlType.prototype.getEffect = function() {
  return /** @type{?proto.rv.data.Effect} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Effect, 1));
};


/**
 * @param {?proto.rv.data.Effect|undefined} value
 * @return {!proto.rv.data.ControlTransport.UpdateEffectControlType} returns this
*/
proto.rv.data.ControlTransport.UpdateEffectControlType.prototype.setEffect = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ControlTransport.UpdateEffectControlType} returns this
 */
proto.rv.data.ControlTransport.UpdateEffectControlType.prototype.clearEffect = function() {
  return this.setEffect(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ControlTransport.UpdateEffectControlType.prototype.hasEffect = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ControlTransport.BeginScrubControlType.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ControlTransport.BeginScrubControlType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ControlTransport.BeginScrubControlType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.BeginScrubControlType.toObject = function(includeInstance, msg) {
  var f, obj = {
time: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ControlTransport.BeginScrubControlType}
 */
proto.rv.data.ControlTransport.BeginScrubControlType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ControlTransport.BeginScrubControlType;
  return proto.rv.data.ControlTransport.BeginScrubControlType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ControlTransport.BeginScrubControlType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ControlTransport.BeginScrubControlType}
 */
proto.rv.data.ControlTransport.BeginScrubControlType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ControlTransport.BeginScrubControlType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ControlTransport.BeginScrubControlType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ControlTransport.BeginScrubControlType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.BeginScrubControlType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
};


/**
 * optional double time = 1;
 * @return {number}
 */
proto.rv.data.ControlTransport.BeginScrubControlType.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.ControlTransport.BeginScrubControlType} returns this
 */
proto.rv.data.ControlTransport.BeginScrubControlType.prototype.setTime = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ControlTransport.EndScrubControlType.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ControlTransport.EndScrubControlType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ControlTransport.EndScrubControlType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.EndScrubControlType.toObject = function(includeInstance, msg) {
  var f, obj = {
time: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ControlTransport.EndScrubControlType}
 */
proto.rv.data.ControlTransport.EndScrubControlType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ControlTransport.EndScrubControlType;
  return proto.rv.data.ControlTransport.EndScrubControlType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ControlTransport.EndScrubControlType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ControlTransport.EndScrubControlType}
 */
proto.rv.data.ControlTransport.EndScrubControlType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ControlTransport.EndScrubControlType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ControlTransport.EndScrubControlType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ControlTransport.EndScrubControlType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.EndScrubControlType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
};


/**
 * optional double time = 1;
 * @return {number}
 */
proto.rv.data.ControlTransport.EndScrubControlType.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.ControlTransport.EndScrubControlType} returns this
 */
proto.rv.data.ControlTransport.EndScrubControlType.prototype.setTime = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ControlTransport.ScrubToTimeControlType.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ControlTransport.ScrubToTimeControlType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ControlTransport.ScrubToTimeControlType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.ScrubToTimeControlType.toObject = function(includeInstance, msg) {
  var f, obj = {
time: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ControlTransport.ScrubToTimeControlType}
 */
proto.rv.data.ControlTransport.ScrubToTimeControlType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ControlTransport.ScrubToTimeControlType;
  return proto.rv.data.ControlTransport.ScrubToTimeControlType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ControlTransport.ScrubToTimeControlType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ControlTransport.ScrubToTimeControlType}
 */
proto.rv.data.ControlTransport.ScrubToTimeControlType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ControlTransport.ScrubToTimeControlType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ControlTransport.ScrubToTimeControlType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ControlTransport.ScrubToTimeControlType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.ScrubToTimeControlType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
};


/**
 * optional double time = 1;
 * @return {number}
 */
proto.rv.data.ControlTransport.ScrubToTimeControlType.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.ControlTransport.ScrubToTimeControlType} returns this
 */
proto.rv.data.ControlTransport.ScrubToTimeControlType.prototype.setTime = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ControlTransport.ScrubToPercentControlType.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ControlTransport.ScrubToPercentControlType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ControlTransport.ScrubToPercentControlType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.ScrubToPercentControlType.toObject = function(includeInstance, msg) {
  var f, obj = {
percent: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ControlTransport.ScrubToPercentControlType}
 */
proto.rv.data.ControlTransport.ScrubToPercentControlType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ControlTransport.ScrubToPercentControlType;
  return proto.rv.data.ControlTransport.ScrubToPercentControlType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ControlTransport.ScrubToPercentControlType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ControlTransport.ScrubToPercentControlType}
 */
proto.rv.data.ControlTransport.ScrubToPercentControlType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPercent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ControlTransport.ScrubToPercentControlType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ControlTransport.ScrubToPercentControlType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ControlTransport.ScrubToPercentControlType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.ScrubToPercentControlType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPercent();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
};


/**
 * optional double percent = 1;
 * @return {number}
 */
proto.rv.data.ControlTransport.ScrubToPercentControlType.prototype.getPercent = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.ControlTransport.ScrubToPercentControlType} returns this
 */
proto.rv.data.ControlTransport.ScrubToPercentControlType.prototype.setPercent = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ControlTransport.SetAudioFadeType.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ControlTransport.SetAudioFadeType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ControlTransport.SetAudioFadeType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.SetAudioFadeType.toObject = function(includeInstance, msg) {
  var f, obj = {
fadeInDuration: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
fadeOutDuration: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
shouldFadeIn: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
shouldFadeOut: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ControlTransport.SetAudioFadeType}
 */
proto.rv.data.ControlTransport.SetAudioFadeType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ControlTransport.SetAudioFadeType;
  return proto.rv.data.ControlTransport.SetAudioFadeType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ControlTransport.SetAudioFadeType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ControlTransport.SetAudioFadeType}
 */
proto.rv.data.ControlTransport.SetAudioFadeType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFadeInDuration(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFadeOutDuration(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShouldFadeIn(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShouldFadeOut(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ControlTransport.SetAudioFadeType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ControlTransport.SetAudioFadeType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ControlTransport.SetAudioFadeType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.SetAudioFadeType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFadeInDuration();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getFadeOutDuration();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getShouldFadeIn();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getShouldFadeOut();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional double fade_in_duration = 1;
 * @return {number}
 */
proto.rv.data.ControlTransport.SetAudioFadeType.prototype.getFadeInDuration = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.ControlTransport.SetAudioFadeType} returns this
 */
proto.rv.data.ControlTransport.SetAudioFadeType.prototype.setFadeInDuration = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double fade_out_duration = 2;
 * @return {number}
 */
proto.rv.data.ControlTransport.SetAudioFadeType.prototype.getFadeOutDuration = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.ControlTransport.SetAudioFadeType} returns this
 */
proto.rv.data.ControlTransport.SetAudioFadeType.prototype.setFadeOutDuration = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional bool should_fade_in = 3;
 * @return {boolean}
 */
proto.rv.data.ControlTransport.SetAudioFadeType.prototype.getShouldFadeIn = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.ControlTransport.SetAudioFadeType} returns this
 */
proto.rv.data.ControlTransport.SetAudioFadeType.prototype.setShouldFadeIn = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool should_fade_out = 4;
 * @return {boolean}
 */
proto.rv.data.ControlTransport.SetAudioFadeType.prototype.getShouldFadeOut = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.ControlTransport.SetAudioFadeType} returns this
 */
proto.rv.data.ControlTransport.SetAudioFadeType.prototype.setShouldFadeOut = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rv.data.ControlTransport.SetAudioPropertiesType.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ControlTransport.SetAudioPropertiesType.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ControlTransport.SetAudioPropertiesType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ControlTransport.SetAudioPropertiesType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.SetAudioPropertiesType.toObject = function(includeInstance, msg) {
  var f, obj = {
audioProperties: (f = msg.getAudioProperties()) && proto.rv.data.Media.AudioProperties.toObject(includeInstance, f),
soloList: (f = jspb.Message.getRepeatedBooleanField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ControlTransport.SetAudioPropertiesType}
 */
proto.rv.data.ControlTransport.SetAudioPropertiesType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ControlTransport.SetAudioPropertiesType;
  return proto.rv.data.ControlTransport.SetAudioPropertiesType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ControlTransport.SetAudioPropertiesType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ControlTransport.SetAudioPropertiesType}
 */
proto.rv.data.ControlTransport.SetAudioPropertiesType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.Media.AudioProperties;
      reader.readMessage(value,proto.rv.data.Media.AudioProperties.deserializeBinaryFromReader);
      msg.setAudioProperties(value);
      break;
    case 2:
      var values = /** @type {!Array<boolean>} */ (reader.isDelimited() ? reader.readPackedBool() : [reader.readBool()]);
      for (var i = 0; i < values.length; i++) {
        msg.addSolo(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ControlTransport.SetAudioPropertiesType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ControlTransport.SetAudioPropertiesType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ControlTransport.SetAudioPropertiesType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ControlTransport.SetAudioPropertiesType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAudioProperties();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.Media.AudioProperties.serializeBinaryToWriter
    );
  }
  f = message.getSoloList();
  if (f.length > 0) {
    writer.writePackedBool(
      2,
      f
    );
  }
};


/**
 * optional Media.AudioProperties audio_properties = 1;
 * @return {?proto.rv.data.Media.AudioProperties}
 */
proto.rv.data.ControlTransport.SetAudioPropertiesType.prototype.getAudioProperties = function() {
  return /** @type{?proto.rv.data.Media.AudioProperties} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Media.AudioProperties, 1));
};


/**
 * @param {?proto.rv.data.Media.AudioProperties|undefined} value
 * @return {!proto.rv.data.ControlTransport.SetAudioPropertiesType} returns this
*/
proto.rv.data.ControlTransport.SetAudioPropertiesType.prototype.setAudioProperties = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ControlTransport.SetAudioPropertiesType} returns this
 */
proto.rv.data.ControlTransport.SetAudioPropertiesType.prototype.clearAudioProperties = function() {
  return this.setAudioProperties(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ControlTransport.SetAudioPropertiesType.prototype.hasAudioProperties = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated bool solo = 2;
 * @return {!Array<boolean>}
 */
proto.rv.data.ControlTransport.SetAudioPropertiesType.prototype.getSoloList = function() {
  return /** @type {!Array<boolean>} */ (jspb.Message.getRepeatedBooleanField(this, 2));
};


/**
 * @param {!Array<boolean>} value
 * @return {!proto.rv.data.ControlTransport.SetAudioPropertiesType} returns this
 */
proto.rv.data.ControlTransport.SetAudioPropertiesType.prototype.setSoloList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {boolean} value
 * @param {number=} opt_index
 * @return {!proto.rv.data.ControlTransport.SetAudioPropertiesType} returns this
 */
proto.rv.data.ControlTransport.SetAudioPropertiesType.prototype.addSolo = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.ControlTransport.SetAudioPropertiesType} returns this
 */
proto.rv.data.ControlTransport.SetAudioPropertiesType.prototype.clearSoloList = function() {
  return this.setSoloList([]);
};


/**
 * optional PlayControlType play = 1;
 * @return {?proto.rv.data.ControlTransport.PlayControlType}
 */
proto.rv.data.ControlTransport.prototype.getPlay = function() {
  return /** @type{?proto.rv.data.ControlTransport.PlayControlType} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ControlTransport.PlayControlType, 1));
};


/**
 * @param {?proto.rv.data.ControlTransport.PlayControlType|undefined} value
 * @return {!proto.rv.data.ControlTransport} returns this
*/
proto.rv.data.ControlTransport.prototype.setPlay = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.rv.data.ControlTransport.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ControlTransport} returns this
 */
proto.rv.data.ControlTransport.prototype.clearPlay = function() {
  return this.setPlay(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ControlTransport.prototype.hasPlay = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PauseControlType pause = 2;
 * @return {?proto.rv.data.ControlTransport.PauseControlType}
 */
proto.rv.data.ControlTransport.prototype.getPause = function() {
  return /** @type{?proto.rv.data.ControlTransport.PauseControlType} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ControlTransport.PauseControlType, 2));
};


/**
 * @param {?proto.rv.data.ControlTransport.PauseControlType|undefined} value
 * @return {!proto.rv.data.ControlTransport} returns this
*/
proto.rv.data.ControlTransport.prototype.setPause = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.rv.data.ControlTransport.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ControlTransport} returns this
 */
proto.rv.data.ControlTransport.prototype.clearPause = function() {
  return this.setPause(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ControlTransport.prototype.hasPause = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RewindControlType rewind = 3;
 * @return {?proto.rv.data.ControlTransport.RewindControlType}
 */
proto.rv.data.ControlTransport.prototype.getRewind = function() {
  return /** @type{?proto.rv.data.ControlTransport.RewindControlType} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ControlTransport.RewindControlType, 3));
};


/**
 * @param {?proto.rv.data.ControlTransport.RewindControlType|undefined} value
 * @return {!proto.rv.data.ControlTransport} returns this
*/
proto.rv.data.ControlTransport.prototype.setRewind = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.rv.data.ControlTransport.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ControlTransport} returns this
 */
proto.rv.data.ControlTransport.prototype.clearRewind = function() {
  return this.setRewind(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ControlTransport.prototype.hasRewind = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional FastForwardControlType fastforward = 4;
 * @return {?proto.rv.data.ControlTransport.FastForwardControlType}
 */
proto.rv.data.ControlTransport.prototype.getFastforward = function() {
  return /** @type{?proto.rv.data.ControlTransport.FastForwardControlType} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ControlTransport.FastForwardControlType, 4));
};


/**
 * @param {?proto.rv.data.ControlTransport.FastForwardControlType|undefined} value
 * @return {!proto.rv.data.ControlTransport} returns this
*/
proto.rv.data.ControlTransport.prototype.setFastforward = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.rv.data.ControlTransport.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ControlTransport} returns this
 */
proto.rv.data.ControlTransport.prototype.clearFastforward = function() {
  return this.setFastforward(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ControlTransport.prototype.hasFastforward = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional SkipBackControlType skip_back = 5;
 * @return {?proto.rv.data.ControlTransport.SkipBackControlType}
 */
proto.rv.data.ControlTransport.prototype.getSkipBack = function() {
  return /** @type{?proto.rv.data.ControlTransport.SkipBackControlType} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ControlTransport.SkipBackControlType, 5));
};


/**
 * @param {?proto.rv.data.ControlTransport.SkipBackControlType|undefined} value
 * @return {!proto.rv.data.ControlTransport} returns this
*/
proto.rv.data.ControlTransport.prototype.setSkipBack = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.rv.data.ControlTransport.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ControlTransport} returns this
 */
proto.rv.data.ControlTransport.prototype.clearSkipBack = function() {
  return this.setSkipBack(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ControlTransport.prototype.hasSkipBack = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional SkipForwardControlType skip_forward = 6;
 * @return {?proto.rv.data.ControlTransport.SkipForwardControlType}
 */
proto.rv.data.ControlTransport.prototype.getSkipForward = function() {
  return /** @type{?proto.rv.data.ControlTransport.SkipForwardControlType} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ControlTransport.SkipForwardControlType, 6));
};


/**
 * @param {?proto.rv.data.ControlTransport.SkipForwardControlType|undefined} value
 * @return {!proto.rv.data.ControlTransport} returns this
*/
proto.rv.data.ControlTransport.prototype.setSkipForward = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.rv.data.ControlTransport.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ControlTransport} returns this
 */
proto.rv.data.ControlTransport.prototype.clearSkipForward = function() {
  return this.setSkipForward(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ControlTransport.prototype.hasSkipForward = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional StepBackControlType step_back = 7;
 * @return {?proto.rv.data.ControlTransport.StepBackControlType}
 */
proto.rv.data.ControlTransport.prototype.getStepBack = function() {
  return /** @type{?proto.rv.data.ControlTransport.StepBackControlType} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ControlTransport.StepBackControlType, 7));
};


/**
 * @param {?proto.rv.data.ControlTransport.StepBackControlType|undefined} value
 * @return {!proto.rv.data.ControlTransport} returns this
*/
proto.rv.data.ControlTransport.prototype.setStepBack = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.rv.data.ControlTransport.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ControlTransport} returns this
 */
proto.rv.data.ControlTransport.prototype.clearStepBack = function() {
  return this.setStepBack(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ControlTransport.prototype.hasStepBack = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional StepForwardControlType step_forward = 8;
 * @return {?proto.rv.data.ControlTransport.StepForwardControlType}
 */
proto.rv.data.ControlTransport.prototype.getStepForward = function() {
  return /** @type{?proto.rv.data.ControlTransport.StepForwardControlType} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ControlTransport.StepForwardControlType, 8));
};


/**
 * @param {?proto.rv.data.ControlTransport.StepForwardControlType|undefined} value
 * @return {!proto.rv.data.ControlTransport} returns this
*/
proto.rv.data.ControlTransport.prototype.setStepForward = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.rv.data.ControlTransport.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ControlTransport} returns this
 */
proto.rv.data.ControlTransport.prototype.clearStepForward = function() {
  return this.setStepForward(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ControlTransport.prototype.hasStepForward = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional GoToStartControlType go_to_start = 9;
 * @return {?proto.rv.data.ControlTransport.GoToStartControlType}
 */
proto.rv.data.ControlTransport.prototype.getGoToStart = function() {
  return /** @type{?proto.rv.data.ControlTransport.GoToStartControlType} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ControlTransport.GoToStartControlType, 9));
};


/**
 * @param {?proto.rv.data.ControlTransport.GoToStartControlType|undefined} value
 * @return {!proto.rv.data.ControlTransport} returns this
*/
proto.rv.data.ControlTransport.prototype.setGoToStart = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.rv.data.ControlTransport.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ControlTransport} returns this
 */
proto.rv.data.ControlTransport.prototype.clearGoToStart = function() {
  return this.setGoToStart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ControlTransport.prototype.hasGoToStart = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional GoToEndControlType go_to_end = 10;
 * @return {?proto.rv.data.ControlTransport.GoToEndControlType}
 */
proto.rv.data.ControlTransport.prototype.getGoToEnd = function() {
  return /** @type{?proto.rv.data.ControlTransport.GoToEndControlType} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ControlTransport.GoToEndControlType, 10));
};


/**
 * @param {?proto.rv.data.ControlTransport.GoToEndControlType|undefined} value
 * @return {!proto.rv.data.ControlTransport} returns this
*/
proto.rv.data.ControlTransport.prototype.setGoToEnd = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.rv.data.ControlTransport.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ControlTransport} returns this
 */
proto.rv.data.ControlTransport.prototype.clearGoToEnd = function() {
  return this.setGoToEnd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ControlTransport.prototype.hasGoToEnd = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional JumpToTimeControlType jump_to_time = 11;
 * @return {?proto.rv.data.ControlTransport.JumpToTimeControlType}
 */
proto.rv.data.ControlTransport.prototype.getJumpToTime = function() {
  return /** @type{?proto.rv.data.ControlTransport.JumpToTimeControlType} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ControlTransport.JumpToTimeControlType, 11));
};


/**
 * @param {?proto.rv.data.ControlTransport.JumpToTimeControlType|undefined} value
 * @return {!proto.rv.data.ControlTransport} returns this
*/
proto.rv.data.ControlTransport.prototype.setJumpToTime = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.rv.data.ControlTransport.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ControlTransport} returns this
 */
proto.rv.data.ControlTransport.prototype.clearJumpToTime = function() {
  return this.setJumpToTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ControlTransport.prototype.hasJumpToTime = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional JumpToPercentControlType jump_to_percent = 12;
 * @return {?proto.rv.data.ControlTransport.JumpToPercentControlType}
 */
proto.rv.data.ControlTransport.prototype.getJumpToPercent = function() {
  return /** @type{?proto.rv.data.ControlTransport.JumpToPercentControlType} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ControlTransport.JumpToPercentControlType, 12));
};


/**
 * @param {?proto.rv.data.ControlTransport.JumpToPercentControlType|undefined} value
 * @return {!proto.rv.data.ControlTransport} returns this
*/
proto.rv.data.ControlTransport.prototype.setJumpToPercent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.rv.data.ControlTransport.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ControlTransport} returns this
 */
proto.rv.data.ControlTransport.prototype.clearJumpToPercent = function() {
  return this.setJumpToPercent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ControlTransport.prototype.hasJumpToPercent = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional MarkInPointControlType mark_in = 13;
 * @return {?proto.rv.data.ControlTransport.MarkInPointControlType}
 */
proto.rv.data.ControlTransport.prototype.getMarkIn = function() {
  return /** @type{?proto.rv.data.ControlTransport.MarkInPointControlType} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ControlTransport.MarkInPointControlType, 13));
};


/**
 * @param {?proto.rv.data.ControlTransport.MarkInPointControlType|undefined} value
 * @return {!proto.rv.data.ControlTransport} returns this
*/
proto.rv.data.ControlTransport.prototype.setMarkIn = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.rv.data.ControlTransport.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ControlTransport} returns this
 */
proto.rv.data.ControlTransport.prototype.clearMarkIn = function() {
  return this.setMarkIn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ControlTransport.prototype.hasMarkIn = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional MarkOutPointControlType mark_out = 14;
 * @return {?proto.rv.data.ControlTransport.MarkOutPointControlType}
 */
proto.rv.data.ControlTransport.prototype.getMarkOut = function() {
  return /** @type{?proto.rv.data.ControlTransport.MarkOutPointControlType} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ControlTransport.MarkOutPointControlType, 14));
};


/**
 * @param {?proto.rv.data.ControlTransport.MarkOutPointControlType|undefined} value
 * @return {!proto.rv.data.ControlTransport} returns this
*/
proto.rv.data.ControlTransport.prototype.setMarkOut = function(value) {
  return jspb.Message.setOneofWrapperField(this, 14, proto.rv.data.ControlTransport.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ControlTransport} returns this
 */
proto.rv.data.ControlTransport.prototype.clearMarkOut = function() {
  return this.setMarkOut(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ControlTransport.prototype.hasMarkOut = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional SetScaleModeControlType set_scale_mode = 15;
 * @return {?proto.rv.data.ControlTransport.SetScaleModeControlType}
 */
proto.rv.data.ControlTransport.prototype.getSetScaleMode = function() {
  return /** @type{?proto.rv.data.ControlTransport.SetScaleModeControlType} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ControlTransport.SetScaleModeControlType, 15));
};


/**
 * @param {?proto.rv.data.ControlTransport.SetScaleModeControlType|undefined} value
 * @return {!proto.rv.data.ControlTransport} returns this
*/
proto.rv.data.ControlTransport.prototype.setSetScaleMode = function(value) {
  return jspb.Message.setOneofWrapperField(this, 15, proto.rv.data.ControlTransport.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ControlTransport} returns this
 */
proto.rv.data.ControlTransport.prototype.clearSetScaleMode = function() {
  return this.setSetScaleMode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ControlTransport.prototype.hasSetScaleMode = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional SetFlippedModeControlType set_flipped_mode = 16;
 * @return {?proto.rv.data.ControlTransport.SetFlippedModeControlType}
 */
proto.rv.data.ControlTransport.prototype.getSetFlippedMode = function() {
  return /** @type{?proto.rv.data.ControlTransport.SetFlippedModeControlType} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ControlTransport.SetFlippedModeControlType, 16));
};


/**
 * @param {?proto.rv.data.ControlTransport.SetFlippedModeControlType|undefined} value
 * @return {!proto.rv.data.ControlTransport} returns this
*/
proto.rv.data.ControlTransport.prototype.setSetFlippedMode = function(value) {
  return jspb.Message.setOneofWrapperField(this, 16, proto.rv.data.ControlTransport.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ControlTransport} returns this
 */
proto.rv.data.ControlTransport.prototype.clearSetFlippedMode = function() {
  return this.setSetFlippedMode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ControlTransport.prototype.hasSetFlippedMode = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional SetPlayRateControlType set_play_rate = 17;
 * @return {?proto.rv.data.ControlTransport.SetPlayRateControlType}
 */
proto.rv.data.ControlTransport.prototype.getSetPlayRate = function() {
  return /** @type{?proto.rv.data.ControlTransport.SetPlayRateControlType} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ControlTransport.SetPlayRateControlType, 17));
};


/**
 * @param {?proto.rv.data.ControlTransport.SetPlayRateControlType|undefined} value
 * @return {!proto.rv.data.ControlTransport} returns this
*/
proto.rv.data.ControlTransport.prototype.setSetPlayRate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 17, proto.rv.data.ControlTransport.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ControlTransport} returns this
 */
proto.rv.data.ControlTransport.prototype.clearSetPlayRate = function() {
  return this.setSetPlayRate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ControlTransport.prototype.hasSetPlayRate = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional SetNativeRotationControlType set_rotation = 18;
 * @return {?proto.rv.data.ControlTransport.SetNativeRotationControlType}
 */
proto.rv.data.ControlTransport.prototype.getSetRotation = function() {
  return /** @type{?proto.rv.data.ControlTransport.SetNativeRotationControlType} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ControlTransport.SetNativeRotationControlType, 18));
};


/**
 * @param {?proto.rv.data.ControlTransport.SetNativeRotationControlType|undefined} value
 * @return {!proto.rv.data.ControlTransport} returns this
*/
proto.rv.data.ControlTransport.prototype.setSetRotation = function(value) {
  return jspb.Message.setOneofWrapperField(this, 18, proto.rv.data.ControlTransport.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ControlTransport} returns this
 */
proto.rv.data.ControlTransport.prototype.clearSetRotation = function() {
  return this.setSetRotation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ControlTransport.prototype.hasSetRotation = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional TogglePlaybackControlType toggle_playback = 19;
 * @return {?proto.rv.data.ControlTransport.TogglePlaybackControlType}
 */
proto.rv.data.ControlTransport.prototype.getTogglePlayback = function() {
  return /** @type{?proto.rv.data.ControlTransport.TogglePlaybackControlType} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ControlTransport.TogglePlaybackControlType, 19));
};


/**
 * @param {?proto.rv.data.ControlTransport.TogglePlaybackControlType|undefined} value
 * @return {!proto.rv.data.ControlTransport} returns this
*/
proto.rv.data.ControlTransport.prototype.setTogglePlayback = function(value) {
  return jspb.Message.setOneofWrapperField(this, 19, proto.rv.data.ControlTransport.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ControlTransport} returns this
 */
proto.rv.data.ControlTransport.prototype.clearTogglePlayback = function() {
  return this.setTogglePlayback(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ControlTransport.prototype.hasTogglePlayback = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional SetEffectsControlType set_effects = 20;
 * @return {?proto.rv.data.ControlTransport.SetEffectsControlType}
 */
proto.rv.data.ControlTransport.prototype.getSetEffects = function() {
  return /** @type{?proto.rv.data.ControlTransport.SetEffectsControlType} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ControlTransport.SetEffectsControlType, 20));
};


/**
 * @param {?proto.rv.data.ControlTransport.SetEffectsControlType|undefined} value
 * @return {!proto.rv.data.ControlTransport} returns this
*/
proto.rv.data.ControlTransport.prototype.setSetEffects = function(value) {
  return jspb.Message.setOneofWrapperField(this, 20, proto.rv.data.ControlTransport.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ControlTransport} returns this
 */
proto.rv.data.ControlTransport.prototype.clearSetEffects = function() {
  return this.setSetEffects(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ControlTransport.prototype.hasSetEffects = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional UpdateEffectControlType update_effect = 21;
 * @return {?proto.rv.data.ControlTransport.UpdateEffectControlType}
 */
proto.rv.data.ControlTransport.prototype.getUpdateEffect = function() {
  return /** @type{?proto.rv.data.ControlTransport.UpdateEffectControlType} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ControlTransport.UpdateEffectControlType, 21));
};


/**
 * @param {?proto.rv.data.ControlTransport.UpdateEffectControlType|undefined} value
 * @return {!proto.rv.data.ControlTransport} returns this
*/
proto.rv.data.ControlTransport.prototype.setUpdateEffect = function(value) {
  return jspb.Message.setOneofWrapperField(this, 21, proto.rv.data.ControlTransport.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ControlTransport} returns this
 */
proto.rv.data.ControlTransport.prototype.clearUpdateEffect = function() {
  return this.setUpdateEffect(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ControlTransport.prototype.hasUpdateEffect = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional BeginScrubControlType begin_scrub = 22;
 * @return {?proto.rv.data.ControlTransport.BeginScrubControlType}
 */
proto.rv.data.ControlTransport.prototype.getBeginScrub = function() {
  return /** @type{?proto.rv.data.ControlTransport.BeginScrubControlType} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ControlTransport.BeginScrubControlType, 22));
};


/**
 * @param {?proto.rv.data.ControlTransport.BeginScrubControlType|undefined} value
 * @return {!proto.rv.data.ControlTransport} returns this
*/
proto.rv.data.ControlTransport.prototype.setBeginScrub = function(value) {
  return jspb.Message.setOneofWrapperField(this, 22, proto.rv.data.ControlTransport.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ControlTransport} returns this
 */
proto.rv.data.ControlTransport.prototype.clearBeginScrub = function() {
  return this.setBeginScrub(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ControlTransport.prototype.hasBeginScrub = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional EndScrubControlType end_scrub = 23;
 * @return {?proto.rv.data.ControlTransport.EndScrubControlType}
 */
proto.rv.data.ControlTransport.prototype.getEndScrub = function() {
  return /** @type{?proto.rv.data.ControlTransport.EndScrubControlType} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ControlTransport.EndScrubControlType, 23));
};


/**
 * @param {?proto.rv.data.ControlTransport.EndScrubControlType|undefined} value
 * @return {!proto.rv.data.ControlTransport} returns this
*/
proto.rv.data.ControlTransport.prototype.setEndScrub = function(value) {
  return jspb.Message.setOneofWrapperField(this, 23, proto.rv.data.ControlTransport.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ControlTransport} returns this
 */
proto.rv.data.ControlTransport.prototype.clearEndScrub = function() {
  return this.setEndScrub(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ControlTransport.prototype.hasEndScrub = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional ScrubToTimeControlType scrub_to_time = 24;
 * @return {?proto.rv.data.ControlTransport.ScrubToTimeControlType}
 */
proto.rv.data.ControlTransport.prototype.getScrubToTime = function() {
  return /** @type{?proto.rv.data.ControlTransport.ScrubToTimeControlType} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ControlTransport.ScrubToTimeControlType, 24));
};


/**
 * @param {?proto.rv.data.ControlTransport.ScrubToTimeControlType|undefined} value
 * @return {!proto.rv.data.ControlTransport} returns this
*/
proto.rv.data.ControlTransport.prototype.setScrubToTime = function(value) {
  return jspb.Message.setOneofWrapperField(this, 24, proto.rv.data.ControlTransport.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ControlTransport} returns this
 */
proto.rv.data.ControlTransport.prototype.clearScrubToTime = function() {
  return this.setScrubToTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ControlTransport.prototype.hasScrubToTime = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional ScrubToPercentControlType scrub_to_percent = 25;
 * @return {?proto.rv.data.ControlTransport.ScrubToPercentControlType}
 */
proto.rv.data.ControlTransport.prototype.getScrubToPercent = function() {
  return /** @type{?proto.rv.data.ControlTransport.ScrubToPercentControlType} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ControlTransport.ScrubToPercentControlType, 25));
};


/**
 * @param {?proto.rv.data.ControlTransport.ScrubToPercentControlType|undefined} value
 * @return {!proto.rv.data.ControlTransport} returns this
*/
proto.rv.data.ControlTransport.prototype.setScrubToPercent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 25, proto.rv.data.ControlTransport.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ControlTransport} returns this
 */
proto.rv.data.ControlTransport.prototype.clearScrubToPercent = function() {
  return this.setScrubToPercent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ControlTransport.prototype.hasScrubToPercent = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional SetAudioFadeType set_audio_fade = 26;
 * @return {?proto.rv.data.ControlTransport.SetAudioFadeType}
 */
proto.rv.data.ControlTransport.prototype.getSetAudioFade = function() {
  return /** @type{?proto.rv.data.ControlTransport.SetAudioFadeType} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ControlTransport.SetAudioFadeType, 26));
};


/**
 * @param {?proto.rv.data.ControlTransport.SetAudioFadeType|undefined} value
 * @return {!proto.rv.data.ControlTransport} returns this
*/
proto.rv.data.ControlTransport.prototype.setSetAudioFade = function(value) {
  return jspb.Message.setOneofWrapperField(this, 26, proto.rv.data.ControlTransport.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ControlTransport} returns this
 */
proto.rv.data.ControlTransport.prototype.clearSetAudioFade = function() {
  return this.setSetAudioFade(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ControlTransport.prototype.hasSetAudioFade = function() {
  return jspb.Message.getField(this, 26) != null;
};


/**
 * optional SetAudioPropertiesType set_audio_properties = 27;
 * @return {?proto.rv.data.ControlTransport.SetAudioPropertiesType}
 */
proto.rv.data.ControlTransport.prototype.getSetAudioProperties = function() {
  return /** @type{?proto.rv.data.ControlTransport.SetAudioPropertiesType} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ControlTransport.SetAudioPropertiesType, 27));
};


/**
 * @param {?proto.rv.data.ControlTransport.SetAudioPropertiesType|undefined} value
 * @return {!proto.rv.data.ControlTransport} returns this
*/
proto.rv.data.ControlTransport.prototype.setSetAudioProperties = function(value) {
  return jspb.Message.setOneofWrapperField(this, 27, proto.rv.data.ControlTransport.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ControlTransport} returns this
 */
proto.rv.data.ControlTransport.prototype.clearSetAudioProperties = function() {
  return this.setSetAudioProperties(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ControlTransport.prototype.hasSetAudioProperties = function() {
  return jspb.Message.getField(this, 27) != null;
};


/**
 * optional SetAlphaTypeControlType set_alpha_type = 28;
 * @return {?proto.rv.data.ControlTransport.SetAlphaTypeControlType}
 */
proto.rv.data.ControlTransport.prototype.getSetAlphaType = function() {
  return /** @type{?proto.rv.data.ControlTransport.SetAlphaTypeControlType} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ControlTransport.SetAlphaTypeControlType, 28));
};


/**
 * @param {?proto.rv.data.ControlTransport.SetAlphaTypeControlType|undefined} value
 * @return {!proto.rv.data.ControlTransport} returns this
*/
proto.rv.data.ControlTransport.prototype.setSetAlphaType = function(value) {
  return jspb.Message.setOneofWrapperField(this, 28, proto.rv.data.ControlTransport.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ControlTransport} returns this
 */
proto.rv.data.ControlTransport.prototype.clearSetAlphaType = function() {
  return this.setSetAlphaType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ControlTransport.prototype.hasSetAlphaType = function() {
  return jspb.Message.getField(this, 28) != null;
};


