// source: messages.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.rv.data.Message');
goog.provide('proto.rv.data.Message.ClearType');
goog.provide('proto.rv.data.Message.Token');
goog.provide('proto.rv.data.Message.Token.TokenTypeClock');
goog.provide('proto.rv.data.Message.Token.TokenTypeText');
goog.provide('proto.rv.data.Message.Token.TokenTypeTimer');
goog.provide('proto.rv.data.Message.Token.TokentypeCase');
goog.provide('proto.rv.data.Message.TokenValue');
goog.provide('proto.rv.data.Message.TokenValue.TokenValueClock');
goog.provide('proto.rv.data.Message.TokenValue.TokenValueText');
goog.provide('proto.rv.data.Message.TokenValue.TokenValueTimer');
goog.provide('proto.rv.data.Message.TokenValue.TokenvaluetypeCase');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.rv.data.Clock.Format');
goog.require('proto.rv.data.TemplateIdentification');
goog.require('proto.rv.data.Timer.Configuration');
goog.require('proto.rv.data.Timer.Format');
goog.require('proto.rv.data.UUID');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rv.data.Message.repeatedFields_, null);
};
goog.inherits(proto.rv.data.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Message.displayName = 'proto.rv.data.Message';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Message.Token = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rv.data.Message.Token.oneofGroups_);
};
goog.inherits(proto.rv.data.Message.Token, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Message.Token.displayName = 'proto.rv.data.Message.Token';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Message.Token.TokenTypeText = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.Message.Token.TokenTypeText, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Message.Token.TokenTypeText.displayName = 'proto.rv.data.Message.Token.TokenTypeText';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Message.Token.TokenTypeTimer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.Message.Token.TokenTypeTimer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Message.Token.TokenTypeTimer.displayName = 'proto.rv.data.Message.Token.TokenTypeTimer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Message.Token.TokenTypeClock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.Message.Token.TokenTypeClock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Message.Token.TokenTypeClock.displayName = 'proto.rv.data.Message.Token.TokenTypeClock';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Message.TokenValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rv.data.Message.TokenValue.oneofGroups_);
};
goog.inherits(proto.rv.data.Message.TokenValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Message.TokenValue.displayName = 'proto.rv.data.Message.TokenValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Message.TokenValue.TokenValueText = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.Message.TokenValue.TokenValueText, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Message.TokenValue.TokenValueText.displayName = 'proto.rv.data.Message.TokenValue.TokenValueText';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Message.TokenValue.TokenValueTimer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.Message.TokenValue.TokenValueTimer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Message.TokenValue.TokenValueTimer.displayName = 'proto.rv.data.Message.TokenValue.TokenValueTimer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Message.TokenValue.TokenValueClock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.Message.TokenValue.TokenValueClock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Message.TokenValue.TokenValueClock.displayName = 'proto.rv.data.Message.TokenValue.TokenValueClock';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rv.data.Message.repeatedFields_ = [11,12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
uuid: (f = msg.getUuid()) && proto.rv.data.UUID.toObject(includeInstance, f),
title: jspb.Message.getFieldWithDefault(msg, 2, ""),
timeToRemove: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
visibleOnNetwork: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
template: (f = msg.getTemplate()) && proto.rv.data.TemplateIdentification.toObject(includeInstance, f),
clearType: jspb.Message.getFieldWithDefault(msg, 9, 0),
messageText: jspb.Message.getFieldWithDefault(msg, 10, ""),
tokensList: jspb.Message.toObjectList(msg.getTokensList(),
    proto.rv.data.Message.Token.toObject, includeInstance),
tokenValuesList: jspb.Message.toObjectList(msg.getTokenValuesList(),
    proto.rv.data.Message.TokenValue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Message}
 */
proto.rv.data.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Message;
  return proto.rv.data.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Message}
 */
proto.rv.data.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.UUID;
      reader.readMessage(value,proto.rv.data.UUID.deserializeBinaryFromReader);
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTimeToRemove(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVisibleOnNetwork(value);
      break;
    case 6:
      var value = new proto.rv.data.TemplateIdentification;
      reader.readMessage(value,proto.rv.data.TemplateIdentification.deserializeBinaryFromReader);
      msg.setTemplate(value);
      break;
    case 9:
      var value = /** @type {!proto.rv.data.Message.ClearType} */ (reader.readEnum());
      msg.setClearType(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageText(value);
      break;
    case 11:
      var value = new proto.rv.data.Message.Token;
      reader.readMessage(value,proto.rv.data.Message.Token.deserializeBinaryFromReader);
      msg.addTokens(value);
      break;
    case 12:
      var value = new proto.rv.data.Message.TokenValue;
      reader.readMessage(value,proto.rv.data.Message.TokenValue.deserializeBinaryFromReader);
      msg.addTokenValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.UUID.serializeBinaryToWriter
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTimeToRemove();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getVisibleOnNetwork();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getTemplate();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.rv.data.TemplateIdentification.serializeBinaryToWriter
    );
  }
  f = message.getClearType();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getMessageText();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getTokensList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.rv.data.Message.Token.serializeBinaryToWriter
    );
  }
  f = message.getTokenValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.rv.data.Message.TokenValue.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.rv.data.Message.ClearType = {
  CLEAR_TYPE_MANUAL: 0,
  CLEAR_TYPE_AFTER_TIME: 1,
  CLEAR_TYPE_AFTER_TIMERS: 2
};


/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rv.data.Message.Token.oneofGroups_ = [[2,3,4]];

/**
 * @enum {number}
 */
proto.rv.data.Message.Token.TokentypeCase = {
  TOKENTYPE_NOT_SET: 0,
  TEXT: 2,
  TIMER: 3,
  CLOCK: 4
};

/**
 * @return {proto.rv.data.Message.Token.TokentypeCase}
 */
proto.rv.data.Message.Token.prototype.getTokentypeCase = function() {
  return /** @type {proto.rv.data.Message.Token.TokentypeCase} */(jspb.Message.computeOneofCase(this, proto.rv.data.Message.Token.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Message.Token.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Message.Token.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Message.Token} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Message.Token.toObject = function(includeInstance, msg) {
  var f, obj = {
uuid: (f = msg.getUuid()) && proto.rv.data.UUID.toObject(includeInstance, f),
text: (f = msg.getText()) && proto.rv.data.Message.Token.TokenTypeText.toObject(includeInstance, f),
timer: (f = msg.getTimer()) && proto.rv.data.Message.Token.TokenTypeTimer.toObject(includeInstance, f),
clock: (f = msg.getClock()) && proto.rv.data.Message.Token.TokenTypeClock.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Message.Token}
 */
proto.rv.data.Message.Token.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Message.Token;
  return proto.rv.data.Message.Token.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Message.Token} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Message.Token}
 */
proto.rv.data.Message.Token.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.UUID;
      reader.readMessage(value,proto.rv.data.UUID.deserializeBinaryFromReader);
      msg.setUuid(value);
      break;
    case 2:
      var value = new proto.rv.data.Message.Token.TokenTypeText;
      reader.readMessage(value,proto.rv.data.Message.Token.TokenTypeText.deserializeBinaryFromReader);
      msg.setText(value);
      break;
    case 3:
      var value = new proto.rv.data.Message.Token.TokenTypeTimer;
      reader.readMessage(value,proto.rv.data.Message.Token.TokenTypeTimer.deserializeBinaryFromReader);
      msg.setTimer(value);
      break;
    case 4:
      var value = new proto.rv.data.Message.Token.TokenTypeClock;
      reader.readMessage(value,proto.rv.data.Message.Token.TokenTypeClock.deserializeBinaryFromReader);
      msg.setClock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Message.Token.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Message.Token.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Message.Token} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Message.Token.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.UUID.serializeBinaryToWriter
    );
  }
  f = message.getText();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rv.data.Message.Token.TokenTypeText.serializeBinaryToWriter
    );
  }
  f = message.getTimer();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rv.data.Message.Token.TokenTypeTimer.serializeBinaryToWriter
    );
  }
  f = message.getClock();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rv.data.Message.Token.TokenTypeClock.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Message.Token.TokenTypeText.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Message.Token.TokenTypeText.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Message.Token.TokenTypeText} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Message.Token.TokenTypeText.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Message.Token.TokenTypeText}
 */
proto.rv.data.Message.Token.TokenTypeText.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Message.Token.TokenTypeText;
  return proto.rv.data.Message.Token.TokenTypeText.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Message.Token.TokenTypeText} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Message.Token.TokenTypeText}
 */
proto.rv.data.Message.Token.TokenTypeText.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Message.Token.TokenTypeText.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Message.Token.TokenTypeText.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Message.Token.TokenTypeText} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Message.Token.TokenTypeText.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.rv.data.Message.Token.TokenTypeText.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.Message.Token.TokenTypeText} returns this
 */
proto.rv.data.Message.Token.TokenTypeText.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Message.Token.TokenTypeTimer.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Message.Token.TokenTypeTimer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Message.Token.TokenTypeTimer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Message.Token.TokenTypeTimer.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, ""),
timerUuid: (f = msg.getTimerUuid()) && proto.rv.data.UUID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Message.Token.TokenTypeTimer}
 */
proto.rv.data.Message.Token.TokenTypeTimer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Message.Token.TokenTypeTimer;
  return proto.rv.data.Message.Token.TokenTypeTimer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Message.Token.TokenTypeTimer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Message.Token.TokenTypeTimer}
 */
proto.rv.data.Message.Token.TokenTypeTimer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.rv.data.UUID;
      reader.readMessage(value,proto.rv.data.UUID.deserializeBinaryFromReader);
      msg.setTimerUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Message.Token.TokenTypeTimer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Message.Token.TokenTypeTimer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Message.Token.TokenTypeTimer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Message.Token.TokenTypeTimer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTimerUuid();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rv.data.UUID.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.rv.data.Message.Token.TokenTypeTimer.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.Message.Token.TokenTypeTimer} returns this
 */
proto.rv.data.Message.Token.TokenTypeTimer.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional UUID timer_uuid = 2;
 * @return {?proto.rv.data.UUID}
 */
proto.rv.data.Message.Token.TokenTypeTimer.prototype.getTimerUuid = function() {
  return /** @type{?proto.rv.data.UUID} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.UUID, 2));
};


/**
 * @param {?proto.rv.data.UUID|undefined} value
 * @return {!proto.rv.data.Message.Token.TokenTypeTimer} returns this
*/
proto.rv.data.Message.Token.TokenTypeTimer.prototype.setTimerUuid = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Message.Token.TokenTypeTimer} returns this
 */
proto.rv.data.Message.Token.TokenTypeTimer.prototype.clearTimerUuid = function() {
  return this.setTimerUuid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Message.Token.TokenTypeTimer.prototype.hasTimerUuid = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Message.Token.TokenTypeClock.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Message.Token.TokenTypeClock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Message.Token.TokenTypeClock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Message.Token.TokenTypeClock.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Message.Token.TokenTypeClock}
 */
proto.rv.data.Message.Token.TokenTypeClock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Message.Token.TokenTypeClock;
  return proto.rv.data.Message.Token.TokenTypeClock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Message.Token.TokenTypeClock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Message.Token.TokenTypeClock}
 */
proto.rv.data.Message.Token.TokenTypeClock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Message.Token.TokenTypeClock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Message.Token.TokenTypeClock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Message.Token.TokenTypeClock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Message.Token.TokenTypeClock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * optional UUID uuid = 1;
 * @return {?proto.rv.data.UUID}
 */
proto.rv.data.Message.Token.prototype.getUuid = function() {
  return /** @type{?proto.rv.data.UUID} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.UUID, 1));
};


/**
 * @param {?proto.rv.data.UUID|undefined} value
 * @return {!proto.rv.data.Message.Token} returns this
*/
proto.rv.data.Message.Token.prototype.setUuid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Message.Token} returns this
 */
proto.rv.data.Message.Token.prototype.clearUuid = function() {
  return this.setUuid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Message.Token.prototype.hasUuid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TokenTypeText text = 2;
 * @return {?proto.rv.data.Message.Token.TokenTypeText}
 */
proto.rv.data.Message.Token.prototype.getText = function() {
  return /** @type{?proto.rv.data.Message.Token.TokenTypeText} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Message.Token.TokenTypeText, 2));
};


/**
 * @param {?proto.rv.data.Message.Token.TokenTypeText|undefined} value
 * @return {!proto.rv.data.Message.Token} returns this
*/
proto.rv.data.Message.Token.prototype.setText = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.rv.data.Message.Token.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Message.Token} returns this
 */
proto.rv.data.Message.Token.prototype.clearText = function() {
  return this.setText(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Message.Token.prototype.hasText = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TokenTypeTimer timer = 3;
 * @return {?proto.rv.data.Message.Token.TokenTypeTimer}
 */
proto.rv.data.Message.Token.prototype.getTimer = function() {
  return /** @type{?proto.rv.data.Message.Token.TokenTypeTimer} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Message.Token.TokenTypeTimer, 3));
};


/**
 * @param {?proto.rv.data.Message.Token.TokenTypeTimer|undefined} value
 * @return {!proto.rv.data.Message.Token} returns this
*/
proto.rv.data.Message.Token.prototype.setTimer = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.rv.data.Message.Token.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Message.Token} returns this
 */
proto.rv.data.Message.Token.prototype.clearTimer = function() {
  return this.setTimer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Message.Token.prototype.hasTimer = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TokenTypeClock clock = 4;
 * @return {?proto.rv.data.Message.Token.TokenTypeClock}
 */
proto.rv.data.Message.Token.prototype.getClock = function() {
  return /** @type{?proto.rv.data.Message.Token.TokenTypeClock} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Message.Token.TokenTypeClock, 4));
};


/**
 * @param {?proto.rv.data.Message.Token.TokenTypeClock|undefined} value
 * @return {!proto.rv.data.Message.Token} returns this
*/
proto.rv.data.Message.Token.prototype.setClock = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.rv.data.Message.Token.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Message.Token} returns this
 */
proto.rv.data.Message.Token.prototype.clearClock = function() {
  return this.setClock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Message.Token.prototype.hasClock = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rv.data.Message.TokenValue.oneofGroups_ = [[2,3,4]];

/**
 * @enum {number}
 */
proto.rv.data.Message.TokenValue.TokenvaluetypeCase = {
  TOKENVALUETYPE_NOT_SET: 0,
  TEXT: 2,
  TIMER: 3,
  CLOCK: 4
};

/**
 * @return {proto.rv.data.Message.TokenValue.TokenvaluetypeCase}
 */
proto.rv.data.Message.TokenValue.prototype.getTokenvaluetypeCase = function() {
  return /** @type {proto.rv.data.Message.TokenValue.TokenvaluetypeCase} */(jspb.Message.computeOneofCase(this, proto.rv.data.Message.TokenValue.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Message.TokenValue.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Message.TokenValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Message.TokenValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Message.TokenValue.toObject = function(includeInstance, msg) {
  var f, obj = {
tokenId: (f = msg.getTokenId()) && proto.rv.data.UUID.toObject(includeInstance, f),
tokenName: jspb.Message.getFieldWithDefault(msg, 5, ""),
text: (f = msg.getText()) && proto.rv.data.Message.TokenValue.TokenValueText.toObject(includeInstance, f),
timer: (f = msg.getTimer()) && proto.rv.data.Message.TokenValue.TokenValueTimer.toObject(includeInstance, f),
clock: (f = msg.getClock()) && proto.rv.data.Message.TokenValue.TokenValueClock.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Message.TokenValue}
 */
proto.rv.data.Message.TokenValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Message.TokenValue;
  return proto.rv.data.Message.TokenValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Message.TokenValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Message.TokenValue}
 */
proto.rv.data.Message.TokenValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.UUID;
      reader.readMessage(value,proto.rv.data.UUID.deserializeBinaryFromReader);
      msg.setTokenId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTokenName(value);
      break;
    case 2:
      var value = new proto.rv.data.Message.TokenValue.TokenValueText;
      reader.readMessage(value,proto.rv.data.Message.TokenValue.TokenValueText.deserializeBinaryFromReader);
      msg.setText(value);
      break;
    case 3:
      var value = new proto.rv.data.Message.TokenValue.TokenValueTimer;
      reader.readMessage(value,proto.rv.data.Message.TokenValue.TokenValueTimer.deserializeBinaryFromReader);
      msg.setTimer(value);
      break;
    case 4:
      var value = new proto.rv.data.Message.TokenValue.TokenValueClock;
      reader.readMessage(value,proto.rv.data.Message.TokenValue.TokenValueClock.deserializeBinaryFromReader);
      msg.setClock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Message.TokenValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Message.TokenValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Message.TokenValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Message.TokenValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTokenId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.UUID.serializeBinaryToWriter
    );
  }
  f = message.getTokenName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getText();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rv.data.Message.TokenValue.TokenValueText.serializeBinaryToWriter
    );
  }
  f = message.getTimer();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rv.data.Message.TokenValue.TokenValueTimer.serializeBinaryToWriter
    );
  }
  f = message.getClock();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rv.data.Message.TokenValue.TokenValueClock.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Message.TokenValue.TokenValueText.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Message.TokenValue.TokenValueText.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Message.TokenValue.TokenValueText} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Message.TokenValue.TokenValueText.toObject = function(includeInstance, msg) {
  var f, obj = {
value: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Message.TokenValue.TokenValueText}
 */
proto.rv.data.Message.TokenValue.TokenValueText.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Message.TokenValue.TokenValueText;
  return proto.rv.data.Message.TokenValue.TokenValueText.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Message.TokenValue.TokenValueText} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Message.TokenValue.TokenValueText}
 */
proto.rv.data.Message.TokenValue.TokenValueText.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Message.TokenValue.TokenValueText.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Message.TokenValue.TokenValueText.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Message.TokenValue.TokenValueText} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Message.TokenValue.TokenValueText.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string value = 1;
 * @return {string}
 */
proto.rv.data.Message.TokenValue.TokenValueText.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.Message.TokenValue.TokenValueText} returns this
 */
proto.rv.data.Message.TokenValue.TokenValueText.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Message.TokenValue.TokenValueTimer.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Message.TokenValue.TokenValueTimer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Message.TokenValue.TokenValueTimer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Message.TokenValue.TokenValueTimer.toObject = function(includeInstance, msg) {
  var f, obj = {
configuration: (f = msg.getConfiguration()) && proto.rv.data.Timer.Configuration.toObject(includeInstance, f),
format: (f = msg.getFormat()) && proto.rv.data.Timer.Format.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Message.TokenValue.TokenValueTimer}
 */
proto.rv.data.Message.TokenValue.TokenValueTimer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Message.TokenValue.TokenValueTimer;
  return proto.rv.data.Message.TokenValue.TokenValueTimer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Message.TokenValue.TokenValueTimer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Message.TokenValue.TokenValueTimer}
 */
proto.rv.data.Message.TokenValue.TokenValueTimer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.Timer.Configuration;
      reader.readMessage(value,proto.rv.data.Timer.Configuration.deserializeBinaryFromReader);
      msg.setConfiguration(value);
      break;
    case 2:
      var value = new proto.rv.data.Timer.Format;
      reader.readMessage(value,proto.rv.data.Timer.Format.deserializeBinaryFromReader);
      msg.setFormat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Message.TokenValue.TokenValueTimer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Message.TokenValue.TokenValueTimer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Message.TokenValue.TokenValueTimer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Message.TokenValue.TokenValueTimer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfiguration();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.Timer.Configuration.serializeBinaryToWriter
    );
  }
  f = message.getFormat();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rv.data.Timer.Format.serializeBinaryToWriter
    );
  }
};


/**
 * optional Timer.Configuration configuration = 1;
 * @return {?proto.rv.data.Timer.Configuration}
 */
proto.rv.data.Message.TokenValue.TokenValueTimer.prototype.getConfiguration = function() {
  return /** @type{?proto.rv.data.Timer.Configuration} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Timer.Configuration, 1));
};


/**
 * @param {?proto.rv.data.Timer.Configuration|undefined} value
 * @return {!proto.rv.data.Message.TokenValue.TokenValueTimer} returns this
*/
proto.rv.data.Message.TokenValue.TokenValueTimer.prototype.setConfiguration = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Message.TokenValue.TokenValueTimer} returns this
 */
proto.rv.data.Message.TokenValue.TokenValueTimer.prototype.clearConfiguration = function() {
  return this.setConfiguration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Message.TokenValue.TokenValueTimer.prototype.hasConfiguration = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Timer.Format format = 2;
 * @return {?proto.rv.data.Timer.Format}
 */
proto.rv.data.Message.TokenValue.TokenValueTimer.prototype.getFormat = function() {
  return /** @type{?proto.rv.data.Timer.Format} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Timer.Format, 2));
};


/**
 * @param {?proto.rv.data.Timer.Format|undefined} value
 * @return {!proto.rv.data.Message.TokenValue.TokenValueTimer} returns this
*/
proto.rv.data.Message.TokenValue.TokenValueTimer.prototype.setFormat = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Message.TokenValue.TokenValueTimer} returns this
 */
proto.rv.data.Message.TokenValue.TokenValueTimer.prototype.clearFormat = function() {
  return this.setFormat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Message.TokenValue.TokenValueTimer.prototype.hasFormat = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Message.TokenValue.TokenValueClock.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Message.TokenValue.TokenValueClock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Message.TokenValue.TokenValueClock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Message.TokenValue.TokenValueClock.toObject = function(includeInstance, msg) {
  var f, obj = {
format: (f = msg.getFormat()) && proto.rv.data.Clock.Format.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Message.TokenValue.TokenValueClock}
 */
proto.rv.data.Message.TokenValue.TokenValueClock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Message.TokenValue.TokenValueClock;
  return proto.rv.data.Message.TokenValue.TokenValueClock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Message.TokenValue.TokenValueClock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Message.TokenValue.TokenValueClock}
 */
proto.rv.data.Message.TokenValue.TokenValueClock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.Clock.Format;
      reader.readMessage(value,proto.rv.data.Clock.Format.deserializeBinaryFromReader);
      msg.setFormat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Message.TokenValue.TokenValueClock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Message.TokenValue.TokenValueClock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Message.TokenValue.TokenValueClock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Message.TokenValue.TokenValueClock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFormat();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.Clock.Format.serializeBinaryToWriter
    );
  }
};


/**
 * optional Clock.Format format = 1;
 * @return {?proto.rv.data.Clock.Format}
 */
proto.rv.data.Message.TokenValue.TokenValueClock.prototype.getFormat = function() {
  return /** @type{?proto.rv.data.Clock.Format} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Clock.Format, 1));
};


/**
 * @param {?proto.rv.data.Clock.Format|undefined} value
 * @return {!proto.rv.data.Message.TokenValue.TokenValueClock} returns this
*/
proto.rv.data.Message.TokenValue.TokenValueClock.prototype.setFormat = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Message.TokenValue.TokenValueClock} returns this
 */
proto.rv.data.Message.TokenValue.TokenValueClock.prototype.clearFormat = function() {
  return this.setFormat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Message.TokenValue.TokenValueClock.prototype.hasFormat = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional UUID token_id = 1;
 * @return {?proto.rv.data.UUID}
 */
proto.rv.data.Message.TokenValue.prototype.getTokenId = function() {
  return /** @type{?proto.rv.data.UUID} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.UUID, 1));
};


/**
 * @param {?proto.rv.data.UUID|undefined} value
 * @return {!proto.rv.data.Message.TokenValue} returns this
*/
proto.rv.data.Message.TokenValue.prototype.setTokenId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Message.TokenValue} returns this
 */
proto.rv.data.Message.TokenValue.prototype.clearTokenId = function() {
  return this.setTokenId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Message.TokenValue.prototype.hasTokenId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string token_name = 5;
 * @return {string}
 */
proto.rv.data.Message.TokenValue.prototype.getTokenName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.Message.TokenValue} returns this
 */
proto.rv.data.Message.TokenValue.prototype.setTokenName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional TokenValueText text = 2;
 * @return {?proto.rv.data.Message.TokenValue.TokenValueText}
 */
proto.rv.data.Message.TokenValue.prototype.getText = function() {
  return /** @type{?proto.rv.data.Message.TokenValue.TokenValueText} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Message.TokenValue.TokenValueText, 2));
};


/**
 * @param {?proto.rv.data.Message.TokenValue.TokenValueText|undefined} value
 * @return {!proto.rv.data.Message.TokenValue} returns this
*/
proto.rv.data.Message.TokenValue.prototype.setText = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.rv.data.Message.TokenValue.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Message.TokenValue} returns this
 */
proto.rv.data.Message.TokenValue.prototype.clearText = function() {
  return this.setText(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Message.TokenValue.prototype.hasText = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TokenValueTimer timer = 3;
 * @return {?proto.rv.data.Message.TokenValue.TokenValueTimer}
 */
proto.rv.data.Message.TokenValue.prototype.getTimer = function() {
  return /** @type{?proto.rv.data.Message.TokenValue.TokenValueTimer} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Message.TokenValue.TokenValueTimer, 3));
};


/**
 * @param {?proto.rv.data.Message.TokenValue.TokenValueTimer|undefined} value
 * @return {!proto.rv.data.Message.TokenValue} returns this
*/
proto.rv.data.Message.TokenValue.prototype.setTimer = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.rv.data.Message.TokenValue.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Message.TokenValue} returns this
 */
proto.rv.data.Message.TokenValue.prototype.clearTimer = function() {
  return this.setTimer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Message.TokenValue.prototype.hasTimer = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TokenValueClock clock = 4;
 * @return {?proto.rv.data.Message.TokenValue.TokenValueClock}
 */
proto.rv.data.Message.TokenValue.prototype.getClock = function() {
  return /** @type{?proto.rv.data.Message.TokenValue.TokenValueClock} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Message.TokenValue.TokenValueClock, 4));
};


/**
 * @param {?proto.rv.data.Message.TokenValue.TokenValueClock|undefined} value
 * @return {!proto.rv.data.Message.TokenValue} returns this
*/
proto.rv.data.Message.TokenValue.prototype.setClock = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.rv.data.Message.TokenValue.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Message.TokenValue} returns this
 */
proto.rv.data.Message.TokenValue.prototype.clearClock = function() {
  return this.setClock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Message.TokenValue.prototype.hasClock = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional UUID uuid = 1;
 * @return {?proto.rv.data.UUID}
 */
proto.rv.data.Message.prototype.getUuid = function() {
  return /** @type{?proto.rv.data.UUID} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.UUID, 1));
};


/**
 * @param {?proto.rv.data.UUID|undefined} value
 * @return {!proto.rv.data.Message} returns this
*/
proto.rv.data.Message.prototype.setUuid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Message} returns this
 */
proto.rv.data.Message.prototype.clearUuid = function() {
  return this.setUuid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Message.prototype.hasUuid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string title = 2;
 * @return {string}
 */
proto.rv.data.Message.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.Message} returns this
 */
proto.rv.data.Message.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional double time_to_remove = 3;
 * @return {number}
 */
proto.rv.data.Message.prototype.getTimeToRemove = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.Message} returns this
 */
proto.rv.data.Message.prototype.setTimeToRemove = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional bool visible_on_network = 4;
 * @return {boolean}
 */
proto.rv.data.Message.prototype.getVisibleOnNetwork = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.Message} returns this
 */
proto.rv.data.Message.prototype.setVisibleOnNetwork = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional TemplateIdentification template = 6;
 * @return {?proto.rv.data.TemplateIdentification}
 */
proto.rv.data.Message.prototype.getTemplate = function() {
  return /** @type{?proto.rv.data.TemplateIdentification} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TemplateIdentification, 6));
};


/**
 * @param {?proto.rv.data.TemplateIdentification|undefined} value
 * @return {!proto.rv.data.Message} returns this
*/
proto.rv.data.Message.prototype.setTemplate = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Message} returns this
 */
proto.rv.data.Message.prototype.clearTemplate = function() {
  return this.setTemplate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Message.prototype.hasTemplate = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ClearType clear_type = 9;
 * @return {!proto.rv.data.Message.ClearType}
 */
proto.rv.data.Message.prototype.getClearType = function() {
  return /** @type {!proto.rv.data.Message.ClearType} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.rv.data.Message.ClearType} value
 * @return {!proto.rv.data.Message} returns this
 */
proto.rv.data.Message.prototype.setClearType = function(value) {
  return jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional string message_text = 10;
 * @return {string}
 */
proto.rv.data.Message.prototype.getMessageText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.Message} returns this
 */
proto.rv.data.Message.prototype.setMessageText = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * repeated Token tokens = 11;
 * @return {!Array<!proto.rv.data.Message.Token>}
 */
proto.rv.data.Message.prototype.getTokensList = function() {
  return /** @type{!Array<!proto.rv.data.Message.Token>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rv.data.Message.Token, 11));
};


/**
 * @param {!Array<!proto.rv.data.Message.Token>} value
 * @return {!proto.rv.data.Message} returns this
*/
proto.rv.data.Message.prototype.setTokensList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.rv.data.Message.Token=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rv.data.Message.Token}
 */
proto.rv.data.Message.prototype.addTokens = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.rv.data.Message.Token, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.Message} returns this
 */
proto.rv.data.Message.prototype.clearTokensList = function() {
  return this.setTokensList([]);
};


/**
 * repeated TokenValue token_values = 12;
 * @return {!Array<!proto.rv.data.Message.TokenValue>}
 */
proto.rv.data.Message.prototype.getTokenValuesList = function() {
  return /** @type{!Array<!proto.rv.data.Message.TokenValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rv.data.Message.TokenValue, 12));
};


/**
 * @param {!Array<!proto.rv.data.Message.TokenValue>} value
 * @return {!proto.rv.data.Message} returns this
*/
proto.rv.data.Message.prototype.setTokenValuesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.rv.data.Message.TokenValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rv.data.Message.TokenValue}
 */
proto.rv.data.Message.prototype.addTokenValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.rv.data.Message.TokenValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.Message} returns this
 */
proto.rv.data.Message.prototype.clearTokenValuesList = function() {
  return this.setTokenValuesList([]);
};


