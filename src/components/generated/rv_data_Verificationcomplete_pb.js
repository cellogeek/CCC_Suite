// source: registration.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.registration.core.VerificationComplete');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.registration.core.Bibles');
goog.require('proto.registration.core.LicenseInfo');
goog.require('proto.registration.core.SubscriptionInfo');
goog.require('proto.registration.core.TokenMetadata');

goog.forwardDeclare('proto.registration.core.BannerMessage');
goog.forwardDeclare('proto.registration.core.PopupAlertMessage');
goog.forwardDeclare('proto.registration.core.Status');
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.registration.core.VerificationComplete = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.registration.core.VerificationComplete, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.registration.core.VerificationComplete.displayName = 'proto.registration.core.VerificationComplete';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.registration.core.VerificationComplete.prototype.toObject = function(opt_includeInstance) {
  return proto.registration.core.VerificationComplete.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.registration.core.VerificationComplete} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.registration.core.VerificationComplete.toObject = function(includeInstance, msg) {
  var f, obj = {
result: jspb.Message.getFieldWithDefault(msg, 1, 0),
license: (f = msg.getLicense()) && proto.registration.core.LicenseInfo.toObject(includeInstance, f),
bibles: (f = msg.getBibles()) && proto.registration.core.Bibles.toObject(includeInstance, f),
token: (f = msg.getToken()) && proto.registration.core.TokenMetadata.toObject(includeInstance, f),
subscriptionInfo: (f = msg.getSubscriptionInfo()) && proto.registration.core.SubscriptionInfo.toObject(includeInstance, f),
alert: jspb.Message.getFieldWithDefault(msg, 6, 0),
banner: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.registration.core.VerificationComplete}
 */
proto.registration.core.VerificationComplete.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.registration.core.VerificationComplete;
  return proto.registration.core.VerificationComplete.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.registration.core.VerificationComplete} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.registration.core.VerificationComplete}
 */
proto.registration.core.VerificationComplete.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.registration.core.Status} */ (reader.readEnum());
      msg.setResult(value);
      break;
    case 2:
      var value = new proto.registration.core.LicenseInfo;
      reader.readMessage(value,proto.registration.core.LicenseInfo.deserializeBinaryFromReader);
      msg.setLicense(value);
      break;
    case 3:
      var value = new proto.registration.core.Bibles;
      reader.readMessage(value,proto.registration.core.Bibles.deserializeBinaryFromReader);
      msg.setBibles(value);
      break;
    case 4:
      var value = new proto.registration.core.TokenMetadata;
      reader.readMessage(value,proto.registration.core.TokenMetadata.deserializeBinaryFromReader);
      msg.setToken(value);
      break;
    case 5:
      var value = new proto.registration.core.SubscriptionInfo;
      reader.readMessage(value,proto.registration.core.SubscriptionInfo.deserializeBinaryFromReader);
      msg.setSubscriptionInfo(value);
      break;
    case 6:
      var value = /** @type {!proto.registration.core.PopupAlertMessage} */ (reader.readEnum());
      msg.setAlert(value);
      break;
    case 7:
      var value = /** @type {!proto.registration.core.BannerMessage} */ (reader.readEnum());
      msg.setBanner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.registration.core.VerificationComplete.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.registration.core.VerificationComplete.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.registration.core.VerificationComplete} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.registration.core.VerificationComplete.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getLicense();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.registration.core.LicenseInfo.serializeBinaryToWriter
    );
  }
  f = message.getBibles();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.registration.core.Bibles.serializeBinaryToWriter
    );
  }
  f = message.getToken();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.registration.core.TokenMetadata.serializeBinaryToWriter
    );
  }
  f = message.getSubscriptionInfo();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.registration.core.SubscriptionInfo.serializeBinaryToWriter
    );
  }
  f = message.getAlert();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getBanner();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
};


/**
 * optional Status result = 1;
 * @return {!proto.registration.core.Status}
 */
proto.registration.core.VerificationComplete.prototype.getResult = function() {
  return /** @type {!proto.registration.core.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.registration.core.Status} value
 * @return {!proto.registration.core.VerificationComplete} returns this
 */
proto.registration.core.VerificationComplete.prototype.setResult = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional LicenseInfo license = 2;
 * @return {?proto.registration.core.LicenseInfo}
 */
proto.registration.core.VerificationComplete.prototype.getLicense = function() {
  return /** @type{?proto.registration.core.LicenseInfo} */ (
    jspb.Message.getWrapperField(this, proto.registration.core.LicenseInfo, 2));
};


/**
 * @param {?proto.registration.core.LicenseInfo|undefined} value
 * @return {!proto.registration.core.VerificationComplete} returns this
*/
proto.registration.core.VerificationComplete.prototype.setLicense = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.registration.core.VerificationComplete} returns this
 */
proto.registration.core.VerificationComplete.prototype.clearLicense = function() {
  return this.setLicense(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.registration.core.VerificationComplete.prototype.hasLicense = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Bibles bibles = 3;
 * @return {?proto.registration.core.Bibles}
 */
proto.registration.core.VerificationComplete.prototype.getBibles = function() {
  return /** @type{?proto.registration.core.Bibles} */ (
    jspb.Message.getWrapperField(this, proto.registration.core.Bibles, 3));
};


/**
 * @param {?proto.registration.core.Bibles|undefined} value
 * @return {!proto.registration.core.VerificationComplete} returns this
*/
proto.registration.core.VerificationComplete.prototype.setBibles = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.registration.core.VerificationComplete} returns this
 */
proto.registration.core.VerificationComplete.prototype.clearBibles = function() {
  return this.setBibles(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.registration.core.VerificationComplete.prototype.hasBibles = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TokenMetadata token = 4;
 * @return {?proto.registration.core.TokenMetadata}
 */
proto.registration.core.VerificationComplete.prototype.getToken = function() {
  return /** @type{?proto.registration.core.TokenMetadata} */ (
    jspb.Message.getWrapperField(this, proto.registration.core.TokenMetadata, 4));
};


/**
 * @param {?proto.registration.core.TokenMetadata|undefined} value
 * @return {!proto.registration.core.VerificationComplete} returns this
*/
proto.registration.core.VerificationComplete.prototype.setToken = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.registration.core.VerificationComplete} returns this
 */
proto.registration.core.VerificationComplete.prototype.clearToken = function() {
  return this.setToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.registration.core.VerificationComplete.prototype.hasToken = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional SubscriptionInfo subscription_info = 5;
 * @return {?proto.registration.core.SubscriptionInfo}
 */
proto.registration.core.VerificationComplete.prototype.getSubscriptionInfo = function() {
  return /** @type{?proto.registration.core.SubscriptionInfo} */ (
    jspb.Message.getWrapperField(this, proto.registration.core.SubscriptionInfo, 5));
};


/**
 * @param {?proto.registration.core.SubscriptionInfo|undefined} value
 * @return {!proto.registration.core.VerificationComplete} returns this
*/
proto.registration.core.VerificationComplete.prototype.setSubscriptionInfo = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.registration.core.VerificationComplete} returns this
 */
proto.registration.core.VerificationComplete.prototype.clearSubscriptionInfo = function() {
  return this.setSubscriptionInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.registration.core.VerificationComplete.prototype.hasSubscriptionInfo = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional PopupAlertMessage alert = 6;
 * @return {!proto.registration.core.PopupAlertMessage}
 */
proto.registration.core.VerificationComplete.prototype.getAlert = function() {
  return /** @type {!proto.registration.core.PopupAlertMessage} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.registration.core.PopupAlertMessage} value
 * @return {!proto.registration.core.VerificationComplete} returns this
 */
proto.registration.core.VerificationComplete.prototype.setAlert = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional BannerMessage banner = 7;
 * @return {!proto.registration.core.BannerMessage}
 */
proto.registration.core.VerificationComplete.prototype.getBanner = function() {
  return /** @type {!proto.registration.core.BannerMessage} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.registration.core.BannerMessage} value
 * @return {!proto.registration.core.VerificationComplete} returns this
 */
proto.registration.core.VerificationComplete.prototype.setBanner = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


