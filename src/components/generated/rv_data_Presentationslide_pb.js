// source: presentationSlide.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.rv.data.PresentationSlide');
goog.provide('proto.rv.data.PresentationSlide.Notes');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.rv.data.AlignmentGuide');
goog.require('proto.rv.data.Graphics.Text.Attributes');
goog.require('proto.rv.data.Slide');
goog.require('proto.rv.data.Transition');
goog.require('proto.rv.data.URL');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.PresentationSlide = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rv.data.PresentationSlide.repeatedFields_, null);
};
goog.inherits(proto.rv.data.PresentationSlide, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.PresentationSlide.displayName = 'proto.rv.data.PresentationSlide';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.PresentationSlide.Notes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.PresentationSlide.Notes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.PresentationSlide.Notes.displayName = 'proto.rv.data.PresentationSlide.Notes';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rv.data.PresentationSlide.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.PresentationSlide.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.PresentationSlide.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.PresentationSlide} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.PresentationSlide.toObject = function(includeInstance, msg) {
  var f, obj = {
baseSlide: (f = msg.getBaseSlide()) && proto.rv.data.Slide.toObject(includeInstance, f),
notes: (f = msg.getNotes()) && proto.rv.data.PresentationSlide.Notes.toObject(includeInstance, f),
templateGuidelinesList: jspb.Message.toObjectList(msg.getTemplateGuidelinesList(),
    proto.rv.data.AlignmentGuide.toObject, includeInstance),
chordChart: (f = msg.getChordChart()) && proto.rv.data.URL.toObject(includeInstance, f),
transition: (f = msg.getTransition()) && proto.rv.data.Transition.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.PresentationSlide}
 */
proto.rv.data.PresentationSlide.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.PresentationSlide;
  return proto.rv.data.PresentationSlide.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.PresentationSlide} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.PresentationSlide}
 */
proto.rv.data.PresentationSlide.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.Slide;
      reader.readMessage(value,proto.rv.data.Slide.deserializeBinaryFromReader);
      msg.setBaseSlide(value);
      break;
    case 2:
      var value = new proto.rv.data.PresentationSlide.Notes;
      reader.readMessage(value,proto.rv.data.PresentationSlide.Notes.deserializeBinaryFromReader);
      msg.setNotes(value);
      break;
    case 3:
      var value = new proto.rv.data.AlignmentGuide;
      reader.readMessage(value,proto.rv.data.AlignmentGuide.deserializeBinaryFromReader);
      msg.addTemplateGuidelines(value);
      break;
    case 4:
      var value = new proto.rv.data.URL;
      reader.readMessage(value,proto.rv.data.URL.deserializeBinaryFromReader);
      msg.setChordChart(value);
      break;
    case 5:
      var value = new proto.rv.data.Transition;
      reader.readMessage(value,proto.rv.data.Transition.deserializeBinaryFromReader);
      msg.setTransition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.PresentationSlide.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.PresentationSlide.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.PresentationSlide} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.PresentationSlide.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBaseSlide();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.Slide.serializeBinaryToWriter
    );
  }
  f = message.getNotes();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rv.data.PresentationSlide.Notes.serializeBinaryToWriter
    );
  }
  f = message.getTemplateGuidelinesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.rv.data.AlignmentGuide.serializeBinaryToWriter
    );
  }
  f = message.getChordChart();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rv.data.URL.serializeBinaryToWriter
    );
  }
  f = message.getTransition();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.rv.data.Transition.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.PresentationSlide.Notes.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.PresentationSlide.Notes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.PresentationSlide.Notes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.PresentationSlide.Notes.toObject = function(includeInstance, msg) {
  var f, obj = {
rtfData: msg.getRtfData_asB64(),
attributes: (f = msg.getAttributes()) && proto.rv.data.Graphics.Text.Attributes.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.PresentationSlide.Notes}
 */
proto.rv.data.PresentationSlide.Notes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.PresentationSlide.Notes;
  return proto.rv.data.PresentationSlide.Notes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.PresentationSlide.Notes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.PresentationSlide.Notes}
 */
proto.rv.data.PresentationSlide.Notes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRtfData(value);
      break;
    case 2:
      var value = new proto.rv.data.Graphics.Text.Attributes;
      reader.readMessage(value,proto.rv.data.Graphics.Text.Attributes.deserializeBinaryFromReader);
      msg.setAttributes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.PresentationSlide.Notes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.PresentationSlide.Notes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.PresentationSlide.Notes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.PresentationSlide.Notes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRtfData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAttributes();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rv.data.Graphics.Text.Attributes.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes rtf_data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.rv.data.PresentationSlide.Notes.prototype.getRtfData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes rtf_data = 1;
 * This is a type-conversion wrapper around `getRtfData()`
 * @return {string}
 */
proto.rv.data.PresentationSlide.Notes.prototype.getRtfData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRtfData()));
};


/**
 * optional bytes rtf_data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRtfData()`
 * @return {!Uint8Array}
 */
proto.rv.data.PresentationSlide.Notes.prototype.getRtfData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRtfData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rv.data.PresentationSlide.Notes} returns this
 */
proto.rv.data.PresentationSlide.Notes.prototype.setRtfData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional Graphics.Text.Attributes attributes = 2;
 * @return {?proto.rv.data.Graphics.Text.Attributes}
 */
proto.rv.data.PresentationSlide.Notes.prototype.getAttributes = function() {
  return /** @type{?proto.rv.data.Graphics.Text.Attributes} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Graphics.Text.Attributes, 2));
};


/**
 * @param {?proto.rv.data.Graphics.Text.Attributes|undefined} value
 * @return {!proto.rv.data.PresentationSlide.Notes} returns this
*/
proto.rv.data.PresentationSlide.Notes.prototype.setAttributes = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.PresentationSlide.Notes} returns this
 */
proto.rv.data.PresentationSlide.Notes.prototype.clearAttributes = function() {
  return this.setAttributes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.PresentationSlide.Notes.prototype.hasAttributes = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Slide base_slide = 1;
 * @return {?proto.rv.data.Slide}
 */
proto.rv.data.PresentationSlide.prototype.getBaseSlide = function() {
  return /** @type{?proto.rv.data.Slide} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Slide, 1));
};


/**
 * @param {?proto.rv.data.Slide|undefined} value
 * @return {!proto.rv.data.PresentationSlide} returns this
*/
proto.rv.data.PresentationSlide.prototype.setBaseSlide = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.PresentationSlide} returns this
 */
proto.rv.data.PresentationSlide.prototype.clearBaseSlide = function() {
  return this.setBaseSlide(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.PresentationSlide.prototype.hasBaseSlide = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Notes notes = 2;
 * @return {?proto.rv.data.PresentationSlide.Notes}
 */
proto.rv.data.PresentationSlide.prototype.getNotes = function() {
  return /** @type{?proto.rv.data.PresentationSlide.Notes} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.PresentationSlide.Notes, 2));
};


/**
 * @param {?proto.rv.data.PresentationSlide.Notes|undefined} value
 * @return {!proto.rv.data.PresentationSlide} returns this
*/
proto.rv.data.PresentationSlide.prototype.setNotes = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.PresentationSlide} returns this
 */
proto.rv.data.PresentationSlide.prototype.clearNotes = function() {
  return this.setNotes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.PresentationSlide.prototype.hasNotes = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated AlignmentGuide template_guidelines = 3;
 * @return {!Array<!proto.rv.data.AlignmentGuide>}
 */
proto.rv.data.PresentationSlide.prototype.getTemplateGuidelinesList = function() {
  return /** @type{!Array<!proto.rv.data.AlignmentGuide>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rv.data.AlignmentGuide, 3));
};


/**
 * @param {!Array<!proto.rv.data.AlignmentGuide>} value
 * @return {!proto.rv.data.PresentationSlide} returns this
*/
proto.rv.data.PresentationSlide.prototype.setTemplateGuidelinesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.rv.data.AlignmentGuide=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rv.data.AlignmentGuide}
 */
proto.rv.data.PresentationSlide.prototype.addTemplateGuidelines = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.rv.data.AlignmentGuide, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.PresentationSlide} returns this
 */
proto.rv.data.PresentationSlide.prototype.clearTemplateGuidelinesList = function() {
  return this.setTemplateGuidelinesList([]);
};


/**
 * optional URL chord_chart = 4;
 * @return {?proto.rv.data.URL}
 */
proto.rv.data.PresentationSlide.prototype.getChordChart = function() {
  return /** @type{?proto.rv.data.URL} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.URL, 4));
};


/**
 * @param {?proto.rv.data.URL|undefined} value
 * @return {!proto.rv.data.PresentationSlide} returns this
*/
proto.rv.data.PresentationSlide.prototype.setChordChart = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.PresentationSlide} returns this
 */
proto.rv.data.PresentationSlide.prototype.clearChordChart = function() {
  return this.setChordChart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.PresentationSlide.prototype.hasChordChart = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Transition transition = 5;
 * @return {?proto.rv.data.Transition}
 */
proto.rv.data.PresentationSlide.prototype.getTransition = function() {
  return /** @type{?proto.rv.data.Transition} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Transition, 5));
};


/**
 * @param {?proto.rv.data.Transition|undefined} value
 * @return {!proto.rv.data.PresentationSlide} returns this
*/
proto.rv.data.PresentationSlide.prototype.setTransition = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.PresentationSlide} returns this
 */
proto.rv.data.PresentationSlide.prototype.clearTransition = function() {
  return this.setTransition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.PresentationSlide.prototype.hasTransition = function() {
  return jspb.Message.getField(this, 5) != null;
};


