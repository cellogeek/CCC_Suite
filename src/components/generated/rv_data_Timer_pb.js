// source: timers.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.rv.data.Timer');
goog.provide('proto.rv.data.Timer.Configuration');
goog.provide('proto.rv.data.Timer.Configuration.TimerTypeCountdown');
goog.provide('proto.rv.data.Timer.Configuration.TimerTypeCountdownToTime');
goog.provide('proto.rv.data.Timer.Configuration.TimerTypeCountdownToTime.TimePeriod');
goog.provide('proto.rv.data.Timer.Configuration.TimerTypeElapsedTime');
goog.provide('proto.rv.data.Timer.Configuration.TimertypeCase');
goog.provide('proto.rv.data.Timer.Format');
goog.provide('proto.rv.data.Timer.Format.Style');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.rv.data.UUID');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Timer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.Timer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Timer.displayName = 'proto.rv.data.Timer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Timer.Format = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.Timer.Format, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Timer.Format.displayName = 'proto.rv.data.Timer.Format';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Timer.Configuration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rv.data.Timer.Configuration.oneofGroups_);
};
goog.inherits(proto.rv.data.Timer.Configuration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Timer.Configuration.displayName = 'proto.rv.data.Timer.Configuration';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Timer.Configuration.TimerTypeCountdown = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.Timer.Configuration.TimerTypeCountdown, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Timer.Configuration.TimerTypeCountdown.displayName = 'proto.rv.data.Timer.Configuration.TimerTypeCountdown';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Timer.Configuration.TimerTypeCountdownToTime = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.Timer.Configuration.TimerTypeCountdownToTime, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Timer.Configuration.TimerTypeCountdownToTime.displayName = 'proto.rv.data.Timer.Configuration.TimerTypeCountdownToTime';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Timer.Configuration.TimerTypeElapsedTime = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.Timer.Configuration.TimerTypeElapsedTime, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Timer.Configuration.TimerTypeElapsedTime.displayName = 'proto.rv.data.Timer.Configuration.TimerTypeElapsedTime';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Timer.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Timer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Timer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Timer.toObject = function(includeInstance, msg) {
  var f, obj = {
uuid: (f = msg.getUuid()) && proto.rv.data.UUID.toObject(includeInstance, f),
name: jspb.Message.getFieldWithDefault(msg, 2, ""),
configuration: (f = msg.getConfiguration()) && proto.rv.data.Timer.Configuration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Timer}
 */
proto.rv.data.Timer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Timer;
  return proto.rv.data.Timer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Timer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Timer}
 */
proto.rv.data.Timer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.UUID;
      reader.readMessage(value,proto.rv.data.UUID.deserializeBinaryFromReader);
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 10:
      var value = new proto.rv.data.Timer.Configuration;
      reader.readMessage(value,proto.rv.data.Timer.Configuration.deserializeBinaryFromReader);
      msg.setConfiguration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Timer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Timer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Timer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Timer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.UUID.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getConfiguration();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.rv.data.Timer.Configuration.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Timer.Format.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Timer.Format.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Timer.Format} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Timer.Format.toObject = function(includeInstance, msg) {
  var f, obj = {
hour: jspb.Message.getFieldWithDefault(msg, 1, 0),
minute: jspb.Message.getFieldWithDefault(msg, 2, 0),
second: jspb.Message.getFieldWithDefault(msg, 3, 0),
millisecond: jspb.Message.getFieldWithDefault(msg, 4, 0),
isWallClockTime: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
is24HourTime: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
showMillisecondsUnderMinuteOnly: jspb.Message.getBooleanFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Timer.Format}
 */
proto.rv.data.Timer.Format.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Timer.Format;
  return proto.rv.data.Timer.Format.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Timer.Format} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Timer.Format}
 */
proto.rv.data.Timer.Format.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.rv.data.Timer.Format.Style} */ (reader.readEnum());
      msg.setHour(value);
      break;
    case 2:
      var value = /** @type {!proto.rv.data.Timer.Format.Style} */ (reader.readEnum());
      msg.setMinute(value);
      break;
    case 3:
      var value = /** @type {!proto.rv.data.Timer.Format.Style} */ (reader.readEnum());
      msg.setSecond(value);
      break;
    case 4:
      var value = /** @type {!proto.rv.data.Timer.Format.Style} */ (reader.readEnum());
      msg.setMillisecond(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsWallClockTime(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIs24HourTime(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShowMillisecondsUnderMinuteOnly(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Timer.Format.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Timer.Format.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Timer.Format} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Timer.Format.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHour();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMinute();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getSecond();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getMillisecond();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getIsWallClockTime();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getIs24HourTime();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getShowMillisecondsUnderMinuteOnly();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.rv.data.Timer.Format.Style = {
  STYE_NONE: 0,
  STYLE_SHORT: 1,
  STYLE_LONG: 2,
  STYLE_REMOVE_SHORT: 3,
  STYLE_REMOVE_LONG: 4
};

/**
 * optional Style hour = 1;
 * @return {!proto.rv.data.Timer.Format.Style}
 */
proto.rv.data.Timer.Format.prototype.getHour = function() {
  return /** @type {!proto.rv.data.Timer.Format.Style} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.rv.data.Timer.Format.Style} value
 * @return {!proto.rv.data.Timer.Format} returns this
 */
proto.rv.data.Timer.Format.prototype.setHour = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Style minute = 2;
 * @return {!proto.rv.data.Timer.Format.Style}
 */
proto.rv.data.Timer.Format.prototype.getMinute = function() {
  return /** @type {!proto.rv.data.Timer.Format.Style} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.rv.data.Timer.Format.Style} value
 * @return {!proto.rv.data.Timer.Format} returns this
 */
proto.rv.data.Timer.Format.prototype.setMinute = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Style second = 3;
 * @return {!proto.rv.data.Timer.Format.Style}
 */
proto.rv.data.Timer.Format.prototype.getSecond = function() {
  return /** @type {!proto.rv.data.Timer.Format.Style} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.rv.data.Timer.Format.Style} value
 * @return {!proto.rv.data.Timer.Format} returns this
 */
proto.rv.data.Timer.Format.prototype.setSecond = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional Style millisecond = 4;
 * @return {!proto.rv.data.Timer.Format.Style}
 */
proto.rv.data.Timer.Format.prototype.getMillisecond = function() {
  return /** @type {!proto.rv.data.Timer.Format.Style} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.rv.data.Timer.Format.Style} value
 * @return {!proto.rv.data.Timer.Format} returns this
 */
proto.rv.data.Timer.Format.prototype.setMillisecond = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional bool is_wall_clock_time = 5;
 * @return {boolean}
 */
proto.rv.data.Timer.Format.prototype.getIsWallClockTime = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.Timer.Format} returns this
 */
proto.rv.data.Timer.Format.prototype.setIsWallClockTime = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool is_24_hour_time = 6;
 * @return {boolean}
 */
proto.rv.data.Timer.Format.prototype.getIs24HourTime = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.Timer.Format} returns this
 */
proto.rv.data.Timer.Format.prototype.setIs24HourTime = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool show_milliseconds_under_minute_only = 7;
 * @return {boolean}
 */
proto.rv.data.Timer.Format.prototype.getShowMillisecondsUnderMinuteOnly = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.Timer.Format} returns this
 */
proto.rv.data.Timer.Format.prototype.setShowMillisecondsUnderMinuteOnly = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rv.data.Timer.Configuration.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.rv.data.Timer.Configuration.TimertypeCase = {
  TIMERTYPE_NOT_SET: 0,
  COUNTDOWN: 1,
  COUNTDOWN_TO_TIME: 2,
  ELAPSED_TIME: 3
};

/**
 * @return {proto.rv.data.Timer.Configuration.TimertypeCase}
 */
proto.rv.data.Timer.Configuration.prototype.getTimertypeCase = function() {
  return /** @type {proto.rv.data.Timer.Configuration.TimertypeCase} */(jspb.Message.computeOneofCase(this, proto.rv.data.Timer.Configuration.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Timer.Configuration.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Timer.Configuration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Timer.Configuration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Timer.Configuration.toObject = function(includeInstance, msg) {
  var f, obj = {
allowsOverrun: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
countdown: (f = msg.getCountdown()) && proto.rv.data.Timer.Configuration.TimerTypeCountdown.toObject(includeInstance, f),
countdownToTime: (f = msg.getCountdownToTime()) && proto.rv.data.Timer.Configuration.TimerTypeCountdownToTime.toObject(includeInstance, f),
elapsedTime: (f = msg.getElapsedTime()) && proto.rv.data.Timer.Configuration.TimerTypeElapsedTime.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Timer.Configuration}
 */
proto.rv.data.Timer.Configuration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Timer.Configuration;
  return proto.rv.data.Timer.Configuration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Timer.Configuration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Timer.Configuration}
 */
proto.rv.data.Timer.Configuration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowsOverrun(value);
      break;
    case 1:
      var value = new proto.rv.data.Timer.Configuration.TimerTypeCountdown;
      reader.readMessage(value,proto.rv.data.Timer.Configuration.TimerTypeCountdown.deserializeBinaryFromReader);
      msg.setCountdown(value);
      break;
    case 2:
      var value = new proto.rv.data.Timer.Configuration.TimerTypeCountdownToTime;
      reader.readMessage(value,proto.rv.data.Timer.Configuration.TimerTypeCountdownToTime.deserializeBinaryFromReader);
      msg.setCountdownToTime(value);
      break;
    case 3:
      var value = new proto.rv.data.Timer.Configuration.TimerTypeElapsedTime;
      reader.readMessage(value,proto.rv.data.Timer.Configuration.TimerTypeElapsedTime.deserializeBinaryFromReader);
      msg.setElapsedTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Timer.Configuration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Timer.Configuration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Timer.Configuration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Timer.Configuration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAllowsOverrun();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getCountdown();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.Timer.Configuration.TimerTypeCountdown.serializeBinaryToWriter
    );
  }
  f = message.getCountdownToTime();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rv.data.Timer.Configuration.TimerTypeCountdownToTime.serializeBinaryToWriter
    );
  }
  f = message.getElapsedTime();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rv.data.Timer.Configuration.TimerTypeElapsedTime.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Timer.Configuration.TimerTypeCountdown.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Timer.Configuration.TimerTypeCountdown.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Timer.Configuration.TimerTypeCountdown} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Timer.Configuration.TimerTypeCountdown.toObject = function(includeInstance, msg) {
  var f, obj = {
duration: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Timer.Configuration.TimerTypeCountdown}
 */
proto.rv.data.Timer.Configuration.TimerTypeCountdown.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Timer.Configuration.TimerTypeCountdown;
  return proto.rv.data.Timer.Configuration.TimerTypeCountdown.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Timer.Configuration.TimerTypeCountdown} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Timer.Configuration.TimerTypeCountdown}
 */
proto.rv.data.Timer.Configuration.TimerTypeCountdown.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDuration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Timer.Configuration.TimerTypeCountdown.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Timer.Configuration.TimerTypeCountdown.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Timer.Configuration.TimerTypeCountdown} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Timer.Configuration.TimerTypeCountdown.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDuration();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
};


/**
 * optional double duration = 1;
 * @return {number}
 */
proto.rv.data.Timer.Configuration.TimerTypeCountdown.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.Timer.Configuration.TimerTypeCountdown} returns this
 */
proto.rv.data.Timer.Configuration.TimerTypeCountdown.prototype.setDuration = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Timer.Configuration.TimerTypeCountdownToTime.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Timer.Configuration.TimerTypeCountdownToTime.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Timer.Configuration.TimerTypeCountdownToTime} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Timer.Configuration.TimerTypeCountdownToTime.toObject = function(includeInstance, msg) {
  var f, obj = {
timeOfDay: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
period: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Timer.Configuration.TimerTypeCountdownToTime}
 */
proto.rv.data.Timer.Configuration.TimerTypeCountdownToTime.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Timer.Configuration.TimerTypeCountdownToTime;
  return proto.rv.data.Timer.Configuration.TimerTypeCountdownToTime.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Timer.Configuration.TimerTypeCountdownToTime} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Timer.Configuration.TimerTypeCountdownToTime}
 */
proto.rv.data.Timer.Configuration.TimerTypeCountdownToTime.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTimeOfDay(value);
      break;
    case 2:
      var value = /** @type {!proto.rv.data.Timer.Configuration.TimerTypeCountdownToTime.TimePeriod} */ (reader.readEnum());
      msg.setPeriod(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Timer.Configuration.TimerTypeCountdownToTime.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Timer.Configuration.TimerTypeCountdownToTime.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Timer.Configuration.TimerTypeCountdownToTime} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Timer.Configuration.TimerTypeCountdownToTime.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimeOfDay();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getPeriod();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.rv.data.Timer.Configuration.TimerTypeCountdownToTime.TimePeriod = {
  TIME_PERIOD_AM: 0,
  TIME_PERIOD_PM: 1,
  TIME_PERIOD_24: 2
};

/**
 * optional double time_of_day = 1;
 * @return {number}
 */
proto.rv.data.Timer.Configuration.TimerTypeCountdownToTime.prototype.getTimeOfDay = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.Timer.Configuration.TimerTypeCountdownToTime} returns this
 */
proto.rv.data.Timer.Configuration.TimerTypeCountdownToTime.prototype.setTimeOfDay = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional TimePeriod period = 2;
 * @return {!proto.rv.data.Timer.Configuration.TimerTypeCountdownToTime.TimePeriod}
 */
proto.rv.data.Timer.Configuration.TimerTypeCountdownToTime.prototype.getPeriod = function() {
  return /** @type {!proto.rv.data.Timer.Configuration.TimerTypeCountdownToTime.TimePeriod} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.rv.data.Timer.Configuration.TimerTypeCountdownToTime.TimePeriod} value
 * @return {!proto.rv.data.Timer.Configuration.TimerTypeCountdownToTime} returns this
 */
proto.rv.data.Timer.Configuration.TimerTypeCountdownToTime.prototype.setPeriod = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Timer.Configuration.TimerTypeElapsedTime.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Timer.Configuration.TimerTypeElapsedTime.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Timer.Configuration.TimerTypeElapsedTime} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Timer.Configuration.TimerTypeElapsedTime.toObject = function(includeInstance, msg) {
  var f, obj = {
startTime: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
endTime: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
hasEndTime: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Timer.Configuration.TimerTypeElapsedTime}
 */
proto.rv.data.Timer.Configuration.TimerTypeElapsedTime.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Timer.Configuration.TimerTypeElapsedTime;
  return proto.rv.data.Timer.Configuration.TimerTypeElapsedTime.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Timer.Configuration.TimerTypeElapsedTime} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Timer.Configuration.TimerTypeElapsedTime}
 */
proto.rv.data.Timer.Configuration.TimerTypeElapsedTime.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStartTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEndTime(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasEndTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Timer.Configuration.TimerTypeElapsedTime.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Timer.Configuration.TimerTypeElapsedTime.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Timer.Configuration.TimerTypeElapsedTime} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Timer.Configuration.TimerTypeElapsedTime.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartTime();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getEndTime();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getHasEndTime();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional double start_time = 1;
 * @return {number}
 */
proto.rv.data.Timer.Configuration.TimerTypeElapsedTime.prototype.getStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.Timer.Configuration.TimerTypeElapsedTime} returns this
 */
proto.rv.data.Timer.Configuration.TimerTypeElapsedTime.prototype.setStartTime = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double end_time = 2;
 * @return {number}
 */
proto.rv.data.Timer.Configuration.TimerTypeElapsedTime.prototype.getEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.Timer.Configuration.TimerTypeElapsedTime} returns this
 */
proto.rv.data.Timer.Configuration.TimerTypeElapsedTime.prototype.setEndTime = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional bool has_end_time = 3;
 * @return {boolean}
 */
proto.rv.data.Timer.Configuration.TimerTypeElapsedTime.prototype.getHasEndTime = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.Timer.Configuration.TimerTypeElapsedTime} returns this
 */
proto.rv.data.Timer.Configuration.TimerTypeElapsedTime.prototype.setHasEndTime = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool allows_overrun = 4;
 * @return {boolean}
 */
proto.rv.data.Timer.Configuration.prototype.getAllowsOverrun = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.Timer.Configuration} returns this
 */
proto.rv.data.Timer.Configuration.prototype.setAllowsOverrun = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional TimerTypeCountdown countdown = 1;
 * @return {?proto.rv.data.Timer.Configuration.TimerTypeCountdown}
 */
proto.rv.data.Timer.Configuration.prototype.getCountdown = function() {
  return /** @type{?proto.rv.data.Timer.Configuration.TimerTypeCountdown} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Timer.Configuration.TimerTypeCountdown, 1));
};


/**
 * @param {?proto.rv.data.Timer.Configuration.TimerTypeCountdown|undefined} value
 * @return {!proto.rv.data.Timer.Configuration} returns this
*/
proto.rv.data.Timer.Configuration.prototype.setCountdown = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.rv.data.Timer.Configuration.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Timer.Configuration} returns this
 */
proto.rv.data.Timer.Configuration.prototype.clearCountdown = function() {
  return this.setCountdown(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Timer.Configuration.prototype.hasCountdown = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TimerTypeCountdownToTime countdown_to_time = 2;
 * @return {?proto.rv.data.Timer.Configuration.TimerTypeCountdownToTime}
 */
proto.rv.data.Timer.Configuration.prototype.getCountdownToTime = function() {
  return /** @type{?proto.rv.data.Timer.Configuration.TimerTypeCountdownToTime} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Timer.Configuration.TimerTypeCountdownToTime, 2));
};


/**
 * @param {?proto.rv.data.Timer.Configuration.TimerTypeCountdownToTime|undefined} value
 * @return {!proto.rv.data.Timer.Configuration} returns this
*/
proto.rv.data.Timer.Configuration.prototype.setCountdownToTime = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.rv.data.Timer.Configuration.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Timer.Configuration} returns this
 */
proto.rv.data.Timer.Configuration.prototype.clearCountdownToTime = function() {
  return this.setCountdownToTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Timer.Configuration.prototype.hasCountdownToTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TimerTypeElapsedTime elapsed_time = 3;
 * @return {?proto.rv.data.Timer.Configuration.TimerTypeElapsedTime}
 */
proto.rv.data.Timer.Configuration.prototype.getElapsedTime = function() {
  return /** @type{?proto.rv.data.Timer.Configuration.TimerTypeElapsedTime} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Timer.Configuration.TimerTypeElapsedTime, 3));
};


/**
 * @param {?proto.rv.data.Timer.Configuration.TimerTypeElapsedTime|undefined} value
 * @return {!proto.rv.data.Timer.Configuration} returns this
*/
proto.rv.data.Timer.Configuration.prototype.setElapsedTime = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.rv.data.Timer.Configuration.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Timer.Configuration} returns this
 */
proto.rv.data.Timer.Configuration.prototype.clearElapsedTime = function() {
  return this.setElapsedTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Timer.Configuration.prototype.hasElapsedTime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional UUID uuid = 1;
 * @return {?proto.rv.data.UUID}
 */
proto.rv.data.Timer.prototype.getUuid = function() {
  return /** @type{?proto.rv.data.UUID} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.UUID, 1));
};


/**
 * @param {?proto.rv.data.UUID|undefined} value
 * @return {!proto.rv.data.Timer} returns this
*/
proto.rv.data.Timer.prototype.setUuid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Timer} returns this
 */
proto.rv.data.Timer.prototype.clearUuid = function() {
  return this.setUuid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Timer.prototype.hasUuid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.rv.data.Timer.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.Timer} returns this
 */
proto.rv.data.Timer.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Configuration configuration = 10;
 * @return {?proto.rv.data.Timer.Configuration}
 */
proto.rv.data.Timer.prototype.getConfiguration = function() {
  return /** @type{?proto.rv.data.Timer.Configuration} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Timer.Configuration, 10));
};


/**
 * @param {?proto.rv.data.Timer.Configuration|undefined} value
 * @return {!proto.rv.data.Timer} returns this
*/
proto.rv.data.Timer.prototype.setConfiguration = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Timer} returns this
 */
proto.rv.data.Timer.prototype.clearConfiguration = function() {
  return this.setConfiguration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Timer.prototype.hasConfiguration = function() {
  return jspb.Message.getField(this, 10) != null;
};


