// source: screens.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.rv.data.EdgeBlend');
goog.provide('proto.rv.data.EdgeBlend.Mode');
goog.provide('proto.rv.data.EdgeBlend.Screen');
goog.provide('proto.rv.data.EdgeBlend.Screen.Edge');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.rv.data.UUID');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.EdgeBlend = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.EdgeBlend, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.EdgeBlend.displayName = 'proto.rv.data.EdgeBlend';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.EdgeBlend.Screen = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.EdgeBlend.Screen, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.EdgeBlend.Screen.displayName = 'proto.rv.data.EdgeBlend.Screen';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.EdgeBlend.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.EdgeBlend.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.EdgeBlend} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.EdgeBlend.toObject = function(includeInstance, msg) {
  var f, obj = {
uuid: (f = msg.getUuid()) && proto.rv.data.UUID.toObject(includeInstance, f),
radius: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
intensity: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
mode: jspb.Message.getFieldWithDefault(msg, 4, 0),
firstScreen: (f = msg.getFirstScreen()) && proto.rv.data.EdgeBlend.Screen.toObject(includeInstance, f),
secondScreen: (f = msg.getSecondScreen()) && proto.rv.data.EdgeBlend.Screen.toObject(includeInstance, f),
leftScreen: (f = msg.getLeftScreen()) && proto.rv.data.EdgeBlend.Screen.toObject(includeInstance, f),
rightScreen: (f = msg.getRightScreen()) && proto.rv.data.EdgeBlend.Screen.toObject(includeInstance, f),
topScreen: (f = msg.getTopScreen()) && proto.rv.data.EdgeBlend.Screen.toObject(includeInstance, f),
bottomScreen: (f = msg.getBottomScreen()) && proto.rv.data.EdgeBlend.Screen.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.EdgeBlend}
 */
proto.rv.data.EdgeBlend.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.EdgeBlend;
  return proto.rv.data.EdgeBlend.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.EdgeBlend} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.EdgeBlend}
 */
proto.rv.data.EdgeBlend.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.UUID;
      reader.readMessage(value,proto.rv.data.UUID.deserializeBinaryFromReader);
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRadius(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setIntensity(value);
      break;
    case 4:
      var value = /** @type {!proto.rv.data.EdgeBlend.Mode} */ (reader.readEnum());
      msg.setMode(value);
      break;
    case 5:
      var value = new proto.rv.data.EdgeBlend.Screen;
      reader.readMessage(value,proto.rv.data.EdgeBlend.Screen.deserializeBinaryFromReader);
      msg.setFirstScreen(value);
      break;
    case 6:
      var value = new proto.rv.data.EdgeBlend.Screen;
      reader.readMessage(value,proto.rv.data.EdgeBlend.Screen.deserializeBinaryFromReader);
      msg.setSecondScreen(value);
      break;
    case 7:
      var value = new proto.rv.data.EdgeBlend.Screen;
      reader.readMessage(value,proto.rv.data.EdgeBlend.Screen.deserializeBinaryFromReader);
      msg.setLeftScreen(value);
      break;
    case 8:
      var value = new proto.rv.data.EdgeBlend.Screen;
      reader.readMessage(value,proto.rv.data.EdgeBlend.Screen.deserializeBinaryFromReader);
      msg.setRightScreen(value);
      break;
    case 9:
      var value = new proto.rv.data.EdgeBlend.Screen;
      reader.readMessage(value,proto.rv.data.EdgeBlend.Screen.deserializeBinaryFromReader);
      msg.setTopScreen(value);
      break;
    case 10:
      var value = new proto.rv.data.EdgeBlend.Screen;
      reader.readMessage(value,proto.rv.data.EdgeBlend.Screen.deserializeBinaryFromReader);
      msg.setBottomScreen(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.EdgeBlend.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.EdgeBlend.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.EdgeBlend} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.EdgeBlend.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.UUID.serializeBinaryToWriter
    );
  }
  f = message.getRadius();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getIntensity();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getMode();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getFirstScreen();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.rv.data.EdgeBlend.Screen.serializeBinaryToWriter
    );
  }
  f = message.getSecondScreen();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.rv.data.EdgeBlend.Screen.serializeBinaryToWriter
    );
  }
  f = message.getLeftScreen();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.rv.data.EdgeBlend.Screen.serializeBinaryToWriter
    );
  }
  f = message.getRightScreen();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.rv.data.EdgeBlend.Screen.serializeBinaryToWriter
    );
  }
  f = message.getTopScreen();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.rv.data.EdgeBlend.Screen.serializeBinaryToWriter
    );
  }
  f = message.getBottomScreen();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.rv.data.EdgeBlend.Screen.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.rv.data.EdgeBlend.Mode = {
  MODE_LINEAR: 0,
  MODE_CUBIC: 1,
  MODE_QUADRATIC: 2
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.EdgeBlend.Screen.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.EdgeBlend.Screen.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.EdgeBlend.Screen} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.EdgeBlend.Screen.toObject = function(includeInstance, msg) {
  var f, obj = {
uuid: (f = msg.getUuid()) && proto.rv.data.UUID.toObject(includeInstance, f),
edge: jspb.Message.getFieldWithDefault(msg, 2, 0),
gamma: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
blackLevel: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
mode: jspb.Message.getFieldWithDefault(msg, 5, 0),
radius: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
intensity: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.EdgeBlend.Screen}
 */
proto.rv.data.EdgeBlend.Screen.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.EdgeBlend.Screen;
  return proto.rv.data.EdgeBlend.Screen.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.EdgeBlend.Screen} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.EdgeBlend.Screen}
 */
proto.rv.data.EdgeBlend.Screen.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.UUID;
      reader.readMessage(value,proto.rv.data.UUID.deserializeBinaryFromReader);
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {!proto.rv.data.EdgeBlend.Screen.Edge} */ (reader.readEnum());
      msg.setEdge(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setGamma(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBlackLevel(value);
      break;
    case 5:
      var value = /** @type {!proto.rv.data.EdgeBlend.Mode} */ (reader.readEnum());
      msg.setMode(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRadius(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setIntensity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.EdgeBlend.Screen.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.EdgeBlend.Screen.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.EdgeBlend.Screen} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.EdgeBlend.Screen.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.UUID.serializeBinaryToWriter
    );
  }
  f = message.getEdge();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getGamma();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getBlackLevel();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getMode();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getRadius();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getIntensity();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.rv.data.EdgeBlend.Screen.Edge = {
  EDGE_UNKNOWN: 0,
  EDGE_LEFT: 1,
  EDGE_RIGHT: 2,
  EDGE_TOP: 3,
  EDGE_BOTTOM: 4
};

/**
 * optional UUID uuid = 1;
 * @return {?proto.rv.data.UUID}
 */
proto.rv.data.EdgeBlend.Screen.prototype.getUuid = function() {
  return /** @type{?proto.rv.data.UUID} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.UUID, 1));
};


/**
 * @param {?proto.rv.data.UUID|undefined} value
 * @return {!proto.rv.data.EdgeBlend.Screen} returns this
*/
proto.rv.data.EdgeBlend.Screen.prototype.setUuid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.EdgeBlend.Screen} returns this
 */
proto.rv.data.EdgeBlend.Screen.prototype.clearUuid = function() {
  return this.setUuid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.EdgeBlend.Screen.prototype.hasUuid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Edge edge = 2;
 * @return {!proto.rv.data.EdgeBlend.Screen.Edge}
 */
proto.rv.data.EdgeBlend.Screen.prototype.getEdge = function() {
  return /** @type {!proto.rv.data.EdgeBlend.Screen.Edge} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.rv.data.EdgeBlend.Screen.Edge} value
 * @return {!proto.rv.data.EdgeBlend.Screen} returns this
 */
proto.rv.data.EdgeBlend.Screen.prototype.setEdge = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional double gamma = 3;
 * @return {number}
 */
proto.rv.data.EdgeBlend.Screen.prototype.getGamma = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.EdgeBlend.Screen} returns this
 */
proto.rv.data.EdgeBlend.Screen.prototype.setGamma = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double black_level = 4;
 * @return {number}
 */
proto.rv.data.EdgeBlend.Screen.prototype.getBlackLevel = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.EdgeBlend.Screen} returns this
 */
proto.rv.data.EdgeBlend.Screen.prototype.setBlackLevel = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional Mode mode = 5;
 * @return {!proto.rv.data.EdgeBlend.Mode}
 */
proto.rv.data.EdgeBlend.Screen.prototype.getMode = function() {
  return /** @type {!proto.rv.data.EdgeBlend.Mode} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.rv.data.EdgeBlend.Mode} value
 * @return {!proto.rv.data.EdgeBlend.Screen} returns this
 */
proto.rv.data.EdgeBlend.Screen.prototype.setMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional double radius = 6;
 * @return {number}
 */
proto.rv.data.EdgeBlend.Screen.prototype.getRadius = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.EdgeBlend.Screen} returns this
 */
proto.rv.data.EdgeBlend.Screen.prototype.setRadius = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double intensity = 7;
 * @return {number}
 */
proto.rv.data.EdgeBlend.Screen.prototype.getIntensity = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.EdgeBlend.Screen} returns this
 */
proto.rv.data.EdgeBlend.Screen.prototype.setIntensity = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional UUID uuid = 1;
 * @return {?proto.rv.data.UUID}
 */
proto.rv.data.EdgeBlend.prototype.getUuid = function() {
  return /** @type{?proto.rv.data.UUID} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.UUID, 1));
};


/**
 * @param {?proto.rv.data.UUID|undefined} value
 * @return {!proto.rv.data.EdgeBlend} returns this
*/
proto.rv.data.EdgeBlend.prototype.setUuid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.EdgeBlend} returns this
 */
proto.rv.data.EdgeBlend.prototype.clearUuid = function() {
  return this.setUuid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.EdgeBlend.prototype.hasUuid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double radius = 2;
 * @return {number}
 */
proto.rv.data.EdgeBlend.prototype.getRadius = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.EdgeBlend} returns this
 */
proto.rv.data.EdgeBlend.prototype.setRadius = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double intensity = 3;
 * @return {number}
 */
proto.rv.data.EdgeBlend.prototype.getIntensity = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.EdgeBlend} returns this
 */
proto.rv.data.EdgeBlend.prototype.setIntensity = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional Mode mode = 4;
 * @return {!proto.rv.data.EdgeBlend.Mode}
 */
proto.rv.data.EdgeBlend.prototype.getMode = function() {
  return /** @type {!proto.rv.data.EdgeBlend.Mode} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.rv.data.EdgeBlend.Mode} value
 * @return {!proto.rv.data.EdgeBlend} returns this
 */
proto.rv.data.EdgeBlend.prototype.setMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional Screen first_screen = 5;
 * @return {?proto.rv.data.EdgeBlend.Screen}
 */
proto.rv.data.EdgeBlend.prototype.getFirstScreen = function() {
  return /** @type{?proto.rv.data.EdgeBlend.Screen} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.EdgeBlend.Screen, 5));
};


/**
 * @param {?proto.rv.data.EdgeBlend.Screen|undefined} value
 * @return {!proto.rv.data.EdgeBlend} returns this
*/
proto.rv.data.EdgeBlend.prototype.setFirstScreen = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.EdgeBlend} returns this
 */
proto.rv.data.EdgeBlend.prototype.clearFirstScreen = function() {
  return this.setFirstScreen(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.EdgeBlend.prototype.hasFirstScreen = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Screen second_screen = 6;
 * @return {?proto.rv.data.EdgeBlend.Screen}
 */
proto.rv.data.EdgeBlend.prototype.getSecondScreen = function() {
  return /** @type{?proto.rv.data.EdgeBlend.Screen} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.EdgeBlend.Screen, 6));
};


/**
 * @param {?proto.rv.data.EdgeBlend.Screen|undefined} value
 * @return {!proto.rv.data.EdgeBlend} returns this
*/
proto.rv.data.EdgeBlend.prototype.setSecondScreen = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.EdgeBlend} returns this
 */
proto.rv.data.EdgeBlend.prototype.clearSecondScreen = function() {
  return this.setSecondScreen(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.EdgeBlend.prototype.hasSecondScreen = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Screen left_screen = 7;
 * @return {?proto.rv.data.EdgeBlend.Screen}
 */
proto.rv.data.EdgeBlend.prototype.getLeftScreen = function() {
  return /** @type{?proto.rv.data.EdgeBlend.Screen} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.EdgeBlend.Screen, 7));
};


/**
 * @param {?proto.rv.data.EdgeBlend.Screen|undefined} value
 * @return {!proto.rv.data.EdgeBlend} returns this
*/
proto.rv.data.EdgeBlend.prototype.setLeftScreen = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.EdgeBlend} returns this
 */
proto.rv.data.EdgeBlend.prototype.clearLeftScreen = function() {
  return this.setLeftScreen(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.EdgeBlend.prototype.hasLeftScreen = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Screen right_screen = 8;
 * @return {?proto.rv.data.EdgeBlend.Screen}
 */
proto.rv.data.EdgeBlend.prototype.getRightScreen = function() {
  return /** @type{?proto.rv.data.EdgeBlend.Screen} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.EdgeBlend.Screen, 8));
};


/**
 * @param {?proto.rv.data.EdgeBlend.Screen|undefined} value
 * @return {!proto.rv.data.EdgeBlend} returns this
*/
proto.rv.data.EdgeBlend.prototype.setRightScreen = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.EdgeBlend} returns this
 */
proto.rv.data.EdgeBlend.prototype.clearRightScreen = function() {
  return this.setRightScreen(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.EdgeBlend.prototype.hasRightScreen = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Screen top_screen = 9;
 * @return {?proto.rv.data.EdgeBlend.Screen}
 */
proto.rv.data.EdgeBlend.prototype.getTopScreen = function() {
  return /** @type{?proto.rv.data.EdgeBlend.Screen} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.EdgeBlend.Screen, 9));
};


/**
 * @param {?proto.rv.data.EdgeBlend.Screen|undefined} value
 * @return {!proto.rv.data.EdgeBlend} returns this
*/
proto.rv.data.EdgeBlend.prototype.setTopScreen = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.EdgeBlend} returns this
 */
proto.rv.data.EdgeBlend.prototype.clearTopScreen = function() {
  return this.setTopScreen(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.EdgeBlend.prototype.hasTopScreen = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Screen bottom_screen = 10;
 * @return {?proto.rv.data.EdgeBlend.Screen}
 */
proto.rv.data.EdgeBlend.prototype.getBottomScreen = function() {
  return /** @type{?proto.rv.data.EdgeBlend.Screen} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.EdgeBlend.Screen, 10));
};


/**
 * @param {?proto.rv.data.EdgeBlend.Screen|undefined} value
 * @return {!proto.rv.data.EdgeBlend} returns this
*/
proto.rv.data.EdgeBlend.prototype.setBottomScreen = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.EdgeBlend} returns this
 */
proto.rv.data.EdgeBlend.prototype.clearBottomScreen = function() {
  return this.setBottomScreen(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.EdgeBlend.prototype.hasBottomScreen = function() {
  return jspb.Message.getField(this, 10) != null;
};


