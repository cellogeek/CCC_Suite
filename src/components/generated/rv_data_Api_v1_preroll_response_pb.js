// source: proApiV1Preroll.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.rv.data.API_v1_Preroll_Response');
goog.provide('proto.rv.data.API_v1_Preroll_Response.ActivatePrerollItem');
goog.provide('proto.rv.data.API_v1_Preroll_Response.CancelPrerollItem');
goog.provide('proto.rv.data.API_v1_Preroll_Response.PrerollReady');
goog.provide('proto.rv.data.API_v1_Preroll_Response.ResponseCase');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.API_v1_Preroll_Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rv.data.API_v1_Preroll_Response.oneofGroups_);
};
goog.inherits(proto.rv.data.API_v1_Preroll_Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.API_v1_Preroll_Response.displayName = 'proto.rv.data.API_v1_Preroll_Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.API_v1_Preroll_Response.PrerollReady = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.API_v1_Preroll_Response.PrerollReady, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.API_v1_Preroll_Response.PrerollReady.displayName = 'proto.rv.data.API_v1_Preroll_Response.PrerollReady';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.API_v1_Preroll_Response.ActivatePrerollItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.API_v1_Preroll_Response.ActivatePrerollItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.API_v1_Preroll_Response.ActivatePrerollItem.displayName = 'proto.rv.data.API_v1_Preroll_Response.ActivatePrerollItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.API_v1_Preroll_Response.CancelPrerollItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.API_v1_Preroll_Response.CancelPrerollItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.API_v1_Preroll_Response.CancelPrerollItem.displayName = 'proto.rv.data.API_v1_Preroll_Response.CancelPrerollItem';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rv.data.API_v1_Preroll_Response.oneofGroups_ = [[1,3,4]];

/**
 * @enum {number}
 */
proto.rv.data.API_v1_Preroll_Response.ResponseCase = {
  RESPONSE_NOT_SET: 0,
  PREROLL_READY: 1,
  ACTIVATE_PREROLL_ITEM: 3,
  CANCEL_PREROLL_ITEM: 4
};

/**
 * @return {proto.rv.data.API_v1_Preroll_Response.ResponseCase}
 */
proto.rv.data.API_v1_Preroll_Response.prototype.getResponseCase = function() {
  return /** @type {proto.rv.data.API_v1_Preroll_Response.ResponseCase} */(jspb.Message.computeOneofCase(this, proto.rv.data.API_v1_Preroll_Response.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.API_v1_Preroll_Response.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.API_v1_Preroll_Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.API_v1_Preroll_Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.API_v1_Preroll_Response.toObject = function(includeInstance, msg) {
  var f, obj = {
prerollReady: (f = msg.getPrerollReady()) && proto.rv.data.API_v1_Preroll_Response.PrerollReady.toObject(includeInstance, f),
activatePrerollItem: (f = msg.getActivatePrerollItem()) && proto.rv.data.API_v1_Preroll_Response.ActivatePrerollItem.toObject(includeInstance, f),
cancelPrerollItem: (f = msg.getCancelPrerollItem()) && proto.rv.data.API_v1_Preroll_Response.CancelPrerollItem.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.API_v1_Preroll_Response}
 */
proto.rv.data.API_v1_Preroll_Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.API_v1_Preroll_Response;
  return proto.rv.data.API_v1_Preroll_Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.API_v1_Preroll_Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.API_v1_Preroll_Response}
 */
proto.rv.data.API_v1_Preroll_Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.API_v1_Preroll_Response.PrerollReady;
      reader.readMessage(value,proto.rv.data.API_v1_Preroll_Response.PrerollReady.deserializeBinaryFromReader);
      msg.setPrerollReady(value);
      break;
    case 3:
      var value = new proto.rv.data.API_v1_Preroll_Response.ActivatePrerollItem;
      reader.readMessage(value,proto.rv.data.API_v1_Preroll_Response.ActivatePrerollItem.deserializeBinaryFromReader);
      msg.setActivatePrerollItem(value);
      break;
    case 4:
      var value = new proto.rv.data.API_v1_Preroll_Response.CancelPrerollItem;
      reader.readMessage(value,proto.rv.data.API_v1_Preroll_Response.CancelPrerollItem.deserializeBinaryFromReader);
      msg.setCancelPrerollItem(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.API_v1_Preroll_Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.API_v1_Preroll_Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.API_v1_Preroll_Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.API_v1_Preroll_Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrerollReady();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.API_v1_Preroll_Response.PrerollReady.serializeBinaryToWriter
    );
  }
  f = message.getActivatePrerollItem();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rv.data.API_v1_Preroll_Response.ActivatePrerollItem.serializeBinaryToWriter
    );
  }
  f = message.getCancelPrerollItem();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rv.data.API_v1_Preroll_Response.CancelPrerollItem.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.API_v1_Preroll_Response.PrerollReady.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.API_v1_Preroll_Response.PrerollReady.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.API_v1_Preroll_Response.PrerollReady} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.API_v1_Preroll_Response.PrerollReady.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, 0),
latency: jspb.Message.getFieldWithDefault(msg, 2, 0),
time: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.API_v1_Preroll_Response.PrerollReady}
 */
proto.rv.data.API_v1_Preroll_Response.PrerollReady.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.API_v1_Preroll_Response.PrerollReady;
  return proto.rv.data.API_v1_Preroll_Response.PrerollReady.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.API_v1_Preroll_Response.PrerollReady} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.API_v1_Preroll_Response.PrerollReady}
 */
proto.rv.data.API_v1_Preroll_Response.PrerollReady.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLatency(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.API_v1_Preroll_Response.PrerollReady.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.API_v1_Preroll_Response.PrerollReady.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.API_v1_Preroll_Response.PrerollReady} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.API_v1_Preroll_Response.PrerollReady.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getLatency();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.rv.data.API_v1_Preroll_Response.PrerollReady.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.API_v1_Preroll_Response.PrerollReady} returns this
 */
proto.rv.data.API_v1_Preroll_Response.PrerollReady.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 latency = 2;
 * @return {number}
 */
proto.rv.data.API_v1_Preroll_Response.PrerollReady.prototype.getLatency = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.API_v1_Preroll_Response.PrerollReady} returns this
 */
proto.rv.data.API_v1_Preroll_Response.PrerollReady.prototype.setLatency = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 time = 3;
 * @return {number}
 */
proto.rv.data.API_v1_Preroll_Response.PrerollReady.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.API_v1_Preroll_Response.PrerollReady} returns this
 */
proto.rv.data.API_v1_Preroll_Response.PrerollReady.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.API_v1_Preroll_Response.ActivatePrerollItem.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.API_v1_Preroll_Response.ActivatePrerollItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.API_v1_Preroll_Response.ActivatePrerollItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.API_v1_Preroll_Response.ActivatePrerollItem.toObject = function(includeInstance, msg) {
  var f, obj = {
success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.API_v1_Preroll_Response.ActivatePrerollItem}
 */
proto.rv.data.API_v1_Preroll_Response.ActivatePrerollItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.API_v1_Preroll_Response.ActivatePrerollItem;
  return proto.rv.data.API_v1_Preroll_Response.ActivatePrerollItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.API_v1_Preroll_Response.ActivatePrerollItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.API_v1_Preroll_Response.ActivatePrerollItem}
 */
proto.rv.data.API_v1_Preroll_Response.ActivatePrerollItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.API_v1_Preroll_Response.ActivatePrerollItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.API_v1_Preroll_Response.ActivatePrerollItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.API_v1_Preroll_Response.ActivatePrerollItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.API_v1_Preroll_Response.ActivatePrerollItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.rv.data.API_v1_Preroll_Response.ActivatePrerollItem.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.API_v1_Preroll_Response.ActivatePrerollItem} returns this
 */
proto.rv.data.API_v1_Preroll_Response.ActivatePrerollItem.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.API_v1_Preroll_Response.CancelPrerollItem.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.API_v1_Preroll_Response.CancelPrerollItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.API_v1_Preroll_Response.CancelPrerollItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.API_v1_Preroll_Response.CancelPrerollItem.toObject = function(includeInstance, msg) {
  var f, obj = {
success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.API_v1_Preroll_Response.CancelPrerollItem}
 */
proto.rv.data.API_v1_Preroll_Response.CancelPrerollItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.API_v1_Preroll_Response.CancelPrerollItem;
  return proto.rv.data.API_v1_Preroll_Response.CancelPrerollItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.API_v1_Preroll_Response.CancelPrerollItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.API_v1_Preroll_Response.CancelPrerollItem}
 */
proto.rv.data.API_v1_Preroll_Response.CancelPrerollItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.API_v1_Preroll_Response.CancelPrerollItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.API_v1_Preroll_Response.CancelPrerollItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.API_v1_Preroll_Response.CancelPrerollItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.API_v1_Preroll_Response.CancelPrerollItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.rv.data.API_v1_Preroll_Response.CancelPrerollItem.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.API_v1_Preroll_Response.CancelPrerollItem} returns this
 */
proto.rv.data.API_v1_Preroll_Response.CancelPrerollItem.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional PrerollReady preroll_ready = 1;
 * @return {?proto.rv.data.API_v1_Preroll_Response.PrerollReady}
 */
proto.rv.data.API_v1_Preroll_Response.prototype.getPrerollReady = function() {
  return /** @type{?proto.rv.data.API_v1_Preroll_Response.PrerollReady} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.API_v1_Preroll_Response.PrerollReady, 1));
};


/**
 * @param {?proto.rv.data.API_v1_Preroll_Response.PrerollReady|undefined} value
 * @return {!proto.rv.data.API_v1_Preroll_Response} returns this
*/
proto.rv.data.API_v1_Preroll_Response.prototype.setPrerollReady = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.rv.data.API_v1_Preroll_Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.API_v1_Preroll_Response} returns this
 */
proto.rv.data.API_v1_Preroll_Response.prototype.clearPrerollReady = function() {
  return this.setPrerollReady(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.API_v1_Preroll_Response.prototype.hasPrerollReady = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ActivatePrerollItem activate_preroll_item = 3;
 * @return {?proto.rv.data.API_v1_Preroll_Response.ActivatePrerollItem}
 */
proto.rv.data.API_v1_Preroll_Response.prototype.getActivatePrerollItem = function() {
  return /** @type{?proto.rv.data.API_v1_Preroll_Response.ActivatePrerollItem} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.API_v1_Preroll_Response.ActivatePrerollItem, 3));
};


/**
 * @param {?proto.rv.data.API_v1_Preroll_Response.ActivatePrerollItem|undefined} value
 * @return {!proto.rv.data.API_v1_Preroll_Response} returns this
*/
proto.rv.data.API_v1_Preroll_Response.prototype.setActivatePrerollItem = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.rv.data.API_v1_Preroll_Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.API_v1_Preroll_Response} returns this
 */
proto.rv.data.API_v1_Preroll_Response.prototype.clearActivatePrerollItem = function() {
  return this.setActivatePrerollItem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.API_v1_Preroll_Response.prototype.hasActivatePrerollItem = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional CancelPrerollItem cancel_preroll_item = 4;
 * @return {?proto.rv.data.API_v1_Preroll_Response.CancelPrerollItem}
 */
proto.rv.data.API_v1_Preroll_Response.prototype.getCancelPrerollItem = function() {
  return /** @type{?proto.rv.data.API_v1_Preroll_Response.CancelPrerollItem} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.API_v1_Preroll_Response.CancelPrerollItem, 4));
};


/**
 * @param {?proto.rv.data.API_v1_Preroll_Response.CancelPrerollItem|undefined} value
 * @return {!proto.rv.data.API_v1_Preroll_Response} returns this
*/
proto.rv.data.API_v1_Preroll_Response.prototype.setCancelPrerollItem = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.rv.data.API_v1_Preroll_Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.API_v1_Preroll_Response} returns this
 */
proto.rv.data.API_v1_Preroll_Response.prototype.clearCancelPrerollItem = function() {
  return this.setCancelPrerollItem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.API_v1_Preroll_Response.prototype.hasCancelPrerollItem = function() {
  return jspb.Message.getField(this, 4) != null;
};


