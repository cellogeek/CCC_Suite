// source: screens.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.rv.data.OutputDisplay');
goog.provide('proto.rv.data.OutputDisplay.Blackmagic');
goog.provide('proto.rv.data.OutputDisplay.Blackmagic.KeyMode');
goog.provide('proto.rv.data.OutputDisplay.HardwareoptionsCase');
goog.provide('proto.rv.data.OutputDisplay.Type');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.rv.data.DisplayMode');
goog.require('proto.rv.data.Graphics.Rect');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.OutputDisplay = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rv.data.OutputDisplay.oneofGroups_);
};
goog.inherits(proto.rv.data.OutputDisplay, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.OutputDisplay.displayName = 'proto.rv.data.OutputDisplay';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.OutputDisplay.Blackmagic = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.OutputDisplay.Blackmagic, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.OutputDisplay.Blackmagic.displayName = 'proto.rv.data.OutputDisplay.Blackmagic';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rv.data.OutputDisplay.oneofGroups_ = [[11]];

/**
 * @enum {number}
 */
proto.rv.data.OutputDisplay.HardwareoptionsCase = {
  HARDWAREOPTIONS_NOT_SET: 0,
  BLACKMAGIC: 11
};

/**
 * @return {proto.rv.data.OutputDisplay.HardwareoptionsCase}
 */
proto.rv.data.OutputDisplay.prototype.getHardwareoptionsCase = function() {
  return /** @type {proto.rv.data.OutputDisplay.HardwareoptionsCase} */(jspb.Message.computeOneofCase(this, proto.rv.data.OutputDisplay.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.OutputDisplay.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.OutputDisplay.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.OutputDisplay} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.OutputDisplay.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, ""),
model: jspb.Message.getFieldWithDefault(msg, 2, ""),
serial: jspb.Message.getFieldWithDefault(msg, 3, ""),
devicename: jspb.Message.getFieldWithDefault(msg, 4, ""),
vendor: jspb.Message.getFieldWithDefault(msg, 5, ""),
modeindex: jspb.Message.getFieldWithDefault(msg, 6, 0),
bounds: (f = msg.getBounds()) && proto.rv.data.Graphics.Rect.toObject(includeInstance, f),
type: jspb.Message.getFieldWithDefault(msg, 8, 0),
mode: (f = msg.getMode()) && proto.rv.data.DisplayMode.toObject(includeInstance, f),
renderId: jspb.Message.getFieldWithDefault(msg, 10, ""),
videoDelay: jspb.Message.getFieldWithDefault(msg, 12, 0),
blackmagic: (f = msg.getBlackmagic()) && proto.rv.data.OutputDisplay.Blackmagic.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.OutputDisplay}
 */
proto.rv.data.OutputDisplay.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.OutputDisplay;
  return proto.rv.data.OutputDisplay.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.OutputDisplay} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.OutputDisplay}
 */
proto.rv.data.OutputDisplay.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setModel(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSerial(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevicename(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setVendor(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setModeindex(value);
      break;
    case 7:
      var value = new proto.rv.data.Graphics.Rect;
      reader.readMessage(value,proto.rv.data.Graphics.Rect.deserializeBinaryFromReader);
      msg.setBounds(value);
      break;
    case 8:
      var value = /** @type {!proto.rv.data.OutputDisplay.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 9:
      var value = new proto.rv.data.DisplayMode;
      reader.readMessage(value,proto.rv.data.DisplayMode.deserializeBinaryFromReader);
      msg.setMode(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setRenderId(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVideoDelay(value);
      break;
    case 11:
      var value = new proto.rv.data.OutputDisplay.Blackmagic;
      reader.readMessage(value,proto.rv.data.OutputDisplay.Blackmagic.deserializeBinaryFromReader);
      msg.setBlackmagic(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.OutputDisplay.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.OutputDisplay.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.OutputDisplay} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.OutputDisplay.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getModel();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSerial();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDevicename();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getVendor();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getModeindex();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getBounds();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.rv.data.Graphics.Rect.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getMode();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.rv.data.DisplayMode.serializeBinaryToWriter
    );
  }
  f = message.getRenderId();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getVideoDelay();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getBlackmagic();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.rv.data.OutputDisplay.Blackmagic.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.rv.data.OutputDisplay.Type = {
  TYPE_UNKNOWN: 0,
  TYPE_SCREEN: 1,
  TYPE_CARD: 2,
  TYPE_NDI: 3,
  TYPE_SYPHON: 4,
  TYPE_CUSTOM: 5
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.OutputDisplay.Blackmagic.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.OutputDisplay.Blackmagic.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.OutputDisplay.Blackmagic} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.OutputDisplay.Blackmagic.toObject = function(includeInstance, msg) {
  var f, obj = {
enabled: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
keyMode: jspb.Message.getFieldWithDefault(msg, 2, 0),
blendValue: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.OutputDisplay.Blackmagic}
 */
proto.rv.data.OutputDisplay.Blackmagic.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.OutputDisplay.Blackmagic;
  return proto.rv.data.OutputDisplay.Blackmagic.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.OutputDisplay.Blackmagic} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.OutputDisplay.Blackmagic}
 */
proto.rv.data.OutputDisplay.Blackmagic.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 2:
      var value = /** @type {!proto.rv.data.OutputDisplay.Blackmagic.KeyMode} */ (reader.readEnum());
      msg.setKeyMode(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBlendValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.OutputDisplay.Blackmagic.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.OutputDisplay.Blackmagic.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.OutputDisplay.Blackmagic} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.OutputDisplay.Blackmagic.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getKeyMode();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getBlendValue();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.rv.data.OutputDisplay.Blackmagic.KeyMode = {
  KEY_MODE_INTERNAL: 0,
  KEY_MODE_EXTERNAL: 1
};

/**
 * optional bool enabled = 1;
 * @return {boolean}
 */
proto.rv.data.OutputDisplay.Blackmagic.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.OutputDisplay.Blackmagic} returns this
 */
proto.rv.data.OutputDisplay.Blackmagic.prototype.setEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional KeyMode key_mode = 2;
 * @return {!proto.rv.data.OutputDisplay.Blackmagic.KeyMode}
 */
proto.rv.data.OutputDisplay.Blackmagic.prototype.getKeyMode = function() {
  return /** @type {!proto.rv.data.OutputDisplay.Blackmagic.KeyMode} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.rv.data.OutputDisplay.Blackmagic.KeyMode} value
 * @return {!proto.rv.data.OutputDisplay.Blackmagic} returns this
 */
proto.rv.data.OutputDisplay.Blackmagic.prototype.setKeyMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional double blend_value = 3;
 * @return {number}
 */
proto.rv.data.OutputDisplay.Blackmagic.prototype.getBlendValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.OutputDisplay.Blackmagic} returns this
 */
proto.rv.data.OutputDisplay.Blackmagic.prototype.setBlendValue = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.rv.data.OutputDisplay.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.OutputDisplay} returns this
 */
proto.rv.data.OutputDisplay.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string model = 2;
 * @return {string}
 */
proto.rv.data.OutputDisplay.prototype.getModel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.OutputDisplay} returns this
 */
proto.rv.data.OutputDisplay.prototype.setModel = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string serial = 3;
 * @return {string}
 */
proto.rv.data.OutputDisplay.prototype.getSerial = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.OutputDisplay} returns this
 */
proto.rv.data.OutputDisplay.prototype.setSerial = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string deviceName = 4;
 * @return {string}
 */
proto.rv.data.OutputDisplay.prototype.getDevicename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.OutputDisplay} returns this
 */
proto.rv.data.OutputDisplay.prototype.setDevicename = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string vendor = 5;
 * @return {string}
 */
proto.rv.data.OutputDisplay.prototype.getVendor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.OutputDisplay} returns this
 */
proto.rv.data.OutputDisplay.prototype.setVendor = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional uint32 modeIndex = 6;
 * @return {number}
 */
proto.rv.data.OutputDisplay.prototype.getModeindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.OutputDisplay} returns this
 */
proto.rv.data.OutputDisplay.prototype.setModeindex = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional Graphics.Rect bounds = 7;
 * @return {?proto.rv.data.Graphics.Rect}
 */
proto.rv.data.OutputDisplay.prototype.getBounds = function() {
  return /** @type{?proto.rv.data.Graphics.Rect} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Graphics.Rect, 7));
};


/**
 * @param {?proto.rv.data.Graphics.Rect|undefined} value
 * @return {!proto.rv.data.OutputDisplay} returns this
*/
proto.rv.data.OutputDisplay.prototype.setBounds = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.OutputDisplay} returns this
 */
proto.rv.data.OutputDisplay.prototype.clearBounds = function() {
  return this.setBounds(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.OutputDisplay.prototype.hasBounds = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Type type = 8;
 * @return {!proto.rv.data.OutputDisplay.Type}
 */
proto.rv.data.OutputDisplay.prototype.getType = function() {
  return /** @type {!proto.rv.data.OutputDisplay.Type} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.rv.data.OutputDisplay.Type} value
 * @return {!proto.rv.data.OutputDisplay} returns this
 */
proto.rv.data.OutputDisplay.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional DisplayMode mode = 9;
 * @return {?proto.rv.data.DisplayMode}
 */
proto.rv.data.OutputDisplay.prototype.getMode = function() {
  return /** @type{?proto.rv.data.DisplayMode} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.DisplayMode, 9));
};


/**
 * @param {?proto.rv.data.DisplayMode|undefined} value
 * @return {!proto.rv.data.OutputDisplay} returns this
*/
proto.rv.data.OutputDisplay.prototype.setMode = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.OutputDisplay} returns this
 */
proto.rv.data.OutputDisplay.prototype.clearMode = function() {
  return this.setMode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.OutputDisplay.prototype.hasMode = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string render_id = 10;
 * @return {string}
 */
proto.rv.data.OutputDisplay.prototype.getRenderId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.OutputDisplay} returns this
 */
proto.rv.data.OutputDisplay.prototype.setRenderId = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional int32 video_delay = 12;
 * @return {number}
 */
proto.rv.data.OutputDisplay.prototype.getVideoDelay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.OutputDisplay} returns this
 */
proto.rv.data.OutputDisplay.prototype.setVideoDelay = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional Blackmagic blackmagic = 11;
 * @return {?proto.rv.data.OutputDisplay.Blackmagic}
 */
proto.rv.data.OutputDisplay.prototype.getBlackmagic = function() {
  return /** @type{?proto.rv.data.OutputDisplay.Blackmagic} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.OutputDisplay.Blackmagic, 11));
};


/**
 * @param {?proto.rv.data.OutputDisplay.Blackmagic|undefined} value
 * @return {!proto.rv.data.OutputDisplay} returns this
*/
proto.rv.data.OutputDisplay.prototype.setBlackmagic = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.rv.data.OutputDisplay.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.OutputDisplay} returns this
 */
proto.rv.data.OutputDisplay.prototype.clearBlackmagic = function() {
  return this.setBlackmagic(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.OutputDisplay.prototype.hasBlackmagic = function() {
  return jspb.Message.getField(this, 11) != null;
};


