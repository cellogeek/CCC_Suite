// source: proApiV1Preroll.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.rv.data.API_v1_Preroll_Request');
goog.provide('proto.rv.data.API_v1_Preroll_Request.ActivatePrerollItem');
goog.provide('proto.rv.data.API_v1_Preroll_Request.CancelPrerollItem');
goog.provide('proto.rv.data.API_v1_Preroll_Request.PrerollAudioItem');
goog.provide('proto.rv.data.API_v1_Preroll_Request.PrerollCue');
goog.provide('proto.rv.data.API_v1_Preroll_Request.PrerollLibraryItem');
goog.provide('proto.rv.data.API_v1_Preroll_Request.PrerollMediaItem');
goog.provide('proto.rv.data.API_v1_Preroll_Request.PrerollNext');
goog.provide('proto.rv.data.API_v1_Preroll_Request.PrerollPlaylistItem');
goog.provide('proto.rv.data.API_v1_Preroll_Request.PrerollPrevious');
goog.provide('proto.rv.data.API_v1_Preroll_Request.PrerollVideoInput');
goog.provide('proto.rv.data.API_v1_Preroll_Request.RequestCase');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.rv.data.API_v1_Identifier');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.API_v1_Preroll_Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rv.data.API_v1_Preroll_Request.oneofGroups_);
};
goog.inherits(proto.rv.data.API_v1_Preroll_Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.API_v1_Preroll_Request.displayName = 'proto.rv.data.API_v1_Preroll_Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.API_v1_Preroll_Request.PrerollCue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.API_v1_Preroll_Request.PrerollCue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.API_v1_Preroll_Request.PrerollCue.displayName = 'proto.rv.data.API_v1_Preroll_Request.PrerollCue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.API_v1_Preroll_Request.PrerollPlaylistItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rv.data.API_v1_Preroll_Request.PrerollPlaylistItem.repeatedFields_, null);
};
goog.inherits(proto.rv.data.API_v1_Preroll_Request.PrerollPlaylistItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.API_v1_Preroll_Request.PrerollPlaylistItem.displayName = 'proto.rv.data.API_v1_Preroll_Request.PrerollPlaylistItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.API_v1_Preroll_Request.PrerollMediaItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rv.data.API_v1_Preroll_Request.PrerollMediaItem.repeatedFields_, null);
};
goog.inherits(proto.rv.data.API_v1_Preroll_Request.PrerollMediaItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.API_v1_Preroll_Request.PrerollMediaItem.displayName = 'proto.rv.data.API_v1_Preroll_Request.PrerollMediaItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.API_v1_Preroll_Request.PrerollAudioItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rv.data.API_v1_Preroll_Request.PrerollAudioItem.repeatedFields_, null);
};
goog.inherits(proto.rv.data.API_v1_Preroll_Request.PrerollAudioItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.API_v1_Preroll_Request.PrerollAudioItem.displayName = 'proto.rv.data.API_v1_Preroll_Request.PrerollAudioItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.API_v1_Preroll_Request.PrerollVideoInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.API_v1_Preroll_Request.PrerollVideoInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.API_v1_Preroll_Request.PrerollVideoInput.displayName = 'proto.rv.data.API_v1_Preroll_Request.PrerollVideoInput';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.API_v1_Preroll_Request.PrerollLibraryItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rv.data.API_v1_Preroll_Request.PrerollLibraryItem.repeatedFields_, null);
};
goog.inherits(proto.rv.data.API_v1_Preroll_Request.PrerollLibraryItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.API_v1_Preroll_Request.PrerollLibraryItem.displayName = 'proto.rv.data.API_v1_Preroll_Request.PrerollLibraryItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.API_v1_Preroll_Request.PrerollNext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.API_v1_Preroll_Request.PrerollNext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.API_v1_Preroll_Request.PrerollNext.displayName = 'proto.rv.data.API_v1_Preroll_Request.PrerollNext';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.API_v1_Preroll_Request.PrerollPrevious = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.API_v1_Preroll_Request.PrerollPrevious, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.API_v1_Preroll_Request.PrerollPrevious.displayName = 'proto.rv.data.API_v1_Preroll_Request.PrerollPrevious';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.API_v1_Preroll_Request.ActivatePrerollItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.API_v1_Preroll_Request.ActivatePrerollItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.API_v1_Preroll_Request.ActivatePrerollItem.displayName = 'proto.rv.data.API_v1_Preroll_Request.ActivatePrerollItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.API_v1_Preroll_Request.CancelPrerollItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.API_v1_Preroll_Request.CancelPrerollItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.API_v1_Preroll_Request.CancelPrerollItem.displayName = 'proto.rv.data.API_v1_Preroll_Request.CancelPrerollItem';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rv.data.API_v1_Preroll_Request.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10]];

/**
 * @enum {number}
 */
proto.rv.data.API_v1_Preroll_Request.RequestCase = {
  REQUEST_NOT_SET: 0,
  PREROLL_CUE: 1,
  PREROLL_PLAYLIST_ITEM: 2,
  PREROLL_MEDIA_ITEM: 3,
  PREROLL_AUDIO_ITEM: 4,
  PREROLL_VIDEO_INPUT: 5,
  PREROLL_LIBRARY_ITEM: 6,
  PREROLL_NEXT: 7,
  PREROLL_PREVIOUS: 8,
  ACTIVATE_PREROLL_ITEM: 9,
  CANCEL_PREROLL_ITEM: 10
};

/**
 * @return {proto.rv.data.API_v1_Preroll_Request.RequestCase}
 */
proto.rv.data.API_v1_Preroll_Request.prototype.getRequestCase = function() {
  return /** @type {proto.rv.data.API_v1_Preroll_Request.RequestCase} */(jspb.Message.computeOneofCase(this, proto.rv.data.API_v1_Preroll_Request.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.API_v1_Preroll_Request.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.API_v1_Preroll_Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.API_v1_Preroll_Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.API_v1_Preroll_Request.toObject = function(includeInstance, msg) {
  var f, obj = {
prerollCue: (f = msg.getPrerollCue()) && proto.rv.data.API_v1_Preroll_Request.PrerollCue.toObject(includeInstance, f),
prerollPlaylistItem: (f = msg.getPrerollPlaylistItem()) && proto.rv.data.API_v1_Preroll_Request.PrerollPlaylistItem.toObject(includeInstance, f),
prerollMediaItem: (f = msg.getPrerollMediaItem()) && proto.rv.data.API_v1_Preroll_Request.PrerollMediaItem.toObject(includeInstance, f),
prerollAudioItem: (f = msg.getPrerollAudioItem()) && proto.rv.data.API_v1_Preroll_Request.PrerollAudioItem.toObject(includeInstance, f),
prerollVideoInput: (f = msg.getPrerollVideoInput()) && proto.rv.data.API_v1_Preroll_Request.PrerollVideoInput.toObject(includeInstance, f),
prerollLibraryItem: (f = msg.getPrerollLibraryItem()) && proto.rv.data.API_v1_Preroll_Request.PrerollLibraryItem.toObject(includeInstance, f),
prerollNext: (f = msg.getPrerollNext()) && proto.rv.data.API_v1_Preroll_Request.PrerollNext.toObject(includeInstance, f),
prerollPrevious: (f = msg.getPrerollPrevious()) && proto.rv.data.API_v1_Preroll_Request.PrerollPrevious.toObject(includeInstance, f),
activatePrerollItem: (f = msg.getActivatePrerollItem()) && proto.rv.data.API_v1_Preroll_Request.ActivatePrerollItem.toObject(includeInstance, f),
cancelPrerollItem: (f = msg.getCancelPrerollItem()) && proto.rv.data.API_v1_Preroll_Request.CancelPrerollItem.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.API_v1_Preroll_Request}
 */
proto.rv.data.API_v1_Preroll_Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.API_v1_Preroll_Request;
  return proto.rv.data.API_v1_Preroll_Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.API_v1_Preroll_Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.API_v1_Preroll_Request}
 */
proto.rv.data.API_v1_Preroll_Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.API_v1_Preroll_Request.PrerollCue;
      reader.readMessage(value,proto.rv.data.API_v1_Preroll_Request.PrerollCue.deserializeBinaryFromReader);
      msg.setPrerollCue(value);
      break;
    case 2:
      var value = new proto.rv.data.API_v1_Preroll_Request.PrerollPlaylistItem;
      reader.readMessage(value,proto.rv.data.API_v1_Preroll_Request.PrerollPlaylistItem.deserializeBinaryFromReader);
      msg.setPrerollPlaylistItem(value);
      break;
    case 3:
      var value = new proto.rv.data.API_v1_Preroll_Request.PrerollMediaItem;
      reader.readMessage(value,proto.rv.data.API_v1_Preroll_Request.PrerollMediaItem.deserializeBinaryFromReader);
      msg.setPrerollMediaItem(value);
      break;
    case 4:
      var value = new proto.rv.data.API_v1_Preroll_Request.PrerollAudioItem;
      reader.readMessage(value,proto.rv.data.API_v1_Preroll_Request.PrerollAudioItem.deserializeBinaryFromReader);
      msg.setPrerollAudioItem(value);
      break;
    case 5:
      var value = new proto.rv.data.API_v1_Preroll_Request.PrerollVideoInput;
      reader.readMessage(value,proto.rv.data.API_v1_Preroll_Request.PrerollVideoInput.deserializeBinaryFromReader);
      msg.setPrerollVideoInput(value);
      break;
    case 6:
      var value = new proto.rv.data.API_v1_Preroll_Request.PrerollLibraryItem;
      reader.readMessage(value,proto.rv.data.API_v1_Preroll_Request.PrerollLibraryItem.deserializeBinaryFromReader);
      msg.setPrerollLibraryItem(value);
      break;
    case 7:
      var value = new proto.rv.data.API_v1_Preroll_Request.PrerollNext;
      reader.readMessage(value,proto.rv.data.API_v1_Preroll_Request.PrerollNext.deserializeBinaryFromReader);
      msg.setPrerollNext(value);
      break;
    case 8:
      var value = new proto.rv.data.API_v1_Preroll_Request.PrerollPrevious;
      reader.readMessage(value,proto.rv.data.API_v1_Preroll_Request.PrerollPrevious.deserializeBinaryFromReader);
      msg.setPrerollPrevious(value);
      break;
    case 9:
      var value = new proto.rv.data.API_v1_Preroll_Request.ActivatePrerollItem;
      reader.readMessage(value,proto.rv.data.API_v1_Preroll_Request.ActivatePrerollItem.deserializeBinaryFromReader);
      msg.setActivatePrerollItem(value);
      break;
    case 10:
      var value = new proto.rv.data.API_v1_Preroll_Request.CancelPrerollItem;
      reader.readMessage(value,proto.rv.data.API_v1_Preroll_Request.CancelPrerollItem.deserializeBinaryFromReader);
      msg.setCancelPrerollItem(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.API_v1_Preroll_Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.API_v1_Preroll_Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.API_v1_Preroll_Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.API_v1_Preroll_Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrerollCue();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.API_v1_Preroll_Request.PrerollCue.serializeBinaryToWriter
    );
  }
  f = message.getPrerollPlaylistItem();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rv.data.API_v1_Preroll_Request.PrerollPlaylistItem.serializeBinaryToWriter
    );
  }
  f = message.getPrerollMediaItem();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rv.data.API_v1_Preroll_Request.PrerollMediaItem.serializeBinaryToWriter
    );
  }
  f = message.getPrerollAudioItem();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rv.data.API_v1_Preroll_Request.PrerollAudioItem.serializeBinaryToWriter
    );
  }
  f = message.getPrerollVideoInput();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.rv.data.API_v1_Preroll_Request.PrerollVideoInput.serializeBinaryToWriter
    );
  }
  f = message.getPrerollLibraryItem();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.rv.data.API_v1_Preroll_Request.PrerollLibraryItem.serializeBinaryToWriter
    );
  }
  f = message.getPrerollNext();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.rv.data.API_v1_Preroll_Request.PrerollNext.serializeBinaryToWriter
    );
  }
  f = message.getPrerollPrevious();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.rv.data.API_v1_Preroll_Request.PrerollPrevious.serializeBinaryToWriter
    );
  }
  f = message.getActivatePrerollItem();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.rv.data.API_v1_Preroll_Request.ActivatePrerollItem.serializeBinaryToWriter
    );
  }
  f = message.getCancelPrerollItem();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.rv.data.API_v1_Preroll_Request.CancelPrerollItem.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.API_v1_Preroll_Request.PrerollCue.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.API_v1_Preroll_Request.PrerollCue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.API_v1_Preroll_Request.PrerollCue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.API_v1_Preroll_Request.PrerollCue.toObject = function(includeInstance, msg) {
  var f, obj = {
index: jspb.Message.getFieldWithDefault(msg, 1, 0),
prerollId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.API_v1_Preroll_Request.PrerollCue}
 */
proto.rv.data.API_v1_Preroll_Request.PrerollCue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.API_v1_Preroll_Request.PrerollCue;
  return proto.rv.data.API_v1_Preroll_Request.PrerollCue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.API_v1_Preroll_Request.PrerollCue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.API_v1_Preroll_Request.PrerollCue}
 */
proto.rv.data.API_v1_Preroll_Request.PrerollCue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIndex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPrerollId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.API_v1_Preroll_Request.PrerollCue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.API_v1_Preroll_Request.PrerollCue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.API_v1_Preroll_Request.PrerollCue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.API_v1_Preroll_Request.PrerollCue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPrerollId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional int32 index = 1;
 * @return {number}
 */
proto.rv.data.API_v1_Preroll_Request.PrerollCue.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.API_v1_Preroll_Request.PrerollCue} returns this
 */
proto.rv.data.API_v1_Preroll_Request.PrerollCue.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 preroll_id = 2;
 * @return {number}
 */
proto.rv.data.API_v1_Preroll_Request.PrerollCue.prototype.getPrerollId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.API_v1_Preroll_Request.PrerollCue} returns this
 */
proto.rv.data.API_v1_Preroll_Request.PrerollCue.prototype.setPrerollId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rv.data.API_v1_Preroll_Request.PrerollPlaylistItem.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.API_v1_Preroll_Request.PrerollPlaylistItem.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.API_v1_Preroll_Request.PrerollPlaylistItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.API_v1_Preroll_Request.PrerollPlaylistItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.API_v1_Preroll_Request.PrerollPlaylistItem.toObject = function(includeInstance, msg) {
  var f, obj = {
pathList: jspb.Message.toObjectList(msg.getPathList(),
    proto.rv.data.API_v1_Identifier.toObject, includeInstance),
prerollId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.API_v1_Preroll_Request.PrerollPlaylistItem}
 */
proto.rv.data.API_v1_Preroll_Request.PrerollPlaylistItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.API_v1_Preroll_Request.PrerollPlaylistItem;
  return proto.rv.data.API_v1_Preroll_Request.PrerollPlaylistItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.API_v1_Preroll_Request.PrerollPlaylistItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.API_v1_Preroll_Request.PrerollPlaylistItem}
 */
proto.rv.data.API_v1_Preroll_Request.PrerollPlaylistItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.API_v1_Identifier;
      reader.readMessage(value,proto.rv.data.API_v1_Identifier.deserializeBinaryFromReader);
      msg.addPath(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPrerollId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.API_v1_Preroll_Request.PrerollPlaylistItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.API_v1_Preroll_Request.PrerollPlaylistItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.API_v1_Preroll_Request.PrerollPlaylistItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.API_v1_Preroll_Request.PrerollPlaylistItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPathList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rv.data.API_v1_Identifier.serializeBinaryToWriter
    );
  }
  f = message.getPrerollId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * repeated API_v1_Identifier path = 1;
 * @return {!Array<!proto.rv.data.API_v1_Identifier>}
 */
proto.rv.data.API_v1_Preroll_Request.PrerollPlaylistItem.prototype.getPathList = function() {
  return /** @type{!Array<!proto.rv.data.API_v1_Identifier>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rv.data.API_v1_Identifier, 1));
};


/**
 * @param {!Array<!proto.rv.data.API_v1_Identifier>} value
 * @return {!proto.rv.data.API_v1_Preroll_Request.PrerollPlaylistItem} returns this
*/
proto.rv.data.API_v1_Preroll_Request.PrerollPlaylistItem.prototype.setPathList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.rv.data.API_v1_Identifier=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rv.data.API_v1_Identifier}
 */
proto.rv.data.API_v1_Preroll_Request.PrerollPlaylistItem.prototype.addPath = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rv.data.API_v1_Identifier, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.API_v1_Preroll_Request.PrerollPlaylistItem} returns this
 */
proto.rv.data.API_v1_Preroll_Request.PrerollPlaylistItem.prototype.clearPathList = function() {
  return this.setPathList([]);
};


/**
 * optional uint64 preroll_id = 2;
 * @return {number}
 */
proto.rv.data.API_v1_Preroll_Request.PrerollPlaylistItem.prototype.getPrerollId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.API_v1_Preroll_Request.PrerollPlaylistItem} returns this
 */
proto.rv.data.API_v1_Preroll_Request.PrerollPlaylistItem.prototype.setPrerollId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rv.data.API_v1_Preroll_Request.PrerollMediaItem.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.API_v1_Preroll_Request.PrerollMediaItem.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.API_v1_Preroll_Request.PrerollMediaItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.API_v1_Preroll_Request.PrerollMediaItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.API_v1_Preroll_Request.PrerollMediaItem.toObject = function(includeInstance, msg) {
  var f, obj = {
pathList: jspb.Message.toObjectList(msg.getPathList(),
    proto.rv.data.API_v1_Identifier.toObject, includeInstance),
prerollId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.API_v1_Preroll_Request.PrerollMediaItem}
 */
proto.rv.data.API_v1_Preroll_Request.PrerollMediaItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.API_v1_Preroll_Request.PrerollMediaItem;
  return proto.rv.data.API_v1_Preroll_Request.PrerollMediaItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.API_v1_Preroll_Request.PrerollMediaItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.API_v1_Preroll_Request.PrerollMediaItem}
 */
proto.rv.data.API_v1_Preroll_Request.PrerollMediaItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.API_v1_Identifier;
      reader.readMessage(value,proto.rv.data.API_v1_Identifier.deserializeBinaryFromReader);
      msg.addPath(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPrerollId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.API_v1_Preroll_Request.PrerollMediaItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.API_v1_Preroll_Request.PrerollMediaItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.API_v1_Preroll_Request.PrerollMediaItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.API_v1_Preroll_Request.PrerollMediaItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPathList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rv.data.API_v1_Identifier.serializeBinaryToWriter
    );
  }
  f = message.getPrerollId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * repeated API_v1_Identifier path = 1;
 * @return {!Array<!proto.rv.data.API_v1_Identifier>}
 */
proto.rv.data.API_v1_Preroll_Request.PrerollMediaItem.prototype.getPathList = function() {
  return /** @type{!Array<!proto.rv.data.API_v1_Identifier>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rv.data.API_v1_Identifier, 1));
};


/**
 * @param {!Array<!proto.rv.data.API_v1_Identifier>} value
 * @return {!proto.rv.data.API_v1_Preroll_Request.PrerollMediaItem} returns this
*/
proto.rv.data.API_v1_Preroll_Request.PrerollMediaItem.prototype.setPathList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.rv.data.API_v1_Identifier=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rv.data.API_v1_Identifier}
 */
proto.rv.data.API_v1_Preroll_Request.PrerollMediaItem.prototype.addPath = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rv.data.API_v1_Identifier, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.API_v1_Preroll_Request.PrerollMediaItem} returns this
 */
proto.rv.data.API_v1_Preroll_Request.PrerollMediaItem.prototype.clearPathList = function() {
  return this.setPathList([]);
};


/**
 * optional uint64 preroll_id = 2;
 * @return {number}
 */
proto.rv.data.API_v1_Preroll_Request.PrerollMediaItem.prototype.getPrerollId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.API_v1_Preroll_Request.PrerollMediaItem} returns this
 */
proto.rv.data.API_v1_Preroll_Request.PrerollMediaItem.prototype.setPrerollId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rv.data.API_v1_Preroll_Request.PrerollAudioItem.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.API_v1_Preroll_Request.PrerollAudioItem.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.API_v1_Preroll_Request.PrerollAudioItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.API_v1_Preroll_Request.PrerollAudioItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.API_v1_Preroll_Request.PrerollAudioItem.toObject = function(includeInstance, msg) {
  var f, obj = {
pathList: jspb.Message.toObjectList(msg.getPathList(),
    proto.rv.data.API_v1_Identifier.toObject, includeInstance),
prerollId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.API_v1_Preroll_Request.PrerollAudioItem}
 */
proto.rv.data.API_v1_Preroll_Request.PrerollAudioItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.API_v1_Preroll_Request.PrerollAudioItem;
  return proto.rv.data.API_v1_Preroll_Request.PrerollAudioItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.API_v1_Preroll_Request.PrerollAudioItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.API_v1_Preroll_Request.PrerollAudioItem}
 */
proto.rv.data.API_v1_Preroll_Request.PrerollAudioItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.API_v1_Identifier;
      reader.readMessage(value,proto.rv.data.API_v1_Identifier.deserializeBinaryFromReader);
      msg.addPath(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPrerollId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.API_v1_Preroll_Request.PrerollAudioItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.API_v1_Preroll_Request.PrerollAudioItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.API_v1_Preroll_Request.PrerollAudioItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.API_v1_Preroll_Request.PrerollAudioItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPathList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rv.data.API_v1_Identifier.serializeBinaryToWriter
    );
  }
  f = message.getPrerollId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * repeated API_v1_Identifier path = 1;
 * @return {!Array<!proto.rv.data.API_v1_Identifier>}
 */
proto.rv.data.API_v1_Preroll_Request.PrerollAudioItem.prototype.getPathList = function() {
  return /** @type{!Array<!proto.rv.data.API_v1_Identifier>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rv.data.API_v1_Identifier, 1));
};


/**
 * @param {!Array<!proto.rv.data.API_v1_Identifier>} value
 * @return {!proto.rv.data.API_v1_Preroll_Request.PrerollAudioItem} returns this
*/
proto.rv.data.API_v1_Preroll_Request.PrerollAudioItem.prototype.setPathList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.rv.data.API_v1_Identifier=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rv.data.API_v1_Identifier}
 */
proto.rv.data.API_v1_Preroll_Request.PrerollAudioItem.prototype.addPath = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rv.data.API_v1_Identifier, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.API_v1_Preroll_Request.PrerollAudioItem} returns this
 */
proto.rv.data.API_v1_Preroll_Request.PrerollAudioItem.prototype.clearPathList = function() {
  return this.setPathList([]);
};


/**
 * optional uint64 preroll_id = 2;
 * @return {number}
 */
proto.rv.data.API_v1_Preroll_Request.PrerollAudioItem.prototype.getPrerollId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.API_v1_Preroll_Request.PrerollAudioItem} returns this
 */
proto.rv.data.API_v1_Preroll_Request.PrerollAudioItem.prototype.setPrerollId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.API_v1_Preroll_Request.PrerollVideoInput.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.API_v1_Preroll_Request.PrerollVideoInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.API_v1_Preroll_Request.PrerollVideoInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.API_v1_Preroll_Request.PrerollVideoInput.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, ""),
prerollId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.API_v1_Preroll_Request.PrerollVideoInput}
 */
proto.rv.data.API_v1_Preroll_Request.PrerollVideoInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.API_v1_Preroll_Request.PrerollVideoInput;
  return proto.rv.data.API_v1_Preroll_Request.PrerollVideoInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.API_v1_Preroll_Request.PrerollVideoInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.API_v1_Preroll_Request.PrerollVideoInput}
 */
proto.rv.data.API_v1_Preroll_Request.PrerollVideoInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPrerollId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.API_v1_Preroll_Request.PrerollVideoInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.API_v1_Preroll_Request.PrerollVideoInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.API_v1_Preroll_Request.PrerollVideoInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.API_v1_Preroll_Request.PrerollVideoInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPrerollId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.rv.data.API_v1_Preroll_Request.PrerollVideoInput.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.API_v1_Preroll_Request.PrerollVideoInput} returns this
 */
proto.rv.data.API_v1_Preroll_Request.PrerollVideoInput.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 preroll_id = 2;
 * @return {number}
 */
proto.rv.data.API_v1_Preroll_Request.PrerollVideoInput.prototype.getPrerollId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.API_v1_Preroll_Request.PrerollVideoInput} returns this
 */
proto.rv.data.API_v1_Preroll_Request.PrerollVideoInput.prototype.setPrerollId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rv.data.API_v1_Preroll_Request.PrerollLibraryItem.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.API_v1_Preroll_Request.PrerollLibraryItem.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.API_v1_Preroll_Request.PrerollLibraryItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.API_v1_Preroll_Request.PrerollLibraryItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.API_v1_Preroll_Request.PrerollLibraryItem.toObject = function(includeInstance, msg) {
  var f, obj = {
pathList: jspb.Message.toObjectList(msg.getPathList(),
    proto.rv.data.API_v1_Identifier.toObject, includeInstance),
prerollId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.API_v1_Preroll_Request.PrerollLibraryItem}
 */
proto.rv.data.API_v1_Preroll_Request.PrerollLibraryItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.API_v1_Preroll_Request.PrerollLibraryItem;
  return proto.rv.data.API_v1_Preroll_Request.PrerollLibraryItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.API_v1_Preroll_Request.PrerollLibraryItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.API_v1_Preroll_Request.PrerollLibraryItem}
 */
proto.rv.data.API_v1_Preroll_Request.PrerollLibraryItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.API_v1_Identifier;
      reader.readMessage(value,proto.rv.data.API_v1_Identifier.deserializeBinaryFromReader);
      msg.addPath(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPrerollId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.API_v1_Preroll_Request.PrerollLibraryItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.API_v1_Preroll_Request.PrerollLibraryItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.API_v1_Preroll_Request.PrerollLibraryItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.API_v1_Preroll_Request.PrerollLibraryItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPathList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rv.data.API_v1_Identifier.serializeBinaryToWriter
    );
  }
  f = message.getPrerollId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * repeated API_v1_Identifier path = 1;
 * @return {!Array<!proto.rv.data.API_v1_Identifier>}
 */
proto.rv.data.API_v1_Preroll_Request.PrerollLibraryItem.prototype.getPathList = function() {
  return /** @type{!Array<!proto.rv.data.API_v1_Identifier>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rv.data.API_v1_Identifier, 1));
};


/**
 * @param {!Array<!proto.rv.data.API_v1_Identifier>} value
 * @return {!proto.rv.data.API_v1_Preroll_Request.PrerollLibraryItem} returns this
*/
proto.rv.data.API_v1_Preroll_Request.PrerollLibraryItem.prototype.setPathList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.rv.data.API_v1_Identifier=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rv.data.API_v1_Identifier}
 */
proto.rv.data.API_v1_Preroll_Request.PrerollLibraryItem.prototype.addPath = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rv.data.API_v1_Identifier, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.API_v1_Preroll_Request.PrerollLibraryItem} returns this
 */
proto.rv.data.API_v1_Preroll_Request.PrerollLibraryItem.prototype.clearPathList = function() {
  return this.setPathList([]);
};


/**
 * optional uint64 preroll_id = 2;
 * @return {number}
 */
proto.rv.data.API_v1_Preroll_Request.PrerollLibraryItem.prototype.getPrerollId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.API_v1_Preroll_Request.PrerollLibraryItem} returns this
 */
proto.rv.data.API_v1_Preroll_Request.PrerollLibraryItem.prototype.setPrerollId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.API_v1_Preroll_Request.PrerollNext.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.API_v1_Preroll_Request.PrerollNext.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.API_v1_Preroll_Request.PrerollNext} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.API_v1_Preroll_Request.PrerollNext.toObject = function(includeInstance, msg) {
  var f, obj = {
prerollId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.API_v1_Preroll_Request.PrerollNext}
 */
proto.rv.data.API_v1_Preroll_Request.PrerollNext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.API_v1_Preroll_Request.PrerollNext;
  return proto.rv.data.API_v1_Preroll_Request.PrerollNext.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.API_v1_Preroll_Request.PrerollNext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.API_v1_Preroll_Request.PrerollNext}
 */
proto.rv.data.API_v1_Preroll_Request.PrerollNext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPrerollId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.API_v1_Preroll_Request.PrerollNext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.API_v1_Preroll_Request.PrerollNext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.API_v1_Preroll_Request.PrerollNext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.API_v1_Preroll_Request.PrerollNext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrerollId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 preroll_id = 1;
 * @return {number}
 */
proto.rv.data.API_v1_Preroll_Request.PrerollNext.prototype.getPrerollId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.API_v1_Preroll_Request.PrerollNext} returns this
 */
proto.rv.data.API_v1_Preroll_Request.PrerollNext.prototype.setPrerollId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.API_v1_Preroll_Request.PrerollPrevious.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.API_v1_Preroll_Request.PrerollPrevious.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.API_v1_Preroll_Request.PrerollPrevious} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.API_v1_Preroll_Request.PrerollPrevious.toObject = function(includeInstance, msg) {
  var f, obj = {
prerollId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.API_v1_Preroll_Request.PrerollPrevious}
 */
proto.rv.data.API_v1_Preroll_Request.PrerollPrevious.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.API_v1_Preroll_Request.PrerollPrevious;
  return proto.rv.data.API_v1_Preroll_Request.PrerollPrevious.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.API_v1_Preroll_Request.PrerollPrevious} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.API_v1_Preroll_Request.PrerollPrevious}
 */
proto.rv.data.API_v1_Preroll_Request.PrerollPrevious.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPrerollId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.API_v1_Preroll_Request.PrerollPrevious.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.API_v1_Preroll_Request.PrerollPrevious.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.API_v1_Preroll_Request.PrerollPrevious} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.API_v1_Preroll_Request.PrerollPrevious.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrerollId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 preroll_id = 1;
 * @return {number}
 */
proto.rv.data.API_v1_Preroll_Request.PrerollPrevious.prototype.getPrerollId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.API_v1_Preroll_Request.PrerollPrevious} returns this
 */
proto.rv.data.API_v1_Preroll_Request.PrerollPrevious.prototype.setPrerollId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.API_v1_Preroll_Request.ActivatePrerollItem.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.API_v1_Preroll_Request.ActivatePrerollItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.API_v1_Preroll_Request.ActivatePrerollItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.API_v1_Preroll_Request.ActivatePrerollItem.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, 0),
time: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.API_v1_Preroll_Request.ActivatePrerollItem}
 */
proto.rv.data.API_v1_Preroll_Request.ActivatePrerollItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.API_v1_Preroll_Request.ActivatePrerollItem;
  return proto.rv.data.API_v1_Preroll_Request.ActivatePrerollItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.API_v1_Preroll_Request.ActivatePrerollItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.API_v1_Preroll_Request.ActivatePrerollItem}
 */
proto.rv.data.API_v1_Preroll_Request.ActivatePrerollItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.API_v1_Preroll_Request.ActivatePrerollItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.API_v1_Preroll_Request.ActivatePrerollItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.API_v1_Preroll_Request.ActivatePrerollItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.API_v1_Preroll_Request.ActivatePrerollItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.rv.data.API_v1_Preroll_Request.ActivatePrerollItem.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.API_v1_Preroll_Request.ActivatePrerollItem} returns this
 */
proto.rv.data.API_v1_Preroll_Request.ActivatePrerollItem.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 time = 2;
 * @return {number}
 */
proto.rv.data.API_v1_Preroll_Request.ActivatePrerollItem.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.API_v1_Preroll_Request.ActivatePrerollItem} returns this
 */
proto.rv.data.API_v1_Preroll_Request.ActivatePrerollItem.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.API_v1_Preroll_Request.CancelPrerollItem.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.API_v1_Preroll_Request.CancelPrerollItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.API_v1_Preroll_Request.CancelPrerollItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.API_v1_Preroll_Request.CancelPrerollItem.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.API_v1_Preroll_Request.CancelPrerollItem}
 */
proto.rv.data.API_v1_Preroll_Request.CancelPrerollItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.API_v1_Preroll_Request.CancelPrerollItem;
  return proto.rv.data.API_v1_Preroll_Request.CancelPrerollItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.API_v1_Preroll_Request.CancelPrerollItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.API_v1_Preroll_Request.CancelPrerollItem}
 */
proto.rv.data.API_v1_Preroll_Request.CancelPrerollItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.API_v1_Preroll_Request.CancelPrerollItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.API_v1_Preroll_Request.CancelPrerollItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.API_v1_Preroll_Request.CancelPrerollItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.API_v1_Preroll_Request.CancelPrerollItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.rv.data.API_v1_Preroll_Request.CancelPrerollItem.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.API_v1_Preroll_Request.CancelPrerollItem} returns this
 */
proto.rv.data.API_v1_Preroll_Request.CancelPrerollItem.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional PrerollCue preroll_cue = 1;
 * @return {?proto.rv.data.API_v1_Preroll_Request.PrerollCue}
 */
proto.rv.data.API_v1_Preroll_Request.prototype.getPrerollCue = function() {
  return /** @type{?proto.rv.data.API_v1_Preroll_Request.PrerollCue} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.API_v1_Preroll_Request.PrerollCue, 1));
};


/**
 * @param {?proto.rv.data.API_v1_Preroll_Request.PrerollCue|undefined} value
 * @return {!proto.rv.data.API_v1_Preroll_Request} returns this
*/
proto.rv.data.API_v1_Preroll_Request.prototype.setPrerollCue = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.rv.data.API_v1_Preroll_Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.API_v1_Preroll_Request} returns this
 */
proto.rv.data.API_v1_Preroll_Request.prototype.clearPrerollCue = function() {
  return this.setPrerollCue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.API_v1_Preroll_Request.prototype.hasPrerollCue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PrerollPlaylistItem preroll_playlist_item = 2;
 * @return {?proto.rv.data.API_v1_Preroll_Request.PrerollPlaylistItem}
 */
proto.rv.data.API_v1_Preroll_Request.prototype.getPrerollPlaylistItem = function() {
  return /** @type{?proto.rv.data.API_v1_Preroll_Request.PrerollPlaylistItem} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.API_v1_Preroll_Request.PrerollPlaylistItem, 2));
};


/**
 * @param {?proto.rv.data.API_v1_Preroll_Request.PrerollPlaylistItem|undefined} value
 * @return {!proto.rv.data.API_v1_Preroll_Request} returns this
*/
proto.rv.data.API_v1_Preroll_Request.prototype.setPrerollPlaylistItem = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.rv.data.API_v1_Preroll_Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.API_v1_Preroll_Request} returns this
 */
proto.rv.data.API_v1_Preroll_Request.prototype.clearPrerollPlaylistItem = function() {
  return this.setPrerollPlaylistItem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.API_v1_Preroll_Request.prototype.hasPrerollPlaylistItem = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PrerollMediaItem preroll_media_item = 3;
 * @return {?proto.rv.data.API_v1_Preroll_Request.PrerollMediaItem}
 */
proto.rv.data.API_v1_Preroll_Request.prototype.getPrerollMediaItem = function() {
  return /** @type{?proto.rv.data.API_v1_Preroll_Request.PrerollMediaItem} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.API_v1_Preroll_Request.PrerollMediaItem, 3));
};


/**
 * @param {?proto.rv.data.API_v1_Preroll_Request.PrerollMediaItem|undefined} value
 * @return {!proto.rv.data.API_v1_Preroll_Request} returns this
*/
proto.rv.data.API_v1_Preroll_Request.prototype.setPrerollMediaItem = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.rv.data.API_v1_Preroll_Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.API_v1_Preroll_Request} returns this
 */
proto.rv.data.API_v1_Preroll_Request.prototype.clearPrerollMediaItem = function() {
  return this.setPrerollMediaItem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.API_v1_Preroll_Request.prototype.hasPrerollMediaItem = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PrerollAudioItem preroll_audio_item = 4;
 * @return {?proto.rv.data.API_v1_Preroll_Request.PrerollAudioItem}
 */
proto.rv.data.API_v1_Preroll_Request.prototype.getPrerollAudioItem = function() {
  return /** @type{?proto.rv.data.API_v1_Preroll_Request.PrerollAudioItem} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.API_v1_Preroll_Request.PrerollAudioItem, 4));
};


/**
 * @param {?proto.rv.data.API_v1_Preroll_Request.PrerollAudioItem|undefined} value
 * @return {!proto.rv.data.API_v1_Preroll_Request} returns this
*/
proto.rv.data.API_v1_Preroll_Request.prototype.setPrerollAudioItem = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.rv.data.API_v1_Preroll_Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.API_v1_Preroll_Request} returns this
 */
proto.rv.data.API_v1_Preroll_Request.prototype.clearPrerollAudioItem = function() {
  return this.setPrerollAudioItem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.API_v1_Preroll_Request.prototype.hasPrerollAudioItem = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional PrerollVideoInput preroll_video_input = 5;
 * @return {?proto.rv.data.API_v1_Preroll_Request.PrerollVideoInput}
 */
proto.rv.data.API_v1_Preroll_Request.prototype.getPrerollVideoInput = function() {
  return /** @type{?proto.rv.data.API_v1_Preroll_Request.PrerollVideoInput} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.API_v1_Preroll_Request.PrerollVideoInput, 5));
};


/**
 * @param {?proto.rv.data.API_v1_Preroll_Request.PrerollVideoInput|undefined} value
 * @return {!proto.rv.data.API_v1_Preroll_Request} returns this
*/
proto.rv.data.API_v1_Preroll_Request.prototype.setPrerollVideoInput = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.rv.data.API_v1_Preroll_Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.API_v1_Preroll_Request} returns this
 */
proto.rv.data.API_v1_Preroll_Request.prototype.clearPrerollVideoInput = function() {
  return this.setPrerollVideoInput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.API_v1_Preroll_Request.prototype.hasPrerollVideoInput = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional PrerollLibraryItem preroll_library_item = 6;
 * @return {?proto.rv.data.API_v1_Preroll_Request.PrerollLibraryItem}
 */
proto.rv.data.API_v1_Preroll_Request.prototype.getPrerollLibraryItem = function() {
  return /** @type{?proto.rv.data.API_v1_Preroll_Request.PrerollLibraryItem} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.API_v1_Preroll_Request.PrerollLibraryItem, 6));
};


/**
 * @param {?proto.rv.data.API_v1_Preroll_Request.PrerollLibraryItem|undefined} value
 * @return {!proto.rv.data.API_v1_Preroll_Request} returns this
*/
proto.rv.data.API_v1_Preroll_Request.prototype.setPrerollLibraryItem = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.rv.data.API_v1_Preroll_Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.API_v1_Preroll_Request} returns this
 */
proto.rv.data.API_v1_Preroll_Request.prototype.clearPrerollLibraryItem = function() {
  return this.setPrerollLibraryItem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.API_v1_Preroll_Request.prototype.hasPrerollLibraryItem = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional PrerollNext preroll_next = 7;
 * @return {?proto.rv.data.API_v1_Preroll_Request.PrerollNext}
 */
proto.rv.data.API_v1_Preroll_Request.prototype.getPrerollNext = function() {
  return /** @type{?proto.rv.data.API_v1_Preroll_Request.PrerollNext} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.API_v1_Preroll_Request.PrerollNext, 7));
};


/**
 * @param {?proto.rv.data.API_v1_Preroll_Request.PrerollNext|undefined} value
 * @return {!proto.rv.data.API_v1_Preroll_Request} returns this
*/
proto.rv.data.API_v1_Preroll_Request.prototype.setPrerollNext = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.rv.data.API_v1_Preroll_Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.API_v1_Preroll_Request} returns this
 */
proto.rv.data.API_v1_Preroll_Request.prototype.clearPrerollNext = function() {
  return this.setPrerollNext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.API_v1_Preroll_Request.prototype.hasPrerollNext = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional PrerollPrevious preroll_previous = 8;
 * @return {?proto.rv.data.API_v1_Preroll_Request.PrerollPrevious}
 */
proto.rv.data.API_v1_Preroll_Request.prototype.getPrerollPrevious = function() {
  return /** @type{?proto.rv.data.API_v1_Preroll_Request.PrerollPrevious} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.API_v1_Preroll_Request.PrerollPrevious, 8));
};


/**
 * @param {?proto.rv.data.API_v1_Preroll_Request.PrerollPrevious|undefined} value
 * @return {!proto.rv.data.API_v1_Preroll_Request} returns this
*/
proto.rv.data.API_v1_Preroll_Request.prototype.setPrerollPrevious = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.rv.data.API_v1_Preroll_Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.API_v1_Preroll_Request} returns this
 */
proto.rv.data.API_v1_Preroll_Request.prototype.clearPrerollPrevious = function() {
  return this.setPrerollPrevious(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.API_v1_Preroll_Request.prototype.hasPrerollPrevious = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional ActivatePrerollItem activate_preroll_item = 9;
 * @return {?proto.rv.data.API_v1_Preroll_Request.ActivatePrerollItem}
 */
proto.rv.data.API_v1_Preroll_Request.prototype.getActivatePrerollItem = function() {
  return /** @type{?proto.rv.data.API_v1_Preroll_Request.ActivatePrerollItem} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.API_v1_Preroll_Request.ActivatePrerollItem, 9));
};


/**
 * @param {?proto.rv.data.API_v1_Preroll_Request.ActivatePrerollItem|undefined} value
 * @return {!proto.rv.data.API_v1_Preroll_Request} returns this
*/
proto.rv.data.API_v1_Preroll_Request.prototype.setActivatePrerollItem = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.rv.data.API_v1_Preroll_Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.API_v1_Preroll_Request} returns this
 */
proto.rv.data.API_v1_Preroll_Request.prototype.clearActivatePrerollItem = function() {
  return this.setActivatePrerollItem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.API_v1_Preroll_Request.prototype.hasActivatePrerollItem = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional CancelPrerollItem cancel_preroll_item = 10;
 * @return {?proto.rv.data.API_v1_Preroll_Request.CancelPrerollItem}
 */
proto.rv.data.API_v1_Preroll_Request.prototype.getCancelPrerollItem = function() {
  return /** @type{?proto.rv.data.API_v1_Preroll_Request.CancelPrerollItem} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.API_v1_Preroll_Request.CancelPrerollItem, 10));
};


/**
 * @param {?proto.rv.data.API_v1_Preroll_Request.CancelPrerollItem|undefined} value
 * @return {!proto.rv.data.API_v1_Preroll_Request} returns this
*/
proto.rv.data.API_v1_Preroll_Request.prototype.setCancelPrerollItem = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.rv.data.API_v1_Preroll_Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.API_v1_Preroll_Request} returns this
 */
proto.rv.data.API_v1_Preroll_Request.prototype.clearCancelPrerollItem = function() {
  return this.setCancelPrerollItem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.API_v1_Preroll_Request.prototype.hasCancelPrerollItem = function() {
  return jspb.Message.getField(this, 10) != null;
};


