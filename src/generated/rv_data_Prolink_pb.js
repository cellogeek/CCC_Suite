// source: proApi.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.rv.data.ProLink');
goog.provide('proto.rv.data.ProLink.ClientAction');
goog.provide('proto.rv.data.ProLink.ClientAction.ActiontypeCase');
goog.provide('proto.rv.data.ProLink.ClientAction.AddConnection');
goog.provide('proto.rv.data.ProLink.ClientAction.CancelAction');
goog.provide('proto.rv.data.ProLink.ClientAction.RemoveConnection');
goog.provide('proto.rv.data.ProLink.ClientAction.RenderTime');
goog.provide('proto.rv.data.ProLink.GroupDefinition');
goog.provide('proto.rv.data.ProLink.GroupDefinition.Member');
goog.provide('proto.rv.data.ProLink.HandlerIn');
goog.provide('proto.rv.data.ProLink.HandlerIn.AddConnectionResult');
goog.provide('proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure');
goog.provide('proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.AlreadyInGroup');
goog.provide('proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotAdd');
goog.provide('proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotJoin');
goog.provide('proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Declined');
goog.provide('proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InOtherGroup');
goog.provide('proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InvalidIpAddress');
goog.provide('proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.LinkDisabled');
goog.provide('proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.ReasonCase');
goog.provide('proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Timeout');
goog.provide('proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Unexpected');
goog.provide('proto.rv.data.ProLink.HandlerIn.AddConnectionResult.ResultCase');
goog.provide('proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Success');
goog.provide('proto.rv.data.ProLink.HandlerIn.ConfigurationRequest');
goog.provide('proto.rv.data.ProLink.HandlerIn.GroupDefinitionRequest');
goog.provide('proto.rv.data.ProLink.HandlerIn.GroupJoinConfirmation');
goog.provide('proto.rv.data.ProLink.HandlerIn.GroupJoinPassword');
goog.provide('proto.rv.data.ProLink.HandlerIn.GroupName');
goog.provide('proto.rv.data.ProLink.HandlerIn.LogRequest');
goog.provide('proto.rv.data.ProLink.HandlerIn.LogRequest.Severity');
goog.provide('proto.rv.data.ProLink.HandlerIn.MemberStatusChange');
goog.provide('proto.rv.data.ProLink.HandlerIn.ProPresenterInfo');
goog.provide('proto.rv.data.ProLink.HandlerIn.RequestCase');
goog.provide('proto.rv.data.ProLink.HandlerIn.ServerState');
goog.provide('proto.rv.data.ProLink.HandlerOut');
goog.provide('proto.rv.data.ProLink.HandlerOut.GroupJoinConfirmation');
goog.provide('proto.rv.data.ProLink.HandlerOut.GroupJoinPassword');
goog.provide('proto.rv.data.ProLink.HandlerOut.GroupName');
goog.provide('proto.rv.data.ProLink.HandlerOut.ProPresenterInfo');
goog.provide('proto.rv.data.ProLink.HandlerOut.ResponseCase');
goog.provide('proto.rv.data.ProLink.MemberStatus');
goog.provide('proto.rv.data.ProLink.MemberStatus.ConnectionStatus');
goog.provide('proto.rv.data.ProLink.TowerMessage');
goog.provide('proto.rv.data.ProLink.TowerMessage.TowerAddMemberRequest');
goog.provide('proto.rv.data.ProLink.TowerMessage.TowerAddMemberRequest.RequestCase');
goog.provide('proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse');
goog.provide('proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.Accept');
goog.provide('proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.DeclineReason');
goog.provide('proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.ResponseCase');
goog.provide('proto.rv.data.ProLink.TowerMessage.TowerHeartbeatRequest');
goog.provide('proto.rv.data.ProLink.TowerMessage.TowerHeartbeatResponse');
goog.provide('proto.rv.data.ProLink.TowerMessage.TowerRemoveMemberRequest');
goog.provide('proto.rv.data.ProLink.TowerMessage.TowerStatusRequest');
goog.provide('proto.rv.data.ProLink.TowerMessage.TowerStatusResponse');
goog.provide('proto.rv.data.ProLink.TowerMessage.TowerStatusResponse.ResponseCase');
goog.provide('proto.rv.data.ProLink.ZeroConfig');
goog.provide('proto.rv.data.ProLink.ZeroConfig.MulticastPacket');
goog.provide('proto.rv.data.ProLink.ZeroConfig.NetworkEnvironment');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.rv.data.ProApiNetworkConfiguration');
goog.require('proto.rv.data.Timestamp');
goog.require('proto.rv.data.UUID');

goog.forwardDeclare('proto.rv.data.ApplicationInfo.Platform');
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProLink = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ProLink, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProLink.displayName = 'proto.rv.data.ProLink';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProLink.GroupDefinition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rv.data.ProLink.GroupDefinition.repeatedFields_, null);
};
goog.inherits(proto.rv.data.ProLink.GroupDefinition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProLink.GroupDefinition.displayName = 'proto.rv.data.ProLink.GroupDefinition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProLink.GroupDefinition.Member = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ProLink.GroupDefinition.Member, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProLink.GroupDefinition.Member.displayName = 'proto.rv.data.ProLink.GroupDefinition.Member';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProLink.ZeroConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ProLink.ZeroConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProLink.ZeroConfig.displayName = 'proto.rv.data.ProLink.ZeroConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProLink.ZeroConfig.NetworkEnvironment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rv.data.ProLink.ZeroConfig.NetworkEnvironment.repeatedFields_, null);
};
goog.inherits(proto.rv.data.ProLink.ZeroConfig.NetworkEnvironment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProLink.ZeroConfig.NetworkEnvironment.displayName = 'proto.rv.data.ProLink.ZeroConfig.NetworkEnvironment';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProLink.ZeroConfig.MulticastPacket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ProLink.ZeroConfig.MulticastPacket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProLink.ZeroConfig.MulticastPacket.displayName = 'proto.rv.data.ProLink.ZeroConfig.MulticastPacket';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProLink.TowerMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ProLink.TowerMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProLink.TowerMessage.displayName = 'proto.rv.data.ProLink.TowerMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProLink.TowerMessage.TowerStatusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ProLink.TowerMessage.TowerStatusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProLink.TowerMessage.TowerStatusRequest.displayName = 'proto.rv.data.ProLink.TowerMessage.TowerStatusRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProLink.TowerMessage.TowerStatusResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rv.data.ProLink.TowerMessage.TowerStatusResponse.oneofGroups_);
};
goog.inherits(proto.rv.data.ProLink.TowerMessage.TowerStatusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProLink.TowerMessage.TowerStatusResponse.displayName = 'proto.rv.data.ProLink.TowerMessage.TowerStatusResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProLink.TowerMessage.TowerAddMemberRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rv.data.ProLink.TowerMessage.TowerAddMemberRequest.oneofGroups_);
};
goog.inherits(proto.rv.data.ProLink.TowerMessage.TowerAddMemberRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProLink.TowerMessage.TowerAddMemberRequest.displayName = 'proto.rv.data.ProLink.TowerMessage.TowerAddMemberRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProLink.TowerMessage.TowerRemoveMemberRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ProLink.TowerMessage.TowerRemoveMemberRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProLink.TowerMessage.TowerRemoveMemberRequest.displayName = 'proto.rv.data.ProLink.TowerMessage.TowerRemoveMemberRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.oneofGroups_);
};
goog.inherits(proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.displayName = 'proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.Accept = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.Accept, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.Accept.displayName = 'proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.Accept';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProLink.TowerMessage.TowerHeartbeatRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ProLink.TowerMessage.TowerHeartbeatRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProLink.TowerMessage.TowerHeartbeatRequest.displayName = 'proto.rv.data.ProLink.TowerMessage.TowerHeartbeatRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProLink.TowerMessage.TowerHeartbeatResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ProLink.TowerMessage.TowerHeartbeatResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProLink.TowerMessage.TowerHeartbeatResponse.displayName = 'proto.rv.data.ProLink.TowerMessage.TowerHeartbeatResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProLink.MemberStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ProLink.MemberStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProLink.MemberStatus.displayName = 'proto.rv.data.ProLink.MemberStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProLink.ClientAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rv.data.ProLink.ClientAction.oneofGroups_);
};
goog.inherits(proto.rv.data.ProLink.ClientAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProLink.ClientAction.displayName = 'proto.rv.data.ProLink.ClientAction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProLink.ClientAction.AddConnection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ProLink.ClientAction.AddConnection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProLink.ClientAction.AddConnection.displayName = 'proto.rv.data.ProLink.ClientAction.AddConnection';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProLink.ClientAction.RemoveConnection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ProLink.ClientAction.RemoveConnection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProLink.ClientAction.RemoveConnection.displayName = 'proto.rv.data.ProLink.ClientAction.RemoveConnection';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProLink.ClientAction.CancelAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ProLink.ClientAction.CancelAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProLink.ClientAction.CancelAction.displayName = 'proto.rv.data.ProLink.ClientAction.CancelAction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProLink.ClientAction.RenderTime = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ProLink.ClientAction.RenderTime, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProLink.ClientAction.RenderTime.displayName = 'proto.rv.data.ProLink.ClientAction.RenderTime';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProLink.HandlerIn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rv.data.ProLink.HandlerIn.oneofGroups_);
};
goog.inherits(proto.rv.data.ProLink.HandlerIn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProLink.HandlerIn.displayName = 'proto.rv.data.ProLink.HandlerIn';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProLink.HandlerIn.GroupName = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ProLink.HandlerIn.GroupName, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProLink.HandlerIn.GroupName.displayName = 'proto.rv.data.ProLink.HandlerIn.GroupName';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProLink.HandlerIn.GroupDefinitionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ProLink.HandlerIn.GroupDefinitionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProLink.HandlerIn.GroupDefinitionRequest.displayName = 'proto.rv.data.ProLink.HandlerIn.GroupDefinitionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProLink.HandlerIn.GroupJoinConfirmation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ProLink.HandlerIn.GroupJoinConfirmation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProLink.HandlerIn.GroupJoinConfirmation.displayName = 'proto.rv.data.ProLink.HandlerIn.GroupJoinConfirmation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProLink.HandlerIn.GroupJoinPassword = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ProLink.HandlerIn.GroupJoinPassword, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProLink.HandlerIn.GroupJoinPassword.displayName = 'proto.rv.data.ProLink.HandlerIn.GroupJoinPassword';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rv.data.ProLink.HandlerIn.AddConnectionResult.oneofGroups_);
};
goog.inherits(proto.rv.data.ProLink.HandlerIn.AddConnectionResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProLink.HandlerIn.AddConnectionResult.displayName = 'proto.rv.data.ProLink.HandlerIn.AddConnectionResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Success = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Success, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Success.displayName = 'proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Success';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.oneofGroups_);
};
goog.inherits(proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.displayName = 'proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Unexpected = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Unexpected, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Unexpected.displayName = 'proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Unexpected';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Declined = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Declined, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Declined.displayName = 'proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Declined';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Timeout = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Timeout, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Timeout.displayName = 'proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Timeout';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.LinkDisabled = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.LinkDisabled, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.LinkDisabled.displayName = 'proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.LinkDisabled';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InOtherGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InOtherGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InOtherGroup.displayName = 'proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InOtherGroup';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InvalidIpAddress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InvalidIpAddress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InvalidIpAddress.displayName = 'proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InvalidIpAddress';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.AlreadyInGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.AlreadyInGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.AlreadyInGroup.displayName = 'proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.AlreadyInGroup';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotAdd = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotAdd, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotAdd.displayName = 'proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotAdd';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotJoin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotJoin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotJoin.displayName = 'proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotJoin';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProLink.HandlerIn.MemberStatusChange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rv.data.ProLink.HandlerIn.MemberStatusChange.repeatedFields_, null);
};
goog.inherits(proto.rv.data.ProLink.HandlerIn.MemberStatusChange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProLink.HandlerIn.MemberStatusChange.displayName = 'proto.rv.data.ProLink.HandlerIn.MemberStatusChange';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProLink.HandlerIn.ProPresenterInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ProLink.HandlerIn.ProPresenterInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProLink.HandlerIn.ProPresenterInfo.displayName = 'proto.rv.data.ProLink.HandlerIn.ProPresenterInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProLink.HandlerIn.ServerState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ProLink.HandlerIn.ServerState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProLink.HandlerIn.ServerState.displayName = 'proto.rv.data.ProLink.HandlerIn.ServerState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProLink.HandlerIn.ConfigurationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ProLink.HandlerIn.ConfigurationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProLink.HandlerIn.ConfigurationRequest.displayName = 'proto.rv.data.ProLink.HandlerIn.ConfigurationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProLink.HandlerIn.LogRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ProLink.HandlerIn.LogRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProLink.HandlerIn.LogRequest.displayName = 'proto.rv.data.ProLink.HandlerIn.LogRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProLink.HandlerOut = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rv.data.ProLink.HandlerOut.oneofGroups_);
};
goog.inherits(proto.rv.data.ProLink.HandlerOut, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProLink.HandlerOut.displayName = 'proto.rv.data.ProLink.HandlerOut';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProLink.HandlerOut.GroupName = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ProLink.HandlerOut.GroupName, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProLink.HandlerOut.GroupName.displayName = 'proto.rv.data.ProLink.HandlerOut.GroupName';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProLink.HandlerOut.GroupJoinConfirmation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ProLink.HandlerOut.GroupJoinConfirmation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProLink.HandlerOut.GroupJoinConfirmation.displayName = 'proto.rv.data.ProLink.HandlerOut.GroupJoinConfirmation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProLink.HandlerOut.GroupJoinPassword = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ProLink.HandlerOut.GroupJoinPassword, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProLink.HandlerOut.GroupJoinPassword.displayName = 'proto.rv.data.ProLink.HandlerOut.GroupJoinPassword';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.ProLink.HandlerOut.ProPresenterInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.ProLink.HandlerOut.ProPresenterInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.ProLink.HandlerOut.ProPresenterInfo.displayName = 'proto.rv.data.ProLink.HandlerOut.ProPresenterInfo';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProLink.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProLink.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProLink} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProLink}
 */
proto.rv.data.ProLink.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProLink;
  return proto.rv.data.ProLink.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProLink} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProLink}
 */
proto.rv.data.ProLink.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProLink.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProLink.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProLink} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rv.data.ProLink.GroupDefinition.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProLink.GroupDefinition.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProLink.GroupDefinition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProLink.GroupDefinition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.GroupDefinition.toObject = function(includeInstance, msg) {
  var f, obj = {
timestamp: (f = msg.getTimestamp()) && proto.rv.data.Timestamp.toObject(includeInstance, f),
secret: jspb.Message.getFieldWithDefault(msg, 2, ""),
name: jspb.Message.getFieldWithDefault(msg, 3, ""),
membersList: jspb.Message.toObjectList(msg.getMembersList(),
    proto.rv.data.ProLink.GroupDefinition.Member.toObject, includeInstance),
groupIdentifier: (f = msg.getGroupIdentifier()) && proto.rv.data.UUID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProLink.GroupDefinition}
 */
proto.rv.data.ProLink.GroupDefinition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProLink.GroupDefinition;
  return proto.rv.data.ProLink.GroupDefinition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProLink.GroupDefinition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProLink.GroupDefinition}
 */
proto.rv.data.ProLink.GroupDefinition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.Timestamp;
      reader.readMessage(value,proto.rv.data.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecret(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = new proto.rv.data.ProLink.GroupDefinition.Member;
      reader.readMessage(value,proto.rv.data.ProLink.GroupDefinition.Member.deserializeBinaryFromReader);
      msg.addMembers(value);
      break;
    case 5:
      var value = new proto.rv.data.UUID;
      reader.readMessage(value,proto.rv.data.UUID.deserializeBinaryFromReader);
      msg.setGroupIdentifier(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProLink.GroupDefinition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProLink.GroupDefinition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProLink.GroupDefinition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.GroupDefinition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getSecret();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMembersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.rv.data.ProLink.GroupDefinition.Member.serializeBinaryToWriter
    );
  }
  f = message.getGroupIdentifier();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.rv.data.UUID.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProLink.GroupDefinition.Member.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProLink.GroupDefinition.Member.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProLink.GroupDefinition.Member} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.GroupDefinition.Member.toObject = function(includeInstance, msg) {
  var f, obj = {
ip: jspb.Message.getFieldWithDefault(msg, 1, ""),
port: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProLink.GroupDefinition.Member}
 */
proto.rv.data.ProLink.GroupDefinition.Member.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProLink.GroupDefinition.Member;
  return proto.rv.data.ProLink.GroupDefinition.Member.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProLink.GroupDefinition.Member} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProLink.GroupDefinition.Member}
 */
proto.rv.data.ProLink.GroupDefinition.Member.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProLink.GroupDefinition.Member.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProLink.GroupDefinition.Member.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProLink.GroupDefinition.Member} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.GroupDefinition.Member.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string ip = 1;
 * @return {string}
 */
proto.rv.data.ProLink.GroupDefinition.Member.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.ProLink.GroupDefinition.Member} returns this
 */
proto.rv.data.ProLink.GroupDefinition.Member.prototype.setIp = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 port = 2;
 * @return {number}
 */
proto.rv.data.ProLink.GroupDefinition.Member.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.ProLink.GroupDefinition.Member} returns this
 */
proto.rv.data.ProLink.GroupDefinition.Member.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Timestamp timestamp = 1;
 * @return {?proto.rv.data.Timestamp}
 */
proto.rv.data.ProLink.GroupDefinition.prototype.getTimestamp = function() {
  return /** @type{?proto.rv.data.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Timestamp, 1));
};


/**
 * @param {?proto.rv.data.Timestamp|undefined} value
 * @return {!proto.rv.data.ProLink.GroupDefinition} returns this
*/
proto.rv.data.ProLink.GroupDefinition.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ProLink.GroupDefinition} returns this
 */
proto.rv.data.ProLink.GroupDefinition.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ProLink.GroupDefinition.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string secret = 2;
 * @return {string}
 */
proto.rv.data.ProLink.GroupDefinition.prototype.getSecret = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.ProLink.GroupDefinition} returns this
 */
proto.rv.data.ProLink.GroupDefinition.prototype.setSecret = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.rv.data.ProLink.GroupDefinition.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.ProLink.GroupDefinition} returns this
 */
proto.rv.data.ProLink.GroupDefinition.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated Member members = 4;
 * @return {!Array<!proto.rv.data.ProLink.GroupDefinition.Member>}
 */
proto.rv.data.ProLink.GroupDefinition.prototype.getMembersList = function() {
  return /** @type{!Array<!proto.rv.data.ProLink.GroupDefinition.Member>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rv.data.ProLink.GroupDefinition.Member, 4));
};


/**
 * @param {!Array<!proto.rv.data.ProLink.GroupDefinition.Member>} value
 * @return {!proto.rv.data.ProLink.GroupDefinition} returns this
*/
proto.rv.data.ProLink.GroupDefinition.prototype.setMembersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.rv.data.ProLink.GroupDefinition.Member=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rv.data.ProLink.GroupDefinition.Member}
 */
proto.rv.data.ProLink.GroupDefinition.prototype.addMembers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.rv.data.ProLink.GroupDefinition.Member, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.ProLink.GroupDefinition} returns this
 */
proto.rv.data.ProLink.GroupDefinition.prototype.clearMembersList = function() {
  return this.setMembersList([]);
};


/**
 * optional UUID group_identifier = 5;
 * @return {?proto.rv.data.UUID}
 */
proto.rv.data.ProLink.GroupDefinition.prototype.getGroupIdentifier = function() {
  return /** @type{?proto.rv.data.UUID} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.UUID, 5));
};


/**
 * @param {?proto.rv.data.UUID|undefined} value
 * @return {!proto.rv.data.ProLink.GroupDefinition} returns this
*/
proto.rv.data.ProLink.GroupDefinition.prototype.setGroupIdentifier = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ProLink.GroupDefinition} returns this
 */
proto.rv.data.ProLink.GroupDefinition.prototype.clearGroupIdentifier = function() {
  return this.setGroupIdentifier(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ProLink.GroupDefinition.prototype.hasGroupIdentifier = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProLink.ZeroConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProLink.ZeroConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProLink.ZeroConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.ZeroConfig.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProLink.ZeroConfig}
 */
proto.rv.data.ProLink.ZeroConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProLink.ZeroConfig;
  return proto.rv.data.ProLink.ZeroConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProLink.ZeroConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProLink.ZeroConfig}
 */
proto.rv.data.ProLink.ZeroConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProLink.ZeroConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProLink.ZeroConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProLink.ZeroConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.ZeroConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rv.data.ProLink.ZeroConfig.NetworkEnvironment.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProLink.ZeroConfig.NetworkEnvironment.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProLink.ZeroConfig.NetworkEnvironment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProLink.ZeroConfig.NetworkEnvironment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.ZeroConfig.NetworkEnvironment.toObject = function(includeInstance, msg) {
  var f, obj = {
availableGroupsList: jspb.Message.toObjectList(msg.getAvailableGroupsList(),
    proto.rv.data.ProLink.GroupDefinition.toObject, includeInstance),
availableDevicesList: jspb.Message.toObjectList(msg.getAvailableDevicesList(),
    proto.rv.data.ProLink.MemberStatus.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProLink.ZeroConfig.NetworkEnvironment}
 */
proto.rv.data.ProLink.ZeroConfig.NetworkEnvironment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProLink.ZeroConfig.NetworkEnvironment;
  return proto.rv.data.ProLink.ZeroConfig.NetworkEnvironment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProLink.ZeroConfig.NetworkEnvironment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProLink.ZeroConfig.NetworkEnvironment}
 */
proto.rv.data.ProLink.ZeroConfig.NetworkEnvironment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.ProLink.GroupDefinition;
      reader.readMessage(value,proto.rv.data.ProLink.GroupDefinition.deserializeBinaryFromReader);
      msg.addAvailableGroups(value);
      break;
    case 2:
      var value = new proto.rv.data.ProLink.MemberStatus;
      reader.readMessage(value,proto.rv.data.ProLink.MemberStatus.deserializeBinaryFromReader);
      msg.addAvailableDevices(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProLink.ZeroConfig.NetworkEnvironment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProLink.ZeroConfig.NetworkEnvironment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProLink.ZeroConfig.NetworkEnvironment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.ZeroConfig.NetworkEnvironment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAvailableGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rv.data.ProLink.GroupDefinition.serializeBinaryToWriter
    );
  }
  f = message.getAvailableDevicesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.rv.data.ProLink.MemberStatus.serializeBinaryToWriter
    );
  }
};


/**
 * repeated GroupDefinition available_groups = 1;
 * @return {!Array<!proto.rv.data.ProLink.GroupDefinition>}
 */
proto.rv.data.ProLink.ZeroConfig.NetworkEnvironment.prototype.getAvailableGroupsList = function() {
  return /** @type{!Array<!proto.rv.data.ProLink.GroupDefinition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rv.data.ProLink.GroupDefinition, 1));
};


/**
 * @param {!Array<!proto.rv.data.ProLink.GroupDefinition>} value
 * @return {!proto.rv.data.ProLink.ZeroConfig.NetworkEnvironment} returns this
*/
proto.rv.data.ProLink.ZeroConfig.NetworkEnvironment.prototype.setAvailableGroupsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.rv.data.ProLink.GroupDefinition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rv.data.ProLink.GroupDefinition}
 */
proto.rv.data.ProLink.ZeroConfig.NetworkEnvironment.prototype.addAvailableGroups = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rv.data.ProLink.GroupDefinition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.ProLink.ZeroConfig.NetworkEnvironment} returns this
 */
proto.rv.data.ProLink.ZeroConfig.NetworkEnvironment.prototype.clearAvailableGroupsList = function() {
  return this.setAvailableGroupsList([]);
};


/**
 * repeated MemberStatus available_devices = 2;
 * @return {!Array<!proto.rv.data.ProLink.MemberStatus>}
 */
proto.rv.data.ProLink.ZeroConfig.NetworkEnvironment.prototype.getAvailableDevicesList = function() {
  return /** @type{!Array<!proto.rv.data.ProLink.MemberStatus>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rv.data.ProLink.MemberStatus, 2));
};


/**
 * @param {!Array<!proto.rv.data.ProLink.MemberStatus>} value
 * @return {!proto.rv.data.ProLink.ZeroConfig.NetworkEnvironment} returns this
*/
proto.rv.data.ProLink.ZeroConfig.NetworkEnvironment.prototype.setAvailableDevicesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.rv.data.ProLink.MemberStatus=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rv.data.ProLink.MemberStatus}
 */
proto.rv.data.ProLink.ZeroConfig.NetworkEnvironment.prototype.addAvailableDevices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.rv.data.ProLink.MemberStatus, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.ProLink.ZeroConfig.NetworkEnvironment} returns this
 */
proto.rv.data.ProLink.ZeroConfig.NetworkEnvironment.prototype.clearAvailableDevicesList = function() {
  return this.setAvailableDevicesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProLink.ZeroConfig.MulticastPacket.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProLink.ZeroConfig.MulticastPacket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProLink.ZeroConfig.MulticastPacket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.ZeroConfig.MulticastPacket.toObject = function(includeInstance, msg) {
  var f, obj = {
group: (f = msg.getGroup()) && proto.rv.data.ProLink.GroupDefinition.toObject(includeInstance, f),
device: (f = msg.getDevice()) && proto.rv.data.ProLink.MemberStatus.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProLink.ZeroConfig.MulticastPacket}
 */
proto.rv.data.ProLink.ZeroConfig.MulticastPacket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProLink.ZeroConfig.MulticastPacket;
  return proto.rv.data.ProLink.ZeroConfig.MulticastPacket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProLink.ZeroConfig.MulticastPacket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProLink.ZeroConfig.MulticastPacket}
 */
proto.rv.data.ProLink.ZeroConfig.MulticastPacket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.ProLink.GroupDefinition;
      reader.readMessage(value,proto.rv.data.ProLink.GroupDefinition.deserializeBinaryFromReader);
      msg.setGroup(value);
      break;
    case 2:
      var value = new proto.rv.data.ProLink.MemberStatus;
      reader.readMessage(value,proto.rv.data.ProLink.MemberStatus.deserializeBinaryFromReader);
      msg.setDevice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProLink.ZeroConfig.MulticastPacket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProLink.ZeroConfig.MulticastPacket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProLink.ZeroConfig.MulticastPacket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.ZeroConfig.MulticastPacket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroup();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.ProLink.GroupDefinition.serializeBinaryToWriter
    );
  }
  f = message.getDevice();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rv.data.ProLink.MemberStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional GroupDefinition group = 1;
 * @return {?proto.rv.data.ProLink.GroupDefinition}
 */
proto.rv.data.ProLink.ZeroConfig.MulticastPacket.prototype.getGroup = function() {
  return /** @type{?proto.rv.data.ProLink.GroupDefinition} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ProLink.GroupDefinition, 1));
};


/**
 * @param {?proto.rv.data.ProLink.GroupDefinition|undefined} value
 * @return {!proto.rv.data.ProLink.ZeroConfig.MulticastPacket} returns this
*/
proto.rv.data.ProLink.ZeroConfig.MulticastPacket.prototype.setGroup = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ProLink.ZeroConfig.MulticastPacket} returns this
 */
proto.rv.data.ProLink.ZeroConfig.MulticastPacket.prototype.clearGroup = function() {
  return this.setGroup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ProLink.ZeroConfig.MulticastPacket.prototype.hasGroup = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MemberStatus device = 2;
 * @return {?proto.rv.data.ProLink.MemberStatus}
 */
proto.rv.data.ProLink.ZeroConfig.MulticastPacket.prototype.getDevice = function() {
  return /** @type{?proto.rv.data.ProLink.MemberStatus} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ProLink.MemberStatus, 2));
};


/**
 * @param {?proto.rv.data.ProLink.MemberStatus|undefined} value
 * @return {!proto.rv.data.ProLink.ZeroConfig.MulticastPacket} returns this
*/
proto.rv.data.ProLink.ZeroConfig.MulticastPacket.prototype.setDevice = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ProLink.ZeroConfig.MulticastPacket} returns this
 */
proto.rv.data.ProLink.ZeroConfig.MulticastPacket.prototype.clearDevice = function() {
  return this.setDevice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ProLink.ZeroConfig.MulticastPacket.prototype.hasDevice = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProLink.TowerMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProLink.TowerMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProLink.TowerMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.TowerMessage.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProLink.TowerMessage}
 */
proto.rv.data.ProLink.TowerMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProLink.TowerMessage;
  return proto.rv.data.ProLink.TowerMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProLink.TowerMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProLink.TowerMessage}
 */
proto.rv.data.ProLink.TowerMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProLink.TowerMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProLink.TowerMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProLink.TowerMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.TowerMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProLink.TowerMessage.TowerStatusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProLink.TowerMessage.TowerStatusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProLink.TowerMessage.TowerStatusRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.TowerMessage.TowerStatusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProLink.TowerMessage.TowerStatusRequest}
 */
proto.rv.data.ProLink.TowerMessage.TowerStatusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProLink.TowerMessage.TowerStatusRequest;
  return proto.rv.data.ProLink.TowerMessage.TowerStatusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProLink.TowerMessage.TowerStatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProLink.TowerMessage.TowerStatusRequest}
 */
proto.rv.data.ProLink.TowerMessage.TowerStatusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProLink.TowerMessage.TowerStatusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProLink.TowerMessage.TowerStatusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProLink.TowerMessage.TowerStatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.TowerMessage.TowerStatusRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rv.data.ProLink.TowerMessage.TowerStatusResponse.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.rv.data.ProLink.TowerMessage.TowerStatusResponse.ResponseCase = {
  RESPONSE_NOT_SET: 0,
  GROUP_DEFINITION: 1
};

/**
 * @return {proto.rv.data.ProLink.TowerMessage.TowerStatusResponse.ResponseCase}
 */
proto.rv.data.ProLink.TowerMessage.TowerStatusResponse.prototype.getResponseCase = function() {
  return /** @type {proto.rv.data.ProLink.TowerMessage.TowerStatusResponse.ResponseCase} */(jspb.Message.computeOneofCase(this, proto.rv.data.ProLink.TowerMessage.TowerStatusResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProLink.TowerMessage.TowerStatusResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProLink.TowerMessage.TowerStatusResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProLink.TowerMessage.TowerStatusResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.TowerMessage.TowerStatusResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
memberName: jspb.Message.getFieldWithDefault(msg, 2, ""),
groupDefinition: (f = msg.getGroupDefinition()) && proto.rv.data.ProLink.GroupDefinition.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProLink.TowerMessage.TowerStatusResponse}
 */
proto.rv.data.ProLink.TowerMessage.TowerStatusResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProLink.TowerMessage.TowerStatusResponse;
  return proto.rv.data.ProLink.TowerMessage.TowerStatusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProLink.TowerMessage.TowerStatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProLink.TowerMessage.TowerStatusResponse}
 */
proto.rv.data.ProLink.TowerMessage.TowerStatusResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemberName(value);
      break;
    case 1:
      var value = new proto.rv.data.ProLink.GroupDefinition;
      reader.readMessage(value,proto.rv.data.ProLink.GroupDefinition.deserializeBinaryFromReader);
      msg.setGroupDefinition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProLink.TowerMessage.TowerStatusResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProLink.TowerMessage.TowerStatusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProLink.TowerMessage.TowerStatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.TowerMessage.TowerStatusResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMemberName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGroupDefinition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.ProLink.GroupDefinition.serializeBinaryToWriter
    );
  }
};


/**
 * optional string member_name = 2;
 * @return {string}
 */
proto.rv.data.ProLink.TowerMessage.TowerStatusResponse.prototype.getMemberName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.ProLink.TowerMessage.TowerStatusResponse} returns this
 */
proto.rv.data.ProLink.TowerMessage.TowerStatusResponse.prototype.setMemberName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional GroupDefinition group_definition = 1;
 * @return {?proto.rv.data.ProLink.GroupDefinition}
 */
proto.rv.data.ProLink.TowerMessage.TowerStatusResponse.prototype.getGroupDefinition = function() {
  return /** @type{?proto.rv.data.ProLink.GroupDefinition} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ProLink.GroupDefinition, 1));
};


/**
 * @param {?proto.rv.data.ProLink.GroupDefinition|undefined} value
 * @return {!proto.rv.data.ProLink.TowerMessage.TowerStatusResponse} returns this
*/
proto.rv.data.ProLink.TowerMessage.TowerStatusResponse.prototype.setGroupDefinition = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.rv.data.ProLink.TowerMessage.TowerStatusResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ProLink.TowerMessage.TowerStatusResponse} returns this
 */
proto.rv.data.ProLink.TowerMessage.TowerStatusResponse.prototype.clearGroupDefinition = function() {
  return this.setGroupDefinition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ProLink.TowerMessage.TowerStatusResponse.prototype.hasGroupDefinition = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rv.data.ProLink.TowerMessage.TowerAddMemberRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.rv.data.ProLink.TowerMessage.TowerAddMemberRequest.RequestCase = {
  REQUEST_NOT_SET: 0,
  GROUP_DEFINITION: 1,
  JOINING_MEMBER: 2
};

/**
 * @return {proto.rv.data.ProLink.TowerMessage.TowerAddMemberRequest.RequestCase}
 */
proto.rv.data.ProLink.TowerMessage.TowerAddMemberRequest.prototype.getRequestCase = function() {
  return /** @type {proto.rv.data.ProLink.TowerMessage.TowerAddMemberRequest.RequestCase} */(jspb.Message.computeOneofCase(this, proto.rv.data.ProLink.TowerMessage.TowerAddMemberRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProLink.TowerMessage.TowerAddMemberRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProLink.TowerMessage.TowerAddMemberRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProLink.TowerMessage.TowerAddMemberRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.TowerMessage.TowerAddMemberRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
groupDefinition: (f = msg.getGroupDefinition()) && proto.rv.data.ProLink.GroupDefinition.toObject(includeInstance, f),
joiningMember: (f = msg.getJoiningMember()) && proto.rv.data.ProLink.GroupDefinition.Member.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProLink.TowerMessage.TowerAddMemberRequest}
 */
proto.rv.data.ProLink.TowerMessage.TowerAddMemberRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProLink.TowerMessage.TowerAddMemberRequest;
  return proto.rv.data.ProLink.TowerMessage.TowerAddMemberRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProLink.TowerMessage.TowerAddMemberRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProLink.TowerMessage.TowerAddMemberRequest}
 */
proto.rv.data.ProLink.TowerMessage.TowerAddMemberRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.ProLink.GroupDefinition;
      reader.readMessage(value,proto.rv.data.ProLink.GroupDefinition.deserializeBinaryFromReader);
      msg.setGroupDefinition(value);
      break;
    case 2:
      var value = new proto.rv.data.ProLink.GroupDefinition.Member;
      reader.readMessage(value,proto.rv.data.ProLink.GroupDefinition.Member.deserializeBinaryFromReader);
      msg.setJoiningMember(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProLink.TowerMessage.TowerAddMemberRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProLink.TowerMessage.TowerAddMemberRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProLink.TowerMessage.TowerAddMemberRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.TowerMessage.TowerAddMemberRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupDefinition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.ProLink.GroupDefinition.serializeBinaryToWriter
    );
  }
  f = message.getJoiningMember();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rv.data.ProLink.GroupDefinition.Member.serializeBinaryToWriter
    );
  }
};


/**
 * optional GroupDefinition group_definition = 1;
 * @return {?proto.rv.data.ProLink.GroupDefinition}
 */
proto.rv.data.ProLink.TowerMessage.TowerAddMemberRequest.prototype.getGroupDefinition = function() {
  return /** @type{?proto.rv.data.ProLink.GroupDefinition} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ProLink.GroupDefinition, 1));
};


/**
 * @param {?proto.rv.data.ProLink.GroupDefinition|undefined} value
 * @return {!proto.rv.data.ProLink.TowerMessage.TowerAddMemberRequest} returns this
*/
proto.rv.data.ProLink.TowerMessage.TowerAddMemberRequest.prototype.setGroupDefinition = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.rv.data.ProLink.TowerMessage.TowerAddMemberRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ProLink.TowerMessage.TowerAddMemberRequest} returns this
 */
proto.rv.data.ProLink.TowerMessage.TowerAddMemberRequest.prototype.clearGroupDefinition = function() {
  return this.setGroupDefinition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ProLink.TowerMessage.TowerAddMemberRequest.prototype.hasGroupDefinition = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GroupDefinition.Member joining_member = 2;
 * @return {?proto.rv.data.ProLink.GroupDefinition.Member}
 */
proto.rv.data.ProLink.TowerMessage.TowerAddMemberRequest.prototype.getJoiningMember = function() {
  return /** @type{?proto.rv.data.ProLink.GroupDefinition.Member} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ProLink.GroupDefinition.Member, 2));
};


/**
 * @param {?proto.rv.data.ProLink.GroupDefinition.Member|undefined} value
 * @return {!proto.rv.data.ProLink.TowerMessage.TowerAddMemberRequest} returns this
*/
proto.rv.data.ProLink.TowerMessage.TowerAddMemberRequest.prototype.setJoiningMember = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.rv.data.ProLink.TowerMessage.TowerAddMemberRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ProLink.TowerMessage.TowerAddMemberRequest} returns this
 */
proto.rv.data.ProLink.TowerMessage.TowerAddMemberRequest.prototype.clearJoiningMember = function() {
  return this.setJoiningMember(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ProLink.TowerMessage.TowerAddMemberRequest.prototype.hasJoiningMember = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProLink.TowerMessage.TowerRemoveMemberRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProLink.TowerMessage.TowerRemoveMemberRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProLink.TowerMessage.TowerRemoveMemberRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.TowerMessage.TowerRemoveMemberRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
removingMember: (f = msg.getRemovingMember()) && proto.rv.data.ProLink.GroupDefinition.Member.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProLink.TowerMessage.TowerRemoveMemberRequest}
 */
proto.rv.data.ProLink.TowerMessage.TowerRemoveMemberRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProLink.TowerMessage.TowerRemoveMemberRequest;
  return proto.rv.data.ProLink.TowerMessage.TowerRemoveMemberRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProLink.TowerMessage.TowerRemoveMemberRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProLink.TowerMessage.TowerRemoveMemberRequest}
 */
proto.rv.data.ProLink.TowerMessage.TowerRemoveMemberRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.ProLink.GroupDefinition.Member;
      reader.readMessage(value,proto.rv.data.ProLink.GroupDefinition.Member.deserializeBinaryFromReader);
      msg.setRemovingMember(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProLink.TowerMessage.TowerRemoveMemberRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProLink.TowerMessage.TowerRemoveMemberRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProLink.TowerMessage.TowerRemoveMemberRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.TowerMessage.TowerRemoveMemberRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRemovingMember();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.ProLink.GroupDefinition.Member.serializeBinaryToWriter
    );
  }
};


/**
 * optional GroupDefinition.Member removing_member = 1;
 * @return {?proto.rv.data.ProLink.GroupDefinition.Member}
 */
proto.rv.data.ProLink.TowerMessage.TowerRemoveMemberRequest.prototype.getRemovingMember = function() {
  return /** @type{?proto.rv.data.ProLink.GroupDefinition.Member} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ProLink.GroupDefinition.Member, 1));
};


/**
 * @param {?proto.rv.data.ProLink.GroupDefinition.Member|undefined} value
 * @return {!proto.rv.data.ProLink.TowerMessage.TowerRemoveMemberRequest} returns this
*/
proto.rv.data.ProLink.TowerMessage.TowerRemoveMemberRequest.prototype.setRemovingMember = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ProLink.TowerMessage.TowerRemoveMemberRequest} returns this
 */
proto.rv.data.ProLink.TowerMessage.TowerRemoveMemberRequest.prototype.clearRemovingMember = function() {
  return this.setRemovingMember(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ProLink.TowerMessage.TowerRemoveMemberRequest.prototype.hasRemovingMember = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.ResponseCase = {
  RESPONSE_NOT_SET: 0,
  GROUP_DEFINITION: 1,
  ACCEPT: 2,
  DECLINE_REASON: 3
};

/**
 * @return {proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.ResponseCase}
 */
proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.prototype.getResponseCase = function() {
  return /** @type {proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.ResponseCase} */(jspb.Message.computeOneofCase(this, proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
groupDefinition: (f = msg.getGroupDefinition()) && proto.rv.data.ProLink.GroupDefinition.toObject(includeInstance, f),
accept: (f = msg.getAccept()) && proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.Accept.toObject(includeInstance, f),
declineReason: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse}
 */
proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse;
  return proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse}
 */
proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.ProLink.GroupDefinition;
      reader.readMessage(value,proto.rv.data.ProLink.GroupDefinition.deserializeBinaryFromReader);
      msg.setGroupDefinition(value);
      break;
    case 2:
      var value = new proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.Accept;
      reader.readMessage(value,proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.Accept.deserializeBinaryFromReader);
      msg.setAccept(value);
      break;
    case 3:
      var value = /** @type {!proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.DeclineReason} */ (reader.readEnum());
      msg.setDeclineReason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupDefinition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.ProLink.GroupDefinition.serializeBinaryToWriter
    );
  }
  f = message.getAccept();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.Accept.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.DeclineReason} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.DeclineReason = {
  ALREADY_IN_GROUP: 0,
  USER_DECLINED: 1
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.Accept.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.Accept.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.Accept} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.Accept.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.Accept}
 */
proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.Accept.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.Accept;
  return proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.Accept.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.Accept} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.Accept}
 */
proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.Accept.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.Accept.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.Accept.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.Accept} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.Accept.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * optional GroupDefinition group_definition = 1;
 * @return {?proto.rv.data.ProLink.GroupDefinition}
 */
proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.prototype.getGroupDefinition = function() {
  return /** @type{?proto.rv.data.ProLink.GroupDefinition} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ProLink.GroupDefinition, 1));
};


/**
 * @param {?proto.rv.data.ProLink.GroupDefinition|undefined} value
 * @return {!proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse} returns this
*/
proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.prototype.setGroupDefinition = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse} returns this
 */
proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.prototype.clearGroupDefinition = function() {
  return this.setGroupDefinition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.prototype.hasGroupDefinition = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Accept accept = 2;
 * @return {?proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.Accept}
 */
proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.prototype.getAccept = function() {
  return /** @type{?proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.Accept} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.Accept, 2));
};


/**
 * @param {?proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.Accept|undefined} value
 * @return {!proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse} returns this
*/
proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.prototype.setAccept = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse} returns this
 */
proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.prototype.clearAccept = function() {
  return this.setAccept(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.prototype.hasAccept = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional DeclineReason decline_reason = 3;
 * @return {!proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.DeclineReason}
 */
proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.prototype.getDeclineReason = function() {
  return /** @type {!proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.DeclineReason} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.DeclineReason} value
 * @return {!proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse} returns this
 */
proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.prototype.setDeclineReason = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse} returns this
 */
proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.prototype.clearDeclineReason = function() {
  return jspb.Message.setOneofField(this, 3, proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ProLink.TowerMessage.TowerAddMemberResponse.prototype.hasDeclineReason = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProLink.TowerMessage.TowerHeartbeatRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProLink.TowerMessage.TowerHeartbeatRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProLink.TowerMessage.TowerHeartbeatRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.TowerMessage.TowerHeartbeatRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProLink.TowerMessage.TowerHeartbeatRequest}
 */
proto.rv.data.ProLink.TowerMessage.TowerHeartbeatRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProLink.TowerMessage.TowerHeartbeatRequest;
  return proto.rv.data.ProLink.TowerMessage.TowerHeartbeatRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProLink.TowerMessage.TowerHeartbeatRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProLink.TowerMessage.TowerHeartbeatRequest}
 */
proto.rv.data.ProLink.TowerMessage.TowerHeartbeatRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProLink.TowerMessage.TowerHeartbeatRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProLink.TowerMessage.TowerHeartbeatRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProLink.TowerMessage.TowerHeartbeatRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.TowerMessage.TowerHeartbeatRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProLink.TowerMessage.TowerHeartbeatResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProLink.TowerMessage.TowerHeartbeatResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProLink.TowerMessage.TowerHeartbeatResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.TowerMessage.TowerHeartbeatResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
groupDefinition: (f = msg.getGroupDefinition()) && proto.rv.data.ProLink.GroupDefinition.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProLink.TowerMessage.TowerHeartbeatResponse}
 */
proto.rv.data.ProLink.TowerMessage.TowerHeartbeatResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProLink.TowerMessage.TowerHeartbeatResponse;
  return proto.rv.data.ProLink.TowerMessage.TowerHeartbeatResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProLink.TowerMessage.TowerHeartbeatResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProLink.TowerMessage.TowerHeartbeatResponse}
 */
proto.rv.data.ProLink.TowerMessage.TowerHeartbeatResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.ProLink.GroupDefinition;
      reader.readMessage(value,proto.rv.data.ProLink.GroupDefinition.deserializeBinaryFromReader);
      msg.setGroupDefinition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProLink.TowerMessage.TowerHeartbeatResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProLink.TowerMessage.TowerHeartbeatResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProLink.TowerMessage.TowerHeartbeatResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.TowerMessage.TowerHeartbeatResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupDefinition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.ProLink.GroupDefinition.serializeBinaryToWriter
    );
  }
};


/**
 * optional GroupDefinition group_definition = 1;
 * @return {?proto.rv.data.ProLink.GroupDefinition}
 */
proto.rv.data.ProLink.TowerMessage.TowerHeartbeatResponse.prototype.getGroupDefinition = function() {
  return /** @type{?proto.rv.data.ProLink.GroupDefinition} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ProLink.GroupDefinition, 1));
};


/**
 * @param {?proto.rv.data.ProLink.GroupDefinition|undefined} value
 * @return {!proto.rv.data.ProLink.TowerMessage.TowerHeartbeatResponse} returns this
*/
proto.rv.data.ProLink.TowerMessage.TowerHeartbeatResponse.prototype.setGroupDefinition = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ProLink.TowerMessage.TowerHeartbeatResponse} returns this
 */
proto.rv.data.ProLink.TowerMessage.TowerHeartbeatResponse.prototype.clearGroupDefinition = function() {
  return this.setGroupDefinition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ProLink.TowerMessage.TowerHeartbeatResponse.prototype.hasGroupDefinition = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProLink.MemberStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProLink.MemberStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProLink.MemberStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.MemberStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
ip: jspb.Message.getFieldWithDefault(msg, 1, ""),
port: jspb.Message.getFieldWithDefault(msg, 2, 0),
name: jspb.Message.getFieldWithDefault(msg, 3, ""),
platform: jspb.Message.getFieldWithDefault(msg, 4, 0),
osVersion: jspb.Message.getFieldWithDefault(msg, 5, ""),
hostDescription: jspb.Message.getFieldWithDefault(msg, 6, ""),
apiVersion: jspb.Message.getFieldWithDefault(msg, 7, ""),
connectionStatus: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProLink.MemberStatus}
 */
proto.rv.data.ProLink.MemberStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProLink.MemberStatus;
  return proto.rv.data.ProLink.MemberStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProLink.MemberStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProLink.MemberStatus}
 */
proto.rv.data.ProLink.MemberStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {!proto.rv.data.ApplicationInfo.Platform} */ (reader.readEnum());
      msg.setPlatform(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setOsVersion(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setHostDescription(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setApiVersion(value);
      break;
    case 8:
      var value = /** @type {!proto.rv.data.ProLink.MemberStatus.ConnectionStatus} */ (reader.readEnum());
      msg.setConnectionStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProLink.MemberStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProLink.MemberStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProLink.MemberStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.MemberStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPlatform();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getOsVersion();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getHostDescription();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getApiVersion();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getConnectionStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.rv.data.ProLink.MemberStatus.ConnectionStatus = {
  CONNECTION_STATUS_UNKNOWN: 0,
  CONNECTION_STATUS_CONNECTED: 1,
  CONNECTION_STATUS_DISCONNECTED: 2
};

/**
 * optional string ip = 1;
 * @return {string}
 */
proto.rv.data.ProLink.MemberStatus.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.ProLink.MemberStatus} returns this
 */
proto.rv.data.ProLink.MemberStatus.prototype.setIp = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 port = 2;
 * @return {number}
 */
proto.rv.data.ProLink.MemberStatus.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.ProLink.MemberStatus} returns this
 */
proto.rv.data.ProLink.MemberStatus.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.rv.data.ProLink.MemberStatus.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.ProLink.MemberStatus} returns this
 */
proto.rv.data.ProLink.MemberStatus.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional ApplicationInfo.Platform platform = 4;
 * @return {!proto.rv.data.ApplicationInfo.Platform}
 */
proto.rv.data.ProLink.MemberStatus.prototype.getPlatform = function() {
  return /** @type {!proto.rv.data.ApplicationInfo.Platform} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.rv.data.ApplicationInfo.Platform} value
 * @return {!proto.rv.data.ProLink.MemberStatus} returns this
 */
proto.rv.data.ProLink.MemberStatus.prototype.setPlatform = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional string os_version = 5;
 * @return {string}
 */
proto.rv.data.ProLink.MemberStatus.prototype.getOsVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.ProLink.MemberStatus} returns this
 */
proto.rv.data.ProLink.MemberStatus.prototype.setOsVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string host_description = 6;
 * @return {string}
 */
proto.rv.data.ProLink.MemberStatus.prototype.getHostDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.ProLink.MemberStatus} returns this
 */
proto.rv.data.ProLink.MemberStatus.prototype.setHostDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string api_version = 7;
 * @return {string}
 */
proto.rv.data.ProLink.MemberStatus.prototype.getApiVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.ProLink.MemberStatus} returns this
 */
proto.rv.data.ProLink.MemberStatus.prototype.setApiVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional ConnectionStatus connection_status = 8;
 * @return {!proto.rv.data.ProLink.MemberStatus.ConnectionStatus}
 */
proto.rv.data.ProLink.MemberStatus.prototype.getConnectionStatus = function() {
  return /** @type {!proto.rv.data.ProLink.MemberStatus.ConnectionStatus} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.rv.data.ProLink.MemberStatus.ConnectionStatus} value
 * @return {!proto.rv.data.ProLink.MemberStatus} returns this
 */
proto.rv.data.ProLink.MemberStatus.prototype.setConnectionStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rv.data.ProLink.ClientAction.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.rv.data.ProLink.ClientAction.ActiontypeCase = {
  ACTIONTYPE_NOT_SET: 0,
  ADD_CONNECTION: 1,
  REMOVE_CONNECTION: 2,
  CANCEL_ACTION: 3,
  RENDER_TIME: 4
};

/**
 * @return {proto.rv.data.ProLink.ClientAction.ActiontypeCase}
 */
proto.rv.data.ProLink.ClientAction.prototype.getActiontypeCase = function() {
  return /** @type {proto.rv.data.ProLink.ClientAction.ActiontypeCase} */(jspb.Message.computeOneofCase(this, proto.rv.data.ProLink.ClientAction.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProLink.ClientAction.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProLink.ClientAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProLink.ClientAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.ClientAction.toObject = function(includeInstance, msg) {
  var f, obj = {
addConnection: (f = msg.getAddConnection()) && proto.rv.data.ProLink.ClientAction.AddConnection.toObject(includeInstance, f),
removeConnection: (f = msg.getRemoveConnection()) && proto.rv.data.ProLink.ClientAction.RemoveConnection.toObject(includeInstance, f),
cancelAction: (f = msg.getCancelAction()) && proto.rv.data.ProLink.ClientAction.CancelAction.toObject(includeInstance, f),
renderTime: (f = msg.getRenderTime()) && proto.rv.data.ProLink.ClientAction.RenderTime.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProLink.ClientAction}
 */
proto.rv.data.ProLink.ClientAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProLink.ClientAction;
  return proto.rv.data.ProLink.ClientAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProLink.ClientAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProLink.ClientAction}
 */
proto.rv.data.ProLink.ClientAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.ProLink.ClientAction.AddConnection;
      reader.readMessage(value,proto.rv.data.ProLink.ClientAction.AddConnection.deserializeBinaryFromReader);
      msg.setAddConnection(value);
      break;
    case 2:
      var value = new proto.rv.data.ProLink.ClientAction.RemoveConnection;
      reader.readMessage(value,proto.rv.data.ProLink.ClientAction.RemoveConnection.deserializeBinaryFromReader);
      msg.setRemoveConnection(value);
      break;
    case 3:
      var value = new proto.rv.data.ProLink.ClientAction.CancelAction;
      reader.readMessage(value,proto.rv.data.ProLink.ClientAction.CancelAction.deserializeBinaryFromReader);
      msg.setCancelAction(value);
      break;
    case 4:
      var value = new proto.rv.data.ProLink.ClientAction.RenderTime;
      reader.readMessage(value,proto.rv.data.ProLink.ClientAction.RenderTime.deserializeBinaryFromReader);
      msg.setRenderTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProLink.ClientAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProLink.ClientAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProLink.ClientAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.ClientAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddConnection();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.ProLink.ClientAction.AddConnection.serializeBinaryToWriter
    );
  }
  f = message.getRemoveConnection();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rv.data.ProLink.ClientAction.RemoveConnection.serializeBinaryToWriter
    );
  }
  f = message.getCancelAction();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rv.data.ProLink.ClientAction.CancelAction.serializeBinaryToWriter
    );
  }
  f = message.getRenderTime();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rv.data.ProLink.ClientAction.RenderTime.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProLink.ClientAction.AddConnection.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProLink.ClientAction.AddConnection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProLink.ClientAction.AddConnection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.ClientAction.AddConnection.toObject = function(includeInstance, msg) {
  var f, obj = {
ip: jspb.Message.getFieldWithDefault(msg, 1, ""),
port: jspb.Message.getFieldWithDefault(msg, 2, 0),
groupName: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProLink.ClientAction.AddConnection}
 */
proto.rv.data.ProLink.ClientAction.AddConnection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProLink.ClientAction.AddConnection;
  return proto.rv.data.ProLink.ClientAction.AddConnection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProLink.ClientAction.AddConnection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProLink.ClientAction.AddConnection}
 */
proto.rv.data.ProLink.ClientAction.AddConnection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProLink.ClientAction.AddConnection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProLink.ClientAction.AddConnection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProLink.ClientAction.AddConnection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.ClientAction.AddConnection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getGroupName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string ip = 1;
 * @return {string}
 */
proto.rv.data.ProLink.ClientAction.AddConnection.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.ProLink.ClientAction.AddConnection} returns this
 */
proto.rv.data.ProLink.ClientAction.AddConnection.prototype.setIp = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 port = 2;
 * @return {number}
 */
proto.rv.data.ProLink.ClientAction.AddConnection.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.ProLink.ClientAction.AddConnection} returns this
 */
proto.rv.data.ProLink.ClientAction.AddConnection.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string group_name = 3;
 * @return {string}
 */
proto.rv.data.ProLink.ClientAction.AddConnection.prototype.getGroupName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.ProLink.ClientAction.AddConnection} returns this
 */
proto.rv.data.ProLink.ClientAction.AddConnection.prototype.setGroupName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProLink.ClientAction.RemoveConnection.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProLink.ClientAction.RemoveConnection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProLink.ClientAction.RemoveConnection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.ClientAction.RemoveConnection.toObject = function(includeInstance, msg) {
  var f, obj = {
ip: jspb.Message.getFieldWithDefault(msg, 1, ""),
port: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProLink.ClientAction.RemoveConnection}
 */
proto.rv.data.ProLink.ClientAction.RemoveConnection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProLink.ClientAction.RemoveConnection;
  return proto.rv.data.ProLink.ClientAction.RemoveConnection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProLink.ClientAction.RemoveConnection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProLink.ClientAction.RemoveConnection}
 */
proto.rv.data.ProLink.ClientAction.RemoveConnection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProLink.ClientAction.RemoveConnection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProLink.ClientAction.RemoveConnection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProLink.ClientAction.RemoveConnection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.ClientAction.RemoveConnection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string ip = 1;
 * @return {string}
 */
proto.rv.data.ProLink.ClientAction.RemoveConnection.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.ProLink.ClientAction.RemoveConnection} returns this
 */
proto.rv.data.ProLink.ClientAction.RemoveConnection.prototype.setIp = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 port = 2;
 * @return {number}
 */
proto.rv.data.ProLink.ClientAction.RemoveConnection.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.ProLink.ClientAction.RemoveConnection} returns this
 */
proto.rv.data.ProLink.ClientAction.RemoveConnection.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProLink.ClientAction.CancelAction.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProLink.ClientAction.CancelAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProLink.ClientAction.CancelAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.ClientAction.CancelAction.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProLink.ClientAction.CancelAction}
 */
proto.rv.data.ProLink.ClientAction.CancelAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProLink.ClientAction.CancelAction;
  return proto.rv.data.ProLink.ClientAction.CancelAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProLink.ClientAction.CancelAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProLink.ClientAction.CancelAction}
 */
proto.rv.data.ProLink.ClientAction.CancelAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProLink.ClientAction.CancelAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProLink.ClientAction.CancelAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProLink.ClientAction.CancelAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.ClientAction.CancelAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProLink.ClientAction.RenderTime.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProLink.ClientAction.RenderTime.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProLink.ClientAction.RenderTime} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.ClientAction.RenderTime.toObject = function(includeInstance, msg) {
  var f, obj = {
latency: jspb.Message.getFieldWithDefault(msg, 1, 0),
renderTime: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProLink.ClientAction.RenderTime}
 */
proto.rv.data.ProLink.ClientAction.RenderTime.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProLink.ClientAction.RenderTime;
  return proto.rv.data.ProLink.ClientAction.RenderTime.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProLink.ClientAction.RenderTime} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProLink.ClientAction.RenderTime}
 */
proto.rv.data.ProLink.ClientAction.RenderTime.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLatency(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRenderTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProLink.ClientAction.RenderTime.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProLink.ClientAction.RenderTime.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProLink.ClientAction.RenderTime} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.ClientAction.RenderTime.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLatency();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getRenderTime();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 latency = 1;
 * @return {number}
 */
proto.rv.data.ProLink.ClientAction.RenderTime.prototype.getLatency = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.ProLink.ClientAction.RenderTime} returns this
 */
proto.rv.data.ProLink.ClientAction.RenderTime.prototype.setLatency = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 render_time = 2;
 * @return {number}
 */
proto.rv.data.ProLink.ClientAction.RenderTime.prototype.getRenderTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.ProLink.ClientAction.RenderTime} returns this
 */
proto.rv.data.ProLink.ClientAction.RenderTime.prototype.setRenderTime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional AddConnection add_connection = 1;
 * @return {?proto.rv.data.ProLink.ClientAction.AddConnection}
 */
proto.rv.data.ProLink.ClientAction.prototype.getAddConnection = function() {
  return /** @type{?proto.rv.data.ProLink.ClientAction.AddConnection} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ProLink.ClientAction.AddConnection, 1));
};


/**
 * @param {?proto.rv.data.ProLink.ClientAction.AddConnection|undefined} value
 * @return {!proto.rv.data.ProLink.ClientAction} returns this
*/
proto.rv.data.ProLink.ClientAction.prototype.setAddConnection = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.rv.data.ProLink.ClientAction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ProLink.ClientAction} returns this
 */
proto.rv.data.ProLink.ClientAction.prototype.clearAddConnection = function() {
  return this.setAddConnection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ProLink.ClientAction.prototype.hasAddConnection = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional RemoveConnection remove_connection = 2;
 * @return {?proto.rv.data.ProLink.ClientAction.RemoveConnection}
 */
proto.rv.data.ProLink.ClientAction.prototype.getRemoveConnection = function() {
  return /** @type{?proto.rv.data.ProLink.ClientAction.RemoveConnection} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ProLink.ClientAction.RemoveConnection, 2));
};


/**
 * @param {?proto.rv.data.ProLink.ClientAction.RemoveConnection|undefined} value
 * @return {!proto.rv.data.ProLink.ClientAction} returns this
*/
proto.rv.data.ProLink.ClientAction.prototype.setRemoveConnection = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.rv.data.ProLink.ClientAction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ProLink.ClientAction} returns this
 */
proto.rv.data.ProLink.ClientAction.prototype.clearRemoveConnection = function() {
  return this.setRemoveConnection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ProLink.ClientAction.prototype.hasRemoveConnection = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CancelAction cancel_action = 3;
 * @return {?proto.rv.data.ProLink.ClientAction.CancelAction}
 */
proto.rv.data.ProLink.ClientAction.prototype.getCancelAction = function() {
  return /** @type{?proto.rv.data.ProLink.ClientAction.CancelAction} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ProLink.ClientAction.CancelAction, 3));
};


/**
 * @param {?proto.rv.data.ProLink.ClientAction.CancelAction|undefined} value
 * @return {!proto.rv.data.ProLink.ClientAction} returns this
*/
proto.rv.data.ProLink.ClientAction.prototype.setCancelAction = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.rv.data.ProLink.ClientAction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ProLink.ClientAction} returns this
 */
proto.rv.data.ProLink.ClientAction.prototype.clearCancelAction = function() {
  return this.setCancelAction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ProLink.ClientAction.prototype.hasCancelAction = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional RenderTime render_time = 4;
 * @return {?proto.rv.data.ProLink.ClientAction.RenderTime}
 */
proto.rv.data.ProLink.ClientAction.prototype.getRenderTime = function() {
  return /** @type{?proto.rv.data.ProLink.ClientAction.RenderTime} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ProLink.ClientAction.RenderTime, 4));
};


/**
 * @param {?proto.rv.data.ProLink.ClientAction.RenderTime|undefined} value
 * @return {!proto.rv.data.ProLink.ClientAction} returns this
*/
proto.rv.data.ProLink.ClientAction.prototype.setRenderTime = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.rv.data.ProLink.ClientAction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ProLink.ClientAction} returns this
 */
proto.rv.data.ProLink.ClientAction.prototype.clearRenderTime = function() {
  return this.setRenderTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ProLink.ClientAction.prototype.hasRenderTime = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rv.data.ProLink.HandlerIn.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10,11,12]];

/**
 * @enum {number}
 */
proto.rv.data.ProLink.HandlerIn.RequestCase = {
  REQUEST_NOT_SET: 0,
  GROUP_NAME: 1,
  GROUP_DEFINITION_REQUEST: 2,
  GROUP_JOIN_CONFIRMATION: 3,
  GROUP_JOIN_PASSWORD: 4,
  ADD_CONNECTION_RESULT: 5,
  GROUP_UPDATE: 6,
  MEMBER_STATUS_CHANGE: 7,
  PROPRESENTER_INFO: 8,
  SERVER_STATE: 9,
  CONFIGURATION_REQUEST: 10,
  ZEROCONFIG_NETWORK_ENVIRONMENT_CHANGE: 11,
  LOG_REQUEST: 12
};

/**
 * @return {proto.rv.data.ProLink.HandlerIn.RequestCase}
 */
proto.rv.data.ProLink.HandlerIn.prototype.getRequestCase = function() {
  return /** @type {proto.rv.data.ProLink.HandlerIn.RequestCase} */(jspb.Message.computeOneofCase(this, proto.rv.data.ProLink.HandlerIn.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProLink.HandlerIn.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProLink.HandlerIn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProLink.HandlerIn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerIn.toObject = function(includeInstance, msg) {
  var f, obj = {
groupName: (f = msg.getGroupName()) && proto.rv.data.ProLink.HandlerIn.GroupName.toObject(includeInstance, f),
groupDefinitionRequest: (f = msg.getGroupDefinitionRequest()) && proto.rv.data.ProLink.HandlerIn.GroupDefinitionRequest.toObject(includeInstance, f),
groupJoinConfirmation: (f = msg.getGroupJoinConfirmation()) && proto.rv.data.ProLink.HandlerIn.GroupJoinConfirmation.toObject(includeInstance, f),
groupJoinPassword: (f = msg.getGroupJoinPassword()) && proto.rv.data.ProLink.HandlerIn.GroupJoinPassword.toObject(includeInstance, f),
addConnectionResult: (f = msg.getAddConnectionResult()) && proto.rv.data.ProLink.HandlerIn.AddConnectionResult.toObject(includeInstance, f),
groupUpdate: (f = msg.getGroupUpdate()) && proto.rv.data.ProLink.GroupDefinition.toObject(includeInstance, f),
memberStatusChange: (f = msg.getMemberStatusChange()) && proto.rv.data.ProLink.HandlerIn.MemberStatusChange.toObject(includeInstance, f),
propresenterInfo: (f = msg.getPropresenterInfo()) && proto.rv.data.ProLink.HandlerIn.ProPresenterInfo.toObject(includeInstance, f),
serverState: (f = msg.getServerState()) && proto.rv.data.ProLink.HandlerIn.ServerState.toObject(includeInstance, f),
configurationRequest: (f = msg.getConfigurationRequest()) && proto.rv.data.ProLink.HandlerIn.ConfigurationRequest.toObject(includeInstance, f),
zeroconfigNetworkEnvironmentChange: (f = msg.getZeroconfigNetworkEnvironmentChange()) && proto.rv.data.ProLink.ZeroConfig.NetworkEnvironment.toObject(includeInstance, f),
logRequest: (f = msg.getLogRequest()) && proto.rv.data.ProLink.HandlerIn.LogRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProLink.HandlerIn}
 */
proto.rv.data.ProLink.HandlerIn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProLink.HandlerIn;
  return proto.rv.data.ProLink.HandlerIn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProLink.HandlerIn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProLink.HandlerIn}
 */
proto.rv.data.ProLink.HandlerIn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.ProLink.HandlerIn.GroupName;
      reader.readMessage(value,proto.rv.data.ProLink.HandlerIn.GroupName.deserializeBinaryFromReader);
      msg.setGroupName(value);
      break;
    case 2:
      var value = new proto.rv.data.ProLink.HandlerIn.GroupDefinitionRequest;
      reader.readMessage(value,proto.rv.data.ProLink.HandlerIn.GroupDefinitionRequest.deserializeBinaryFromReader);
      msg.setGroupDefinitionRequest(value);
      break;
    case 3:
      var value = new proto.rv.data.ProLink.HandlerIn.GroupJoinConfirmation;
      reader.readMessage(value,proto.rv.data.ProLink.HandlerIn.GroupJoinConfirmation.deserializeBinaryFromReader);
      msg.setGroupJoinConfirmation(value);
      break;
    case 4:
      var value = new proto.rv.data.ProLink.HandlerIn.GroupJoinPassword;
      reader.readMessage(value,proto.rv.data.ProLink.HandlerIn.GroupJoinPassword.deserializeBinaryFromReader);
      msg.setGroupJoinPassword(value);
      break;
    case 5:
      var value = new proto.rv.data.ProLink.HandlerIn.AddConnectionResult;
      reader.readMessage(value,proto.rv.data.ProLink.HandlerIn.AddConnectionResult.deserializeBinaryFromReader);
      msg.setAddConnectionResult(value);
      break;
    case 6:
      var value = new proto.rv.data.ProLink.GroupDefinition;
      reader.readMessage(value,proto.rv.data.ProLink.GroupDefinition.deserializeBinaryFromReader);
      msg.setGroupUpdate(value);
      break;
    case 7:
      var value = new proto.rv.data.ProLink.HandlerIn.MemberStatusChange;
      reader.readMessage(value,proto.rv.data.ProLink.HandlerIn.MemberStatusChange.deserializeBinaryFromReader);
      msg.setMemberStatusChange(value);
      break;
    case 8:
      var value = new proto.rv.data.ProLink.HandlerIn.ProPresenterInfo;
      reader.readMessage(value,proto.rv.data.ProLink.HandlerIn.ProPresenterInfo.deserializeBinaryFromReader);
      msg.setPropresenterInfo(value);
      break;
    case 9:
      var value = new proto.rv.data.ProLink.HandlerIn.ServerState;
      reader.readMessage(value,proto.rv.data.ProLink.HandlerIn.ServerState.deserializeBinaryFromReader);
      msg.setServerState(value);
      break;
    case 10:
      var value = new proto.rv.data.ProLink.HandlerIn.ConfigurationRequest;
      reader.readMessage(value,proto.rv.data.ProLink.HandlerIn.ConfigurationRequest.deserializeBinaryFromReader);
      msg.setConfigurationRequest(value);
      break;
    case 11:
      var value = new proto.rv.data.ProLink.ZeroConfig.NetworkEnvironment;
      reader.readMessage(value,proto.rv.data.ProLink.ZeroConfig.NetworkEnvironment.deserializeBinaryFromReader);
      msg.setZeroconfigNetworkEnvironmentChange(value);
      break;
    case 12:
      var value = new proto.rv.data.ProLink.HandlerIn.LogRequest;
      reader.readMessage(value,proto.rv.data.ProLink.HandlerIn.LogRequest.deserializeBinaryFromReader);
      msg.setLogRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProLink.HandlerIn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProLink.HandlerIn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProLink.HandlerIn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerIn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupName();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.ProLink.HandlerIn.GroupName.serializeBinaryToWriter
    );
  }
  f = message.getGroupDefinitionRequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rv.data.ProLink.HandlerIn.GroupDefinitionRequest.serializeBinaryToWriter
    );
  }
  f = message.getGroupJoinConfirmation();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rv.data.ProLink.HandlerIn.GroupJoinConfirmation.serializeBinaryToWriter
    );
  }
  f = message.getGroupJoinPassword();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rv.data.ProLink.HandlerIn.GroupJoinPassword.serializeBinaryToWriter
    );
  }
  f = message.getAddConnectionResult();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.rv.data.ProLink.HandlerIn.AddConnectionResult.serializeBinaryToWriter
    );
  }
  f = message.getGroupUpdate();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.rv.data.ProLink.GroupDefinition.serializeBinaryToWriter
    );
  }
  f = message.getMemberStatusChange();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.rv.data.ProLink.HandlerIn.MemberStatusChange.serializeBinaryToWriter
    );
  }
  f = message.getPropresenterInfo();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.rv.data.ProLink.HandlerIn.ProPresenterInfo.serializeBinaryToWriter
    );
  }
  f = message.getServerState();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.rv.data.ProLink.HandlerIn.ServerState.serializeBinaryToWriter
    );
  }
  f = message.getConfigurationRequest();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.rv.data.ProLink.HandlerIn.ConfigurationRequest.serializeBinaryToWriter
    );
  }
  f = message.getZeroconfigNetworkEnvironmentChange();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.rv.data.ProLink.ZeroConfig.NetworkEnvironment.serializeBinaryToWriter
    );
  }
  f = message.getLogRequest();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.rv.data.ProLink.HandlerIn.LogRequest.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProLink.HandlerIn.GroupName.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProLink.HandlerIn.GroupName.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProLink.HandlerIn.GroupName} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerIn.GroupName.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProLink.HandlerIn.GroupName}
 */
proto.rv.data.ProLink.HandlerIn.GroupName.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProLink.HandlerIn.GroupName;
  return proto.rv.data.ProLink.HandlerIn.GroupName.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProLink.HandlerIn.GroupName} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProLink.HandlerIn.GroupName}
 */
proto.rv.data.ProLink.HandlerIn.GroupName.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProLink.HandlerIn.GroupName.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProLink.HandlerIn.GroupName.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProLink.HandlerIn.GroupName} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerIn.GroupName.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProLink.HandlerIn.GroupDefinitionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProLink.HandlerIn.GroupDefinitionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProLink.HandlerIn.GroupDefinitionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerIn.GroupDefinitionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProLink.HandlerIn.GroupDefinitionRequest}
 */
proto.rv.data.ProLink.HandlerIn.GroupDefinitionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProLink.HandlerIn.GroupDefinitionRequest;
  return proto.rv.data.ProLink.HandlerIn.GroupDefinitionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProLink.HandlerIn.GroupDefinitionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProLink.HandlerIn.GroupDefinitionRequest}
 */
proto.rv.data.ProLink.HandlerIn.GroupDefinitionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProLink.HandlerIn.GroupDefinitionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProLink.HandlerIn.GroupDefinitionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProLink.HandlerIn.GroupDefinitionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerIn.GroupDefinitionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProLink.HandlerIn.GroupJoinConfirmation.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProLink.HandlerIn.GroupJoinConfirmation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProLink.HandlerIn.GroupJoinConfirmation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerIn.GroupJoinConfirmation.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProLink.HandlerIn.GroupJoinConfirmation}
 */
proto.rv.data.ProLink.HandlerIn.GroupJoinConfirmation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProLink.HandlerIn.GroupJoinConfirmation;
  return proto.rv.data.ProLink.HandlerIn.GroupJoinConfirmation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProLink.HandlerIn.GroupJoinConfirmation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProLink.HandlerIn.GroupJoinConfirmation}
 */
proto.rv.data.ProLink.HandlerIn.GroupJoinConfirmation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProLink.HandlerIn.GroupJoinConfirmation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProLink.HandlerIn.GroupJoinConfirmation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProLink.HandlerIn.GroupJoinConfirmation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerIn.GroupJoinConfirmation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.rv.data.ProLink.HandlerIn.GroupJoinConfirmation.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.ProLink.HandlerIn.GroupJoinConfirmation} returns this
 */
proto.rv.data.ProLink.HandlerIn.GroupJoinConfirmation.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProLink.HandlerIn.GroupJoinPassword.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProLink.HandlerIn.GroupJoinPassword.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProLink.HandlerIn.GroupJoinPassword} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerIn.GroupJoinPassword.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProLink.HandlerIn.GroupJoinPassword}
 */
proto.rv.data.ProLink.HandlerIn.GroupJoinPassword.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProLink.HandlerIn.GroupJoinPassword;
  return proto.rv.data.ProLink.HandlerIn.GroupJoinPassword.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProLink.HandlerIn.GroupJoinPassword} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProLink.HandlerIn.GroupJoinPassword}
 */
proto.rv.data.ProLink.HandlerIn.GroupJoinPassword.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProLink.HandlerIn.GroupJoinPassword.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProLink.HandlerIn.GroupJoinPassword.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProLink.HandlerIn.GroupJoinPassword} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerIn.GroupJoinPassword.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.rv.data.ProLink.HandlerIn.GroupJoinPassword.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.ProLink.HandlerIn.GroupJoinPassword} returns this
 */
proto.rv.data.ProLink.HandlerIn.GroupJoinPassword.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.ResultCase = {
  RESULT_NOT_SET: 0,
  SUCCESS: 1,
  FAILURE: 2
};

/**
 * @return {proto.rv.data.ProLink.HandlerIn.AddConnectionResult.ResultCase}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.prototype.getResultCase = function() {
  return /** @type {proto.rv.data.ProLink.HandlerIn.AddConnectionResult.ResultCase} */(jspb.Message.computeOneofCase(this, proto.rv.data.ProLink.HandlerIn.AddConnectionResult.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProLink.HandlerIn.AddConnectionResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.toObject = function(includeInstance, msg) {
  var f, obj = {
success: (f = msg.getSuccess()) && proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Success.toObject(includeInstance, f),
failure: (f = msg.getFailure()) && proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProLink.HandlerIn.AddConnectionResult;
  return proto.rv.data.ProLink.HandlerIn.AddConnectionResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Success;
      reader.readMessage(value,proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Success.deserializeBinaryFromReader);
      msg.setSuccess(value);
      break;
    case 2:
      var value = new proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure;
      reader.readMessage(value,proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.deserializeBinaryFromReader);
      msg.setFailure(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProLink.HandlerIn.AddConnectionResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Success.serializeBinaryToWriter
    );
  }
  f = message.getFailure();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Success.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Success.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Success} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Success.toObject = function(includeInstance, msg) {
  var f, obj = {
newGroupDefinition: (f = msg.getNewGroupDefinition()) && proto.rv.data.ProLink.GroupDefinition.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Success}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Success.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Success;
  return proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Success.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Success} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Success}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Success.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.ProLink.GroupDefinition;
      reader.readMessage(value,proto.rv.data.ProLink.GroupDefinition.deserializeBinaryFromReader);
      msg.setNewGroupDefinition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Success.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Success.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Success} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Success.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNewGroupDefinition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.ProLink.GroupDefinition.serializeBinaryToWriter
    );
  }
};


/**
 * optional GroupDefinition new_group_definition = 1;
 * @return {?proto.rv.data.ProLink.GroupDefinition}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Success.prototype.getNewGroupDefinition = function() {
  return /** @type{?proto.rv.data.ProLink.GroupDefinition} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ProLink.GroupDefinition, 1));
};


/**
 * @param {?proto.rv.data.ProLink.GroupDefinition|undefined} value
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Success} returns this
*/
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Success.prototype.setNewGroupDefinition = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Success} returns this
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Success.prototype.clearNewGroupDefinition = function() {
  return this.setNewGroupDefinition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Success.prototype.hasNewGroupDefinition = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.oneofGroups_ = [[1,2,3,4,5,6,7,8,9]];

/**
 * @enum {number}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.ReasonCase = {
  REASON_NOT_SET: 0,
  UNEXPECTED: 1,
  DECLINED: 2,
  TIMEOUT: 3,
  LINK_DISABLED: 4,
  IN_OTHER_GROUP: 5,
  INVALID_IP_ADDRESS: 6,
  ALREADY_IN_GROUP: 7,
  COULD_NOT_ADD: 8,
  COULD_NOT_JOIN: 9
};

/**
 * @return {proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.ReasonCase}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.prototype.getReasonCase = function() {
  return /** @type {proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.ReasonCase} */(jspb.Message.computeOneofCase(this, proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.toObject = function(includeInstance, msg) {
  var f, obj = {
unexpected: (f = msg.getUnexpected()) && proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Unexpected.toObject(includeInstance, f),
declined: (f = msg.getDeclined()) && proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Declined.toObject(includeInstance, f),
timeout: (f = msg.getTimeout()) && proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Timeout.toObject(includeInstance, f),
linkDisabled: (f = msg.getLinkDisabled()) && proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.LinkDisabled.toObject(includeInstance, f),
inOtherGroup: (f = msg.getInOtherGroup()) && proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InOtherGroup.toObject(includeInstance, f),
invalidIpAddress: (f = msg.getInvalidIpAddress()) && proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InvalidIpAddress.toObject(includeInstance, f),
alreadyInGroup: (f = msg.getAlreadyInGroup()) && proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.AlreadyInGroup.toObject(includeInstance, f),
couldNotAdd: (f = msg.getCouldNotAdd()) && proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotAdd.toObject(includeInstance, f),
couldNotJoin: (f = msg.getCouldNotJoin()) && proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotJoin.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure;
  return proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Unexpected;
      reader.readMessage(value,proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Unexpected.deserializeBinaryFromReader);
      msg.setUnexpected(value);
      break;
    case 2:
      var value = new proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Declined;
      reader.readMessage(value,proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Declined.deserializeBinaryFromReader);
      msg.setDeclined(value);
      break;
    case 3:
      var value = new proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Timeout;
      reader.readMessage(value,proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Timeout.deserializeBinaryFromReader);
      msg.setTimeout(value);
      break;
    case 4:
      var value = new proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.LinkDisabled;
      reader.readMessage(value,proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.LinkDisabled.deserializeBinaryFromReader);
      msg.setLinkDisabled(value);
      break;
    case 5:
      var value = new proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InOtherGroup;
      reader.readMessage(value,proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InOtherGroup.deserializeBinaryFromReader);
      msg.setInOtherGroup(value);
      break;
    case 6:
      var value = new proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InvalidIpAddress;
      reader.readMessage(value,proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InvalidIpAddress.deserializeBinaryFromReader);
      msg.setInvalidIpAddress(value);
      break;
    case 7:
      var value = new proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.AlreadyInGroup;
      reader.readMessage(value,proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.AlreadyInGroup.deserializeBinaryFromReader);
      msg.setAlreadyInGroup(value);
      break;
    case 8:
      var value = new proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotAdd;
      reader.readMessage(value,proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotAdd.deserializeBinaryFromReader);
      msg.setCouldNotAdd(value);
      break;
    case 9:
      var value = new proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotJoin;
      reader.readMessage(value,proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotJoin.deserializeBinaryFromReader);
      msg.setCouldNotJoin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnexpected();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Unexpected.serializeBinaryToWriter
    );
  }
  f = message.getDeclined();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Declined.serializeBinaryToWriter
    );
  }
  f = message.getTimeout();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Timeout.serializeBinaryToWriter
    );
  }
  f = message.getLinkDisabled();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.LinkDisabled.serializeBinaryToWriter
    );
  }
  f = message.getInOtherGroup();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InOtherGroup.serializeBinaryToWriter
    );
  }
  f = message.getInvalidIpAddress();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InvalidIpAddress.serializeBinaryToWriter
    );
  }
  f = message.getAlreadyInGroup();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.AlreadyInGroup.serializeBinaryToWriter
    );
  }
  f = message.getCouldNotAdd();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotAdd.serializeBinaryToWriter
    );
  }
  f = message.getCouldNotJoin();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotJoin.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Unexpected.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Unexpected.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Unexpected} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Unexpected.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Unexpected}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Unexpected.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Unexpected;
  return proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Unexpected.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Unexpected} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Unexpected}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Unexpected.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Unexpected.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Unexpected.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Unexpected} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Unexpected.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Declined.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Declined.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Declined} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Declined.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Declined}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Declined.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Declined;
  return proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Declined.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Declined} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Declined}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Declined.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Declined.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Declined.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Declined} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Declined.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Timeout.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Timeout.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Timeout} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Timeout.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Timeout}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Timeout.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Timeout;
  return proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Timeout.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Timeout} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Timeout}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Timeout.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Timeout.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Timeout.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Timeout} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Timeout.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.LinkDisabled.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.LinkDisabled.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.LinkDisabled} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.LinkDisabled.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.LinkDisabled}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.LinkDisabled.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.LinkDisabled;
  return proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.LinkDisabled.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.LinkDisabled} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.LinkDisabled}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.LinkDisabled.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.LinkDisabled.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.LinkDisabled.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.LinkDisabled} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.LinkDisabled.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InOtherGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InOtherGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InOtherGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InOtherGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
memberName: jspb.Message.getFieldWithDefault(msg, 1, ""),
groupName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InOtherGroup}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InOtherGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InOtherGroup;
  return proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InOtherGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InOtherGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InOtherGroup}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InOtherGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemberName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InOtherGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InOtherGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InOtherGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InOtherGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMemberName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGroupName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string member_name = 1;
 * @return {string}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InOtherGroup.prototype.getMemberName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InOtherGroup} returns this
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InOtherGroup.prototype.setMemberName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string group_name = 2;
 * @return {string}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InOtherGroup.prototype.getGroupName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InOtherGroup} returns this
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InOtherGroup.prototype.setGroupName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InvalidIpAddress.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InvalidIpAddress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InvalidIpAddress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InvalidIpAddress.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InvalidIpAddress}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InvalidIpAddress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InvalidIpAddress;
  return proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InvalidIpAddress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InvalidIpAddress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InvalidIpAddress}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InvalidIpAddress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InvalidIpAddress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InvalidIpAddress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InvalidIpAddress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InvalidIpAddress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.AlreadyInGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.AlreadyInGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.AlreadyInGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.AlreadyInGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
memberName: jspb.Message.getFieldWithDefault(msg, 1, ""),
groupName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.AlreadyInGroup}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.AlreadyInGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.AlreadyInGroup;
  return proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.AlreadyInGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.AlreadyInGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.AlreadyInGroup}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.AlreadyInGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemberName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.AlreadyInGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.AlreadyInGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.AlreadyInGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.AlreadyInGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMemberName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGroupName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string member_name = 1;
 * @return {string}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.AlreadyInGroup.prototype.getMemberName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.AlreadyInGroup} returns this
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.AlreadyInGroup.prototype.setMemberName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string group_name = 2;
 * @return {string}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.AlreadyInGroup.prototype.getGroupName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.AlreadyInGroup} returns this
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.AlreadyInGroup.prototype.setGroupName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotAdd.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotAdd.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotAdd} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotAdd.toObject = function(includeInstance, msg) {
  var f, obj = {
memberName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotAdd}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotAdd.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotAdd;
  return proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotAdd.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotAdd} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotAdd}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotAdd.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemberName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotAdd.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotAdd.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotAdd} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotAdd.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMemberName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string member_name = 1;
 * @return {string}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotAdd.prototype.getMemberName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotAdd} returns this
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotAdd.prototype.setMemberName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotJoin.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotJoin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotJoin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotJoin.toObject = function(includeInstance, msg) {
  var f, obj = {
groupName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotJoin}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotJoin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotJoin;
  return proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotJoin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotJoin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotJoin}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotJoin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotJoin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotJoin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotJoin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotJoin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string group_name = 1;
 * @return {string}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotJoin.prototype.getGroupName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotJoin} returns this
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotJoin.prototype.setGroupName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Unexpected unexpected = 1;
 * @return {?proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Unexpected}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.prototype.getUnexpected = function() {
  return /** @type{?proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Unexpected} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Unexpected, 1));
};


/**
 * @param {?proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Unexpected|undefined} value
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure} returns this
*/
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.prototype.setUnexpected = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure} returns this
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.prototype.clearUnexpected = function() {
  return this.setUnexpected(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.prototype.hasUnexpected = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Declined declined = 2;
 * @return {?proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Declined}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.prototype.getDeclined = function() {
  return /** @type{?proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Declined} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Declined, 2));
};


/**
 * @param {?proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Declined|undefined} value
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure} returns this
*/
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.prototype.setDeclined = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure} returns this
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.prototype.clearDeclined = function() {
  return this.setDeclined(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.prototype.hasDeclined = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Timeout timeout = 3;
 * @return {?proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Timeout}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.prototype.getTimeout = function() {
  return /** @type{?proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Timeout} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Timeout, 3));
};


/**
 * @param {?proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.Timeout|undefined} value
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure} returns this
*/
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.prototype.setTimeout = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure} returns this
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.prototype.clearTimeout = function() {
  return this.setTimeout(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.prototype.hasTimeout = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional LinkDisabled link_disabled = 4;
 * @return {?proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.LinkDisabled}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.prototype.getLinkDisabled = function() {
  return /** @type{?proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.LinkDisabled} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.LinkDisabled, 4));
};


/**
 * @param {?proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.LinkDisabled|undefined} value
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure} returns this
*/
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.prototype.setLinkDisabled = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure} returns this
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.prototype.clearLinkDisabled = function() {
  return this.setLinkDisabled(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.prototype.hasLinkDisabled = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional InOtherGroup in_other_group = 5;
 * @return {?proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InOtherGroup}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.prototype.getInOtherGroup = function() {
  return /** @type{?proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InOtherGroup} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InOtherGroup, 5));
};


/**
 * @param {?proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InOtherGroup|undefined} value
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure} returns this
*/
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.prototype.setInOtherGroup = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure} returns this
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.prototype.clearInOtherGroup = function() {
  return this.setInOtherGroup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.prototype.hasInOtherGroup = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional InvalidIpAddress invalid_ip_address = 6;
 * @return {?proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InvalidIpAddress}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.prototype.getInvalidIpAddress = function() {
  return /** @type{?proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InvalidIpAddress} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InvalidIpAddress, 6));
};


/**
 * @param {?proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.InvalidIpAddress|undefined} value
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure} returns this
*/
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.prototype.setInvalidIpAddress = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure} returns this
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.prototype.clearInvalidIpAddress = function() {
  return this.setInvalidIpAddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.prototype.hasInvalidIpAddress = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional AlreadyInGroup already_in_group = 7;
 * @return {?proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.AlreadyInGroup}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.prototype.getAlreadyInGroup = function() {
  return /** @type{?proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.AlreadyInGroup} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.AlreadyInGroup, 7));
};


/**
 * @param {?proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.AlreadyInGroup|undefined} value
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure} returns this
*/
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.prototype.setAlreadyInGroup = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure} returns this
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.prototype.clearAlreadyInGroup = function() {
  return this.setAlreadyInGroup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.prototype.hasAlreadyInGroup = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional CouldNotAdd could_not_add = 8;
 * @return {?proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotAdd}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.prototype.getCouldNotAdd = function() {
  return /** @type{?proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotAdd} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotAdd, 8));
};


/**
 * @param {?proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotAdd|undefined} value
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure} returns this
*/
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.prototype.setCouldNotAdd = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure} returns this
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.prototype.clearCouldNotAdd = function() {
  return this.setCouldNotAdd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.prototype.hasCouldNotAdd = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional CouldNotJoin could_not_join = 9;
 * @return {?proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotJoin}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.prototype.getCouldNotJoin = function() {
  return /** @type{?proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotJoin} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotJoin, 9));
};


/**
 * @param {?proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.CouldNotJoin|undefined} value
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure} returns this
*/
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.prototype.setCouldNotJoin = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure} returns this
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.prototype.clearCouldNotJoin = function() {
  return this.setCouldNotJoin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure.prototype.hasCouldNotJoin = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Success success = 1;
 * @return {?proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Success}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.prototype.getSuccess = function() {
  return /** @type{?proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Success} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Success, 1));
};


/**
 * @param {?proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Success|undefined} value
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult} returns this
*/
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.prototype.setSuccess = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.rv.data.ProLink.HandlerIn.AddConnectionResult.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult} returns this
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.prototype.clearSuccess = function() {
  return this.setSuccess(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.prototype.hasSuccess = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Failure failure = 2;
 * @return {?proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.prototype.getFailure = function() {
  return /** @type{?proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure, 2));
};


/**
 * @param {?proto.rv.data.ProLink.HandlerIn.AddConnectionResult.Failure|undefined} value
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult} returns this
*/
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.prototype.setFailure = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.rv.data.ProLink.HandlerIn.AddConnectionResult.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ProLink.HandlerIn.AddConnectionResult} returns this
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.prototype.clearFailure = function() {
  return this.setFailure(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ProLink.HandlerIn.AddConnectionResult.prototype.hasFailure = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rv.data.ProLink.HandlerIn.MemberStatusChange.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProLink.HandlerIn.MemberStatusChange.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProLink.HandlerIn.MemberStatusChange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProLink.HandlerIn.MemberStatusChange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerIn.MemberStatusChange.toObject = function(includeInstance, msg) {
  var f, obj = {
membersList: jspb.Message.toObjectList(msg.getMembersList(),
    proto.rv.data.ProLink.MemberStatus.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProLink.HandlerIn.MemberStatusChange}
 */
proto.rv.data.ProLink.HandlerIn.MemberStatusChange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProLink.HandlerIn.MemberStatusChange;
  return proto.rv.data.ProLink.HandlerIn.MemberStatusChange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProLink.HandlerIn.MemberStatusChange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProLink.HandlerIn.MemberStatusChange}
 */
proto.rv.data.ProLink.HandlerIn.MemberStatusChange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.ProLink.MemberStatus;
      reader.readMessage(value,proto.rv.data.ProLink.MemberStatus.deserializeBinaryFromReader);
      msg.addMembers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProLink.HandlerIn.MemberStatusChange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProLink.HandlerIn.MemberStatusChange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProLink.HandlerIn.MemberStatusChange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerIn.MemberStatusChange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMembersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rv.data.ProLink.MemberStatus.serializeBinaryToWriter
    );
  }
};


/**
 * repeated MemberStatus members = 1;
 * @return {!Array<!proto.rv.data.ProLink.MemberStatus>}
 */
proto.rv.data.ProLink.HandlerIn.MemberStatusChange.prototype.getMembersList = function() {
  return /** @type{!Array<!proto.rv.data.ProLink.MemberStatus>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rv.data.ProLink.MemberStatus, 1));
};


/**
 * @param {!Array<!proto.rv.data.ProLink.MemberStatus>} value
 * @return {!proto.rv.data.ProLink.HandlerIn.MemberStatusChange} returns this
*/
proto.rv.data.ProLink.HandlerIn.MemberStatusChange.prototype.setMembersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.rv.data.ProLink.MemberStatus=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rv.data.ProLink.MemberStatus}
 */
proto.rv.data.ProLink.HandlerIn.MemberStatusChange.prototype.addMembers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rv.data.ProLink.MemberStatus, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.ProLink.HandlerIn.MemberStatusChange} returns this
 */
proto.rv.data.ProLink.HandlerIn.MemberStatusChange.prototype.clearMembersList = function() {
  return this.setMembersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProLink.HandlerIn.ProPresenterInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProLink.HandlerIn.ProPresenterInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProLink.HandlerIn.ProPresenterInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerIn.ProPresenterInfo.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProLink.HandlerIn.ProPresenterInfo}
 */
proto.rv.data.ProLink.HandlerIn.ProPresenterInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProLink.HandlerIn.ProPresenterInfo;
  return proto.rv.data.ProLink.HandlerIn.ProPresenterInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProLink.HandlerIn.ProPresenterInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProLink.HandlerIn.ProPresenterInfo}
 */
proto.rv.data.ProLink.HandlerIn.ProPresenterInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProLink.HandlerIn.ProPresenterInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProLink.HandlerIn.ProPresenterInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProLink.HandlerIn.ProPresenterInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerIn.ProPresenterInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProLink.HandlerIn.ServerState.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProLink.HandlerIn.ServerState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProLink.HandlerIn.ServerState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerIn.ServerState.toObject = function(includeInstance, msg) {
  var f, obj = {
localIp: jspb.Message.getFieldWithDefault(msg, 1, ""),
publicIp: jspb.Message.getFieldWithDefault(msg, 2, ""),
port: jspb.Message.getFieldWithDefault(msg, 3, 0),
success: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
tcpStreamPort: jspb.Message.getFieldWithDefault(msg, 5, 0),
tcpStreamSuccess: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProLink.HandlerIn.ServerState}
 */
proto.rv.data.ProLink.HandlerIn.ServerState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProLink.HandlerIn.ServerState;
  return proto.rv.data.ProLink.HandlerIn.ServerState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProLink.HandlerIn.ServerState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProLink.HandlerIn.ServerState}
 */
proto.rv.data.ProLink.HandlerIn.ServerState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocalIp(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublicIp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTcpStreamPort(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTcpStreamSuccess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProLink.HandlerIn.ServerState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProLink.HandlerIn.ServerState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProLink.HandlerIn.ServerState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerIn.ServerState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocalIp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPublicIp();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getTcpStreamPort();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getTcpStreamSuccess();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional string local_ip = 1;
 * @return {string}
 */
proto.rv.data.ProLink.HandlerIn.ServerState.prototype.getLocalIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.ProLink.HandlerIn.ServerState} returns this
 */
proto.rv.data.ProLink.HandlerIn.ServerState.prototype.setLocalIp = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string public_ip = 2;
 * @return {string}
 */
proto.rv.data.ProLink.HandlerIn.ServerState.prototype.getPublicIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.ProLink.HandlerIn.ServerState} returns this
 */
proto.rv.data.ProLink.HandlerIn.ServerState.prototype.setPublicIp = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 port = 3;
 * @return {number}
 */
proto.rv.data.ProLink.HandlerIn.ServerState.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.ProLink.HandlerIn.ServerState} returns this
 */
proto.rv.data.ProLink.HandlerIn.ServerState.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool success = 4;
 * @return {boolean}
 */
proto.rv.data.ProLink.HandlerIn.ServerState.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.ProLink.HandlerIn.ServerState} returns this
 */
proto.rv.data.ProLink.HandlerIn.ServerState.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional uint32 tcp_stream_port = 5;
 * @return {number}
 */
proto.rv.data.ProLink.HandlerIn.ServerState.prototype.getTcpStreamPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.ProLink.HandlerIn.ServerState} returns this
 */
proto.rv.data.ProLink.HandlerIn.ServerState.prototype.setTcpStreamPort = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bool tcp_stream_success = 6;
 * @return {boolean}
 */
proto.rv.data.ProLink.HandlerIn.ServerState.prototype.getTcpStreamSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.ProLink.HandlerIn.ServerState} returns this
 */
proto.rv.data.ProLink.HandlerIn.ServerState.prototype.setTcpStreamSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProLink.HandlerIn.ConfigurationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProLink.HandlerIn.ConfigurationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProLink.HandlerIn.ConfigurationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerIn.ConfigurationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProLink.HandlerIn.ConfigurationRequest}
 */
proto.rv.data.ProLink.HandlerIn.ConfigurationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProLink.HandlerIn.ConfigurationRequest;
  return proto.rv.data.ProLink.HandlerIn.ConfigurationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProLink.HandlerIn.ConfigurationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProLink.HandlerIn.ConfigurationRequest}
 */
proto.rv.data.ProLink.HandlerIn.ConfigurationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProLink.HandlerIn.ConfigurationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProLink.HandlerIn.ConfigurationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProLink.HandlerIn.ConfigurationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerIn.ConfigurationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProLink.HandlerIn.LogRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProLink.HandlerIn.LogRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProLink.HandlerIn.LogRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerIn.LogRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
severity: jspb.Message.getFieldWithDefault(msg, 1, 0),
message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProLink.HandlerIn.LogRequest}
 */
proto.rv.data.ProLink.HandlerIn.LogRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProLink.HandlerIn.LogRequest;
  return proto.rv.data.ProLink.HandlerIn.LogRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProLink.HandlerIn.LogRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProLink.HandlerIn.LogRequest}
 */
proto.rv.data.ProLink.HandlerIn.LogRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.rv.data.ProLink.HandlerIn.LogRequest.Severity} */ (reader.readEnum());
      msg.setSeverity(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProLink.HandlerIn.LogRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProLink.HandlerIn.LogRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProLink.HandlerIn.LogRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerIn.LogRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeverity();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.rv.data.ProLink.HandlerIn.LogRequest.Severity = {
  SEVERITY_DEBUG: 0,
  SEVERITY_DEBUG_WARNING: 1,
  SEVERITY_INFO: 2,
  SEVERITY_WARNING: 3,
  SEVERITY_ERROR: 4,
  SEVERITY_FATAL_ERROR: 5
};

/**
 * optional Severity severity = 1;
 * @return {!proto.rv.data.ProLink.HandlerIn.LogRequest.Severity}
 */
proto.rv.data.ProLink.HandlerIn.LogRequest.prototype.getSeverity = function() {
  return /** @type {!proto.rv.data.ProLink.HandlerIn.LogRequest.Severity} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.rv.data.ProLink.HandlerIn.LogRequest.Severity} value
 * @return {!proto.rv.data.ProLink.HandlerIn.LogRequest} returns this
 */
proto.rv.data.ProLink.HandlerIn.LogRequest.prototype.setSeverity = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.rv.data.ProLink.HandlerIn.LogRequest.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.ProLink.HandlerIn.LogRequest} returns this
 */
proto.rv.data.ProLink.HandlerIn.LogRequest.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional GroupName group_name = 1;
 * @return {?proto.rv.data.ProLink.HandlerIn.GroupName}
 */
proto.rv.data.ProLink.HandlerIn.prototype.getGroupName = function() {
  return /** @type{?proto.rv.data.ProLink.HandlerIn.GroupName} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ProLink.HandlerIn.GroupName, 1));
};


/**
 * @param {?proto.rv.data.ProLink.HandlerIn.GroupName|undefined} value
 * @return {!proto.rv.data.ProLink.HandlerIn} returns this
*/
proto.rv.data.ProLink.HandlerIn.prototype.setGroupName = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.rv.data.ProLink.HandlerIn.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ProLink.HandlerIn} returns this
 */
proto.rv.data.ProLink.HandlerIn.prototype.clearGroupName = function() {
  return this.setGroupName(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ProLink.HandlerIn.prototype.hasGroupName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GroupDefinitionRequest group_definition_request = 2;
 * @return {?proto.rv.data.ProLink.HandlerIn.GroupDefinitionRequest}
 */
proto.rv.data.ProLink.HandlerIn.prototype.getGroupDefinitionRequest = function() {
  return /** @type{?proto.rv.data.ProLink.HandlerIn.GroupDefinitionRequest} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ProLink.HandlerIn.GroupDefinitionRequest, 2));
};


/**
 * @param {?proto.rv.data.ProLink.HandlerIn.GroupDefinitionRequest|undefined} value
 * @return {!proto.rv.data.ProLink.HandlerIn} returns this
*/
proto.rv.data.ProLink.HandlerIn.prototype.setGroupDefinitionRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.rv.data.ProLink.HandlerIn.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ProLink.HandlerIn} returns this
 */
proto.rv.data.ProLink.HandlerIn.prototype.clearGroupDefinitionRequest = function() {
  return this.setGroupDefinitionRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ProLink.HandlerIn.prototype.hasGroupDefinitionRequest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional GroupJoinConfirmation group_join_confirmation = 3;
 * @return {?proto.rv.data.ProLink.HandlerIn.GroupJoinConfirmation}
 */
proto.rv.data.ProLink.HandlerIn.prototype.getGroupJoinConfirmation = function() {
  return /** @type{?proto.rv.data.ProLink.HandlerIn.GroupJoinConfirmation} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ProLink.HandlerIn.GroupJoinConfirmation, 3));
};


/**
 * @param {?proto.rv.data.ProLink.HandlerIn.GroupJoinConfirmation|undefined} value
 * @return {!proto.rv.data.ProLink.HandlerIn} returns this
*/
proto.rv.data.ProLink.HandlerIn.prototype.setGroupJoinConfirmation = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.rv.data.ProLink.HandlerIn.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ProLink.HandlerIn} returns this
 */
proto.rv.data.ProLink.HandlerIn.prototype.clearGroupJoinConfirmation = function() {
  return this.setGroupJoinConfirmation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ProLink.HandlerIn.prototype.hasGroupJoinConfirmation = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional GroupJoinPassword group_join_password = 4;
 * @return {?proto.rv.data.ProLink.HandlerIn.GroupJoinPassword}
 */
proto.rv.data.ProLink.HandlerIn.prototype.getGroupJoinPassword = function() {
  return /** @type{?proto.rv.data.ProLink.HandlerIn.GroupJoinPassword} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ProLink.HandlerIn.GroupJoinPassword, 4));
};


/**
 * @param {?proto.rv.data.ProLink.HandlerIn.GroupJoinPassword|undefined} value
 * @return {!proto.rv.data.ProLink.HandlerIn} returns this
*/
proto.rv.data.ProLink.HandlerIn.prototype.setGroupJoinPassword = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.rv.data.ProLink.HandlerIn.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ProLink.HandlerIn} returns this
 */
proto.rv.data.ProLink.HandlerIn.prototype.clearGroupJoinPassword = function() {
  return this.setGroupJoinPassword(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ProLink.HandlerIn.prototype.hasGroupJoinPassword = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional AddConnectionResult add_connection_result = 5;
 * @return {?proto.rv.data.ProLink.HandlerIn.AddConnectionResult}
 */
proto.rv.data.ProLink.HandlerIn.prototype.getAddConnectionResult = function() {
  return /** @type{?proto.rv.data.ProLink.HandlerIn.AddConnectionResult} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ProLink.HandlerIn.AddConnectionResult, 5));
};


/**
 * @param {?proto.rv.data.ProLink.HandlerIn.AddConnectionResult|undefined} value
 * @return {!proto.rv.data.ProLink.HandlerIn} returns this
*/
proto.rv.data.ProLink.HandlerIn.prototype.setAddConnectionResult = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.rv.data.ProLink.HandlerIn.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ProLink.HandlerIn} returns this
 */
proto.rv.data.ProLink.HandlerIn.prototype.clearAddConnectionResult = function() {
  return this.setAddConnectionResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ProLink.HandlerIn.prototype.hasAddConnectionResult = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional GroupDefinition group_update = 6;
 * @return {?proto.rv.data.ProLink.GroupDefinition}
 */
proto.rv.data.ProLink.HandlerIn.prototype.getGroupUpdate = function() {
  return /** @type{?proto.rv.data.ProLink.GroupDefinition} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ProLink.GroupDefinition, 6));
};


/**
 * @param {?proto.rv.data.ProLink.GroupDefinition|undefined} value
 * @return {!proto.rv.data.ProLink.HandlerIn} returns this
*/
proto.rv.data.ProLink.HandlerIn.prototype.setGroupUpdate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.rv.data.ProLink.HandlerIn.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ProLink.HandlerIn} returns this
 */
proto.rv.data.ProLink.HandlerIn.prototype.clearGroupUpdate = function() {
  return this.setGroupUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ProLink.HandlerIn.prototype.hasGroupUpdate = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional MemberStatusChange member_status_change = 7;
 * @return {?proto.rv.data.ProLink.HandlerIn.MemberStatusChange}
 */
proto.rv.data.ProLink.HandlerIn.prototype.getMemberStatusChange = function() {
  return /** @type{?proto.rv.data.ProLink.HandlerIn.MemberStatusChange} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ProLink.HandlerIn.MemberStatusChange, 7));
};


/**
 * @param {?proto.rv.data.ProLink.HandlerIn.MemberStatusChange|undefined} value
 * @return {!proto.rv.data.ProLink.HandlerIn} returns this
*/
proto.rv.data.ProLink.HandlerIn.prototype.setMemberStatusChange = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.rv.data.ProLink.HandlerIn.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ProLink.HandlerIn} returns this
 */
proto.rv.data.ProLink.HandlerIn.prototype.clearMemberStatusChange = function() {
  return this.setMemberStatusChange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ProLink.HandlerIn.prototype.hasMemberStatusChange = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional ProPresenterInfo propresenter_info = 8;
 * @return {?proto.rv.data.ProLink.HandlerIn.ProPresenterInfo}
 */
proto.rv.data.ProLink.HandlerIn.prototype.getPropresenterInfo = function() {
  return /** @type{?proto.rv.data.ProLink.HandlerIn.ProPresenterInfo} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ProLink.HandlerIn.ProPresenterInfo, 8));
};


/**
 * @param {?proto.rv.data.ProLink.HandlerIn.ProPresenterInfo|undefined} value
 * @return {!proto.rv.data.ProLink.HandlerIn} returns this
*/
proto.rv.data.ProLink.HandlerIn.prototype.setPropresenterInfo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.rv.data.ProLink.HandlerIn.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ProLink.HandlerIn} returns this
 */
proto.rv.data.ProLink.HandlerIn.prototype.clearPropresenterInfo = function() {
  return this.setPropresenterInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ProLink.HandlerIn.prototype.hasPropresenterInfo = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional ServerState server_state = 9;
 * @return {?proto.rv.data.ProLink.HandlerIn.ServerState}
 */
proto.rv.data.ProLink.HandlerIn.prototype.getServerState = function() {
  return /** @type{?proto.rv.data.ProLink.HandlerIn.ServerState} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ProLink.HandlerIn.ServerState, 9));
};


/**
 * @param {?proto.rv.data.ProLink.HandlerIn.ServerState|undefined} value
 * @return {!proto.rv.data.ProLink.HandlerIn} returns this
*/
proto.rv.data.ProLink.HandlerIn.prototype.setServerState = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.rv.data.ProLink.HandlerIn.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ProLink.HandlerIn} returns this
 */
proto.rv.data.ProLink.HandlerIn.prototype.clearServerState = function() {
  return this.setServerState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ProLink.HandlerIn.prototype.hasServerState = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional ConfigurationRequest configuration_request = 10;
 * @return {?proto.rv.data.ProLink.HandlerIn.ConfigurationRequest}
 */
proto.rv.data.ProLink.HandlerIn.prototype.getConfigurationRequest = function() {
  return /** @type{?proto.rv.data.ProLink.HandlerIn.ConfigurationRequest} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ProLink.HandlerIn.ConfigurationRequest, 10));
};


/**
 * @param {?proto.rv.data.ProLink.HandlerIn.ConfigurationRequest|undefined} value
 * @return {!proto.rv.data.ProLink.HandlerIn} returns this
*/
proto.rv.data.ProLink.HandlerIn.prototype.setConfigurationRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.rv.data.ProLink.HandlerIn.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ProLink.HandlerIn} returns this
 */
proto.rv.data.ProLink.HandlerIn.prototype.clearConfigurationRequest = function() {
  return this.setConfigurationRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ProLink.HandlerIn.prototype.hasConfigurationRequest = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional ZeroConfig.NetworkEnvironment zeroconfig_network_environment_change = 11;
 * @return {?proto.rv.data.ProLink.ZeroConfig.NetworkEnvironment}
 */
proto.rv.data.ProLink.HandlerIn.prototype.getZeroconfigNetworkEnvironmentChange = function() {
  return /** @type{?proto.rv.data.ProLink.ZeroConfig.NetworkEnvironment} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ProLink.ZeroConfig.NetworkEnvironment, 11));
};


/**
 * @param {?proto.rv.data.ProLink.ZeroConfig.NetworkEnvironment|undefined} value
 * @return {!proto.rv.data.ProLink.HandlerIn} returns this
*/
proto.rv.data.ProLink.HandlerIn.prototype.setZeroconfigNetworkEnvironmentChange = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.rv.data.ProLink.HandlerIn.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ProLink.HandlerIn} returns this
 */
proto.rv.data.ProLink.HandlerIn.prototype.clearZeroconfigNetworkEnvironmentChange = function() {
  return this.setZeroconfigNetworkEnvironmentChange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ProLink.HandlerIn.prototype.hasZeroconfigNetworkEnvironmentChange = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional LogRequest log_request = 12;
 * @return {?proto.rv.data.ProLink.HandlerIn.LogRequest}
 */
proto.rv.data.ProLink.HandlerIn.prototype.getLogRequest = function() {
  return /** @type{?proto.rv.data.ProLink.HandlerIn.LogRequest} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ProLink.HandlerIn.LogRequest, 12));
};


/**
 * @param {?proto.rv.data.ProLink.HandlerIn.LogRequest|undefined} value
 * @return {!proto.rv.data.ProLink.HandlerIn} returns this
*/
proto.rv.data.ProLink.HandlerIn.prototype.setLogRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.rv.data.ProLink.HandlerIn.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ProLink.HandlerIn} returns this
 */
proto.rv.data.ProLink.HandlerIn.prototype.clearLogRequest = function() {
  return this.setLogRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ProLink.HandlerIn.prototype.hasLogRequest = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rv.data.ProLink.HandlerOut.oneofGroups_ = [[1,2,3,4,5,6]];

/**
 * @enum {number}
 */
proto.rv.data.ProLink.HandlerOut.ResponseCase = {
  RESPONSE_NOT_SET: 0,
  GROUP_NAME: 1,
  GROUP_DEFINITION: 2,
  GROUP_JOIN_CONFIRMATION: 3,
  GROUP_JOIN_PASSWORD: 4,
  PROPRESENTER_INFO: 5,
  CONFIGURATION: 6
};

/**
 * @return {proto.rv.data.ProLink.HandlerOut.ResponseCase}
 */
proto.rv.data.ProLink.HandlerOut.prototype.getResponseCase = function() {
  return /** @type {proto.rv.data.ProLink.HandlerOut.ResponseCase} */(jspb.Message.computeOneofCase(this, proto.rv.data.ProLink.HandlerOut.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProLink.HandlerOut.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProLink.HandlerOut.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProLink.HandlerOut} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerOut.toObject = function(includeInstance, msg) {
  var f, obj = {
groupName: (f = msg.getGroupName()) && proto.rv.data.ProLink.HandlerOut.GroupName.toObject(includeInstance, f),
groupDefinition: (f = msg.getGroupDefinition()) && proto.rv.data.ProLink.GroupDefinition.toObject(includeInstance, f),
groupJoinConfirmation: (f = msg.getGroupJoinConfirmation()) && proto.rv.data.ProLink.HandlerOut.GroupJoinConfirmation.toObject(includeInstance, f),
groupJoinPassword: (f = msg.getGroupJoinPassword()) && proto.rv.data.ProLink.HandlerOut.GroupJoinPassword.toObject(includeInstance, f),
propresenterInfo: (f = msg.getPropresenterInfo()) && proto.rv.data.ProLink.HandlerOut.ProPresenterInfo.toObject(includeInstance, f),
configuration: (f = msg.getConfiguration()) && proto.rv.data.ProApiNetworkConfiguration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProLink.HandlerOut}
 */
proto.rv.data.ProLink.HandlerOut.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProLink.HandlerOut;
  return proto.rv.data.ProLink.HandlerOut.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProLink.HandlerOut} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProLink.HandlerOut}
 */
proto.rv.data.ProLink.HandlerOut.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.ProLink.HandlerOut.GroupName;
      reader.readMessage(value,proto.rv.data.ProLink.HandlerOut.GroupName.deserializeBinaryFromReader);
      msg.setGroupName(value);
      break;
    case 2:
      var value = new proto.rv.data.ProLink.GroupDefinition;
      reader.readMessage(value,proto.rv.data.ProLink.GroupDefinition.deserializeBinaryFromReader);
      msg.setGroupDefinition(value);
      break;
    case 3:
      var value = new proto.rv.data.ProLink.HandlerOut.GroupJoinConfirmation;
      reader.readMessage(value,proto.rv.data.ProLink.HandlerOut.GroupJoinConfirmation.deserializeBinaryFromReader);
      msg.setGroupJoinConfirmation(value);
      break;
    case 4:
      var value = new proto.rv.data.ProLink.HandlerOut.GroupJoinPassword;
      reader.readMessage(value,proto.rv.data.ProLink.HandlerOut.GroupJoinPassword.deserializeBinaryFromReader);
      msg.setGroupJoinPassword(value);
      break;
    case 5:
      var value = new proto.rv.data.ProLink.HandlerOut.ProPresenterInfo;
      reader.readMessage(value,proto.rv.data.ProLink.HandlerOut.ProPresenterInfo.deserializeBinaryFromReader);
      msg.setPropresenterInfo(value);
      break;
    case 6:
      var value = new proto.rv.data.ProApiNetworkConfiguration;
      reader.readMessage(value,proto.rv.data.ProApiNetworkConfiguration.deserializeBinaryFromReader);
      msg.setConfiguration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProLink.HandlerOut.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProLink.HandlerOut.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProLink.HandlerOut} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerOut.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupName();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.ProLink.HandlerOut.GroupName.serializeBinaryToWriter
    );
  }
  f = message.getGroupDefinition();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rv.data.ProLink.GroupDefinition.serializeBinaryToWriter
    );
  }
  f = message.getGroupJoinConfirmation();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rv.data.ProLink.HandlerOut.GroupJoinConfirmation.serializeBinaryToWriter
    );
  }
  f = message.getGroupJoinPassword();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rv.data.ProLink.HandlerOut.GroupJoinPassword.serializeBinaryToWriter
    );
  }
  f = message.getPropresenterInfo();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.rv.data.ProLink.HandlerOut.ProPresenterInfo.serializeBinaryToWriter
    );
  }
  f = message.getConfiguration();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.rv.data.ProApiNetworkConfiguration.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProLink.HandlerOut.GroupName.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProLink.HandlerOut.GroupName.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProLink.HandlerOut.GroupName} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerOut.GroupName.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProLink.HandlerOut.GroupName}
 */
proto.rv.data.ProLink.HandlerOut.GroupName.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProLink.HandlerOut.GroupName;
  return proto.rv.data.ProLink.HandlerOut.GroupName.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProLink.HandlerOut.GroupName} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProLink.HandlerOut.GroupName}
 */
proto.rv.data.ProLink.HandlerOut.GroupName.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProLink.HandlerOut.GroupName.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProLink.HandlerOut.GroupName.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProLink.HandlerOut.GroupName} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerOut.GroupName.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.rv.data.ProLink.HandlerOut.GroupName.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.ProLink.HandlerOut.GroupName} returns this
 */
proto.rv.data.ProLink.HandlerOut.GroupName.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProLink.HandlerOut.GroupJoinConfirmation.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProLink.HandlerOut.GroupJoinConfirmation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProLink.HandlerOut.GroupJoinConfirmation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerOut.GroupJoinConfirmation.toObject = function(includeInstance, msg) {
  var f, obj = {
accept: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProLink.HandlerOut.GroupJoinConfirmation}
 */
proto.rv.data.ProLink.HandlerOut.GroupJoinConfirmation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProLink.HandlerOut.GroupJoinConfirmation;
  return proto.rv.data.ProLink.HandlerOut.GroupJoinConfirmation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProLink.HandlerOut.GroupJoinConfirmation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProLink.HandlerOut.GroupJoinConfirmation}
 */
proto.rv.data.ProLink.HandlerOut.GroupJoinConfirmation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAccept(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProLink.HandlerOut.GroupJoinConfirmation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProLink.HandlerOut.GroupJoinConfirmation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProLink.HandlerOut.GroupJoinConfirmation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerOut.GroupJoinConfirmation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccept();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool accept = 1;
 * @return {boolean}
 */
proto.rv.data.ProLink.HandlerOut.GroupJoinConfirmation.prototype.getAccept = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.ProLink.HandlerOut.GroupJoinConfirmation} returns this
 */
proto.rv.data.ProLink.HandlerOut.GroupJoinConfirmation.prototype.setAccept = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProLink.HandlerOut.GroupJoinPassword.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProLink.HandlerOut.GroupJoinPassword.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProLink.HandlerOut.GroupJoinPassword} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerOut.GroupJoinPassword.toObject = function(includeInstance, msg) {
  var f, obj = {
password: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProLink.HandlerOut.GroupJoinPassword}
 */
proto.rv.data.ProLink.HandlerOut.GroupJoinPassword.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProLink.HandlerOut.GroupJoinPassword;
  return proto.rv.data.ProLink.HandlerOut.GroupJoinPassword.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProLink.HandlerOut.GroupJoinPassword} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProLink.HandlerOut.GroupJoinPassword}
 */
proto.rv.data.ProLink.HandlerOut.GroupJoinPassword.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProLink.HandlerOut.GroupJoinPassword.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProLink.HandlerOut.GroupJoinPassword.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProLink.HandlerOut.GroupJoinPassword} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerOut.GroupJoinPassword.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string password = 1;
 * @return {string}
 */
proto.rv.data.ProLink.HandlerOut.GroupJoinPassword.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.ProLink.HandlerOut.GroupJoinPassword} returns this
 */
proto.rv.data.ProLink.HandlerOut.GroupJoinPassword.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.ProLink.HandlerOut.ProPresenterInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.ProLink.HandlerOut.ProPresenterInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.ProLink.HandlerOut.ProPresenterInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerOut.ProPresenterInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
platform: jspb.Message.getFieldWithDefault(msg, 1, 0),
osVersion: jspb.Message.getFieldWithDefault(msg, 2, ""),
hostDescription: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.ProLink.HandlerOut.ProPresenterInfo}
 */
proto.rv.data.ProLink.HandlerOut.ProPresenterInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.ProLink.HandlerOut.ProPresenterInfo;
  return proto.rv.data.ProLink.HandlerOut.ProPresenterInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.ProLink.HandlerOut.ProPresenterInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.ProLink.HandlerOut.ProPresenterInfo}
 */
proto.rv.data.ProLink.HandlerOut.ProPresenterInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.rv.data.ApplicationInfo.Platform} */ (reader.readEnum());
      msg.setPlatform(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOsVersion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHostDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.ProLink.HandlerOut.ProPresenterInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.ProLink.HandlerOut.ProPresenterInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.ProLink.HandlerOut.ProPresenterInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.ProLink.HandlerOut.ProPresenterInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlatform();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getOsVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHostDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional ApplicationInfo.Platform platform = 1;
 * @return {!proto.rv.data.ApplicationInfo.Platform}
 */
proto.rv.data.ProLink.HandlerOut.ProPresenterInfo.prototype.getPlatform = function() {
  return /** @type {!proto.rv.data.ApplicationInfo.Platform} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.rv.data.ApplicationInfo.Platform} value
 * @return {!proto.rv.data.ProLink.HandlerOut.ProPresenterInfo} returns this
 */
proto.rv.data.ProLink.HandlerOut.ProPresenterInfo.prototype.setPlatform = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string os_version = 2;
 * @return {string}
 */
proto.rv.data.ProLink.HandlerOut.ProPresenterInfo.prototype.getOsVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.ProLink.HandlerOut.ProPresenterInfo} returns this
 */
proto.rv.data.ProLink.HandlerOut.ProPresenterInfo.prototype.setOsVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string host_description = 3;
 * @return {string}
 */
proto.rv.data.ProLink.HandlerOut.ProPresenterInfo.prototype.getHostDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.ProLink.HandlerOut.ProPresenterInfo} returns this
 */
proto.rv.data.ProLink.HandlerOut.ProPresenterInfo.prototype.setHostDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional GroupName group_name = 1;
 * @return {?proto.rv.data.ProLink.HandlerOut.GroupName}
 */
proto.rv.data.ProLink.HandlerOut.prototype.getGroupName = function() {
  return /** @type{?proto.rv.data.ProLink.HandlerOut.GroupName} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ProLink.HandlerOut.GroupName, 1));
};


/**
 * @param {?proto.rv.data.ProLink.HandlerOut.GroupName|undefined} value
 * @return {!proto.rv.data.ProLink.HandlerOut} returns this
*/
proto.rv.data.ProLink.HandlerOut.prototype.setGroupName = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.rv.data.ProLink.HandlerOut.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ProLink.HandlerOut} returns this
 */
proto.rv.data.ProLink.HandlerOut.prototype.clearGroupName = function() {
  return this.setGroupName(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ProLink.HandlerOut.prototype.hasGroupName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GroupDefinition group_definition = 2;
 * @return {?proto.rv.data.ProLink.GroupDefinition}
 */
proto.rv.data.ProLink.HandlerOut.prototype.getGroupDefinition = function() {
  return /** @type{?proto.rv.data.ProLink.GroupDefinition} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ProLink.GroupDefinition, 2));
};


/**
 * @param {?proto.rv.data.ProLink.GroupDefinition|undefined} value
 * @return {!proto.rv.data.ProLink.HandlerOut} returns this
*/
proto.rv.data.ProLink.HandlerOut.prototype.setGroupDefinition = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.rv.data.ProLink.HandlerOut.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ProLink.HandlerOut} returns this
 */
proto.rv.data.ProLink.HandlerOut.prototype.clearGroupDefinition = function() {
  return this.setGroupDefinition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ProLink.HandlerOut.prototype.hasGroupDefinition = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional GroupJoinConfirmation group_join_confirmation = 3;
 * @return {?proto.rv.data.ProLink.HandlerOut.GroupJoinConfirmation}
 */
proto.rv.data.ProLink.HandlerOut.prototype.getGroupJoinConfirmation = function() {
  return /** @type{?proto.rv.data.ProLink.HandlerOut.GroupJoinConfirmation} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ProLink.HandlerOut.GroupJoinConfirmation, 3));
};


/**
 * @param {?proto.rv.data.ProLink.HandlerOut.GroupJoinConfirmation|undefined} value
 * @return {!proto.rv.data.ProLink.HandlerOut} returns this
*/
proto.rv.data.ProLink.HandlerOut.prototype.setGroupJoinConfirmation = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.rv.data.ProLink.HandlerOut.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ProLink.HandlerOut} returns this
 */
proto.rv.data.ProLink.HandlerOut.prototype.clearGroupJoinConfirmation = function() {
  return this.setGroupJoinConfirmation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ProLink.HandlerOut.prototype.hasGroupJoinConfirmation = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional GroupJoinPassword group_join_password = 4;
 * @return {?proto.rv.data.ProLink.HandlerOut.GroupJoinPassword}
 */
proto.rv.data.ProLink.HandlerOut.prototype.getGroupJoinPassword = function() {
  return /** @type{?proto.rv.data.ProLink.HandlerOut.GroupJoinPassword} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ProLink.HandlerOut.GroupJoinPassword, 4));
};


/**
 * @param {?proto.rv.data.ProLink.HandlerOut.GroupJoinPassword|undefined} value
 * @return {!proto.rv.data.ProLink.HandlerOut} returns this
*/
proto.rv.data.ProLink.HandlerOut.prototype.setGroupJoinPassword = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.rv.data.ProLink.HandlerOut.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ProLink.HandlerOut} returns this
 */
proto.rv.data.ProLink.HandlerOut.prototype.clearGroupJoinPassword = function() {
  return this.setGroupJoinPassword(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ProLink.HandlerOut.prototype.hasGroupJoinPassword = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ProPresenterInfo propresenter_info = 5;
 * @return {?proto.rv.data.ProLink.HandlerOut.ProPresenterInfo}
 */
proto.rv.data.ProLink.HandlerOut.prototype.getPropresenterInfo = function() {
  return /** @type{?proto.rv.data.ProLink.HandlerOut.ProPresenterInfo} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ProLink.HandlerOut.ProPresenterInfo, 5));
};


/**
 * @param {?proto.rv.data.ProLink.HandlerOut.ProPresenterInfo|undefined} value
 * @return {!proto.rv.data.ProLink.HandlerOut} returns this
*/
proto.rv.data.ProLink.HandlerOut.prototype.setPropresenterInfo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.rv.data.ProLink.HandlerOut.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ProLink.HandlerOut} returns this
 */
proto.rv.data.ProLink.HandlerOut.prototype.clearPropresenterInfo = function() {
  return this.setPropresenterInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ProLink.HandlerOut.prototype.hasPropresenterInfo = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ProApiNetworkConfiguration configuration = 6;
 * @return {?proto.rv.data.ProApiNetworkConfiguration}
 */
proto.rv.data.ProLink.HandlerOut.prototype.getConfiguration = function() {
  return /** @type{?proto.rv.data.ProApiNetworkConfiguration} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.ProApiNetworkConfiguration, 6));
};


/**
 * @param {?proto.rv.data.ProApiNetworkConfiguration|undefined} value
 * @return {!proto.rv.data.ProLink.HandlerOut} returns this
*/
proto.rv.data.ProLink.HandlerOut.prototype.setConfiguration = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.rv.data.ProLink.HandlerOut.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.ProLink.HandlerOut} returns this
 */
proto.rv.data.ProLink.HandlerOut.prototype.clearConfiguration = function() {
  return this.setConfiguration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.ProLink.HandlerOut.prototype.hasConfiguration = function() {
  return jspb.Message.getField(this, 6) != null;
};


