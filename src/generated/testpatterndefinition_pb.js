// source: testPattern.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.rv.data.TestPatternDefinition');
goog.provide('proto.rv.data.TestPatternDefinition.BoolProperty');
goog.provide('proto.rv.data.TestPatternDefinition.ColorProperty');
goog.provide('proto.rv.data.TestPatternDefinition.DoubleProperty');
goog.provide('proto.rv.data.TestPatternDefinition.DoubleProperty.ViewType');
goog.provide('proto.rv.data.TestPatternDefinition.FontProperty');
goog.provide('proto.rv.data.TestPatternDefinition.IntProperty');
goog.provide('proto.rv.data.TestPatternDefinition.Property');
goog.provide('proto.rv.data.TestPatternDefinition.Property.PropertytypeCase');
goog.provide('proto.rv.data.TestPatternDefinition.SelectorProperty');
goog.provide('proto.rv.data.TestPatternDefinition.StringProperty');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.rv.data.Color');
goog.require('proto.rv.data.Font');
goog.require('proto.rv.data.UUID');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TestPatternDefinition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rv.data.TestPatternDefinition.repeatedFields_, null);
};
goog.inherits(proto.rv.data.TestPatternDefinition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TestPatternDefinition.displayName = 'proto.rv.data.TestPatternDefinition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TestPatternDefinition.ColorProperty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rv.data.TestPatternDefinition.ColorProperty.repeatedFields_, null);
};
goog.inherits(proto.rv.data.TestPatternDefinition.ColorProperty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TestPatternDefinition.ColorProperty.displayName = 'proto.rv.data.TestPatternDefinition.ColorProperty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TestPatternDefinition.DoubleProperty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.TestPatternDefinition.DoubleProperty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TestPatternDefinition.DoubleProperty.displayName = 'proto.rv.data.TestPatternDefinition.DoubleProperty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TestPatternDefinition.IntProperty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.TestPatternDefinition.IntProperty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TestPatternDefinition.IntProperty.displayName = 'proto.rv.data.TestPatternDefinition.IntProperty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TestPatternDefinition.BoolProperty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rv.data.TestPatternDefinition.BoolProperty.repeatedFields_, null);
};
goog.inherits(proto.rv.data.TestPatternDefinition.BoolProperty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TestPatternDefinition.BoolProperty.displayName = 'proto.rv.data.TestPatternDefinition.BoolProperty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TestPatternDefinition.StringProperty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.TestPatternDefinition.StringProperty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TestPatternDefinition.StringProperty.displayName = 'proto.rv.data.TestPatternDefinition.StringProperty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TestPatternDefinition.FontProperty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.TestPatternDefinition.FontProperty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TestPatternDefinition.FontProperty.displayName = 'proto.rv.data.TestPatternDefinition.FontProperty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TestPatternDefinition.SelectorProperty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rv.data.TestPatternDefinition.SelectorProperty.repeatedFields_, null);
};
goog.inherits(proto.rv.data.TestPatternDefinition.SelectorProperty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TestPatternDefinition.SelectorProperty.displayName = 'proto.rv.data.TestPatternDefinition.SelectorProperty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TestPatternDefinition.Property = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rv.data.TestPatternDefinition.Property.oneofGroups_);
};
goog.inherits(proto.rv.data.TestPatternDefinition.Property, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TestPatternDefinition.Property.displayName = 'proto.rv.data.TestPatternDefinition.Property';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rv.data.TestPatternDefinition.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TestPatternDefinition.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TestPatternDefinition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TestPatternDefinition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TestPatternDefinition.toObject = function(includeInstance, msg) {
  var f, obj = {
uuid: (f = msg.getUuid()) && proto.rv.data.UUID.toObject(includeInstance, f),
nameLocalizationKey: jspb.Message.getFieldWithDefault(msg, 2, ""),
propertiesList: jspb.Message.toObjectList(msg.getPropertiesList(),
    proto.rv.data.TestPatternDefinition.Property.toObject, includeInstance),
showDelaySettings: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
isDefault: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TestPatternDefinition}
 */
proto.rv.data.TestPatternDefinition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TestPatternDefinition;
  return proto.rv.data.TestPatternDefinition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TestPatternDefinition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TestPatternDefinition}
 */
proto.rv.data.TestPatternDefinition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.UUID;
      reader.readMessage(value,proto.rv.data.UUID.deserializeBinaryFromReader);
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNameLocalizationKey(value);
      break;
    case 3:
      var value = new proto.rv.data.TestPatternDefinition.Property;
      reader.readMessage(value,proto.rv.data.TestPatternDefinition.Property.deserializeBinaryFromReader);
      msg.addProperties(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShowDelaySettings(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsDefault(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TestPatternDefinition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TestPatternDefinition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TestPatternDefinition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TestPatternDefinition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.UUID.serializeBinaryToWriter
    );
  }
  f = message.getNameLocalizationKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPropertiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.rv.data.TestPatternDefinition.Property.serializeBinaryToWriter
    );
  }
  f = message.getShowDelaySettings();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getIsDefault();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rv.data.TestPatternDefinition.ColorProperty.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TestPatternDefinition.ColorProperty.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TestPatternDefinition.ColorProperty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TestPatternDefinition.ColorProperty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TestPatternDefinition.ColorProperty.toObject = function(includeInstance, msg) {
  var f, obj = {
value: (f = msg.getValue()) && proto.rv.data.Color.toObject(includeInstance, f),
allowAlpha: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
defaultColorsList: jspb.Message.toObjectList(msg.getDefaultColorsList(),
    proto.rv.data.Color.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TestPatternDefinition.ColorProperty}
 */
proto.rv.data.TestPatternDefinition.ColorProperty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TestPatternDefinition.ColorProperty;
  return proto.rv.data.TestPatternDefinition.ColorProperty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TestPatternDefinition.ColorProperty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TestPatternDefinition.ColorProperty}
 */
proto.rv.data.TestPatternDefinition.ColorProperty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.Color;
      reader.readMessage(value,proto.rv.data.Color.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowAlpha(value);
      break;
    case 3:
      var value = new proto.rv.data.Color;
      reader.readMessage(value,proto.rv.data.Color.deserializeBinaryFromReader);
      msg.addDefaultColors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TestPatternDefinition.ColorProperty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TestPatternDefinition.ColorProperty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TestPatternDefinition.ColorProperty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TestPatternDefinition.ColorProperty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.Color.serializeBinaryToWriter
    );
  }
  f = message.getAllowAlpha();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getDefaultColorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.rv.data.Color.serializeBinaryToWriter
    );
  }
};


/**
 * optional Color value = 1;
 * @return {?proto.rv.data.Color}
 */
proto.rv.data.TestPatternDefinition.ColorProperty.prototype.getValue = function() {
  return /** @type{?proto.rv.data.Color} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Color, 1));
};


/**
 * @param {?proto.rv.data.Color|undefined} value
 * @return {!proto.rv.data.TestPatternDefinition.ColorProperty} returns this
*/
proto.rv.data.TestPatternDefinition.ColorProperty.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TestPatternDefinition.ColorProperty} returns this
 */
proto.rv.data.TestPatternDefinition.ColorProperty.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TestPatternDefinition.ColorProperty.prototype.hasValue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool allow_alpha = 2;
 * @return {boolean}
 */
proto.rv.data.TestPatternDefinition.ColorProperty.prototype.getAllowAlpha = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.TestPatternDefinition.ColorProperty} returns this
 */
proto.rv.data.TestPatternDefinition.ColorProperty.prototype.setAllowAlpha = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * repeated Color default_colors = 3;
 * @return {!Array<!proto.rv.data.Color>}
 */
proto.rv.data.TestPatternDefinition.ColorProperty.prototype.getDefaultColorsList = function() {
  return /** @type{!Array<!proto.rv.data.Color>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rv.data.Color, 3));
};


/**
 * @param {!Array<!proto.rv.data.Color>} value
 * @return {!proto.rv.data.TestPatternDefinition.ColorProperty} returns this
*/
proto.rv.data.TestPatternDefinition.ColorProperty.prototype.setDefaultColorsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.rv.data.Color=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rv.data.Color}
 */
proto.rv.data.TestPatternDefinition.ColorProperty.prototype.addDefaultColors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.rv.data.Color, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.TestPatternDefinition.ColorProperty} returns this
 */
proto.rv.data.TestPatternDefinition.ColorProperty.prototype.clearDefaultColorsList = function() {
  return this.setDefaultColorsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TestPatternDefinition.DoubleProperty.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TestPatternDefinition.DoubleProperty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TestPatternDefinition.DoubleProperty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TestPatternDefinition.DoubleProperty.toObject = function(includeInstance, msg) {
  var f, obj = {
value: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
min: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
max: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
step: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
units: jspb.Message.getFieldWithDefault(msg, 5, ""),
viewtype: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TestPatternDefinition.DoubleProperty}
 */
proto.rv.data.TestPatternDefinition.DoubleProperty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TestPatternDefinition.DoubleProperty;
  return proto.rv.data.TestPatternDefinition.DoubleProperty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TestPatternDefinition.DoubleProperty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TestPatternDefinition.DoubleProperty}
 */
proto.rv.data.TestPatternDefinition.DoubleProperty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMin(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMax(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStep(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnits(value);
      break;
    case 6:
      var value = /** @type {!proto.rv.data.TestPatternDefinition.DoubleProperty.ViewType} */ (reader.readEnum());
      msg.setViewtype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TestPatternDefinition.DoubleProperty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TestPatternDefinition.DoubleProperty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TestPatternDefinition.DoubleProperty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TestPatternDefinition.DoubleProperty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getMin();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getMax();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getStep();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getUnits();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getViewtype();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.rv.data.TestPatternDefinition.DoubleProperty.ViewType = {
  VIEW_TYPE_STEPPER: 0,
  VIEW_TYPE_SLIDER: 1,
  VIEW_TYPE_SPEED_SLIDER: 2
};

/**
 * optional double value = 1;
 * @return {number}
 */
proto.rv.data.TestPatternDefinition.DoubleProperty.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.TestPatternDefinition.DoubleProperty} returns this
 */
proto.rv.data.TestPatternDefinition.DoubleProperty.prototype.setValue = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double min = 2;
 * @return {number}
 */
proto.rv.data.TestPatternDefinition.DoubleProperty.prototype.getMin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.TestPatternDefinition.DoubleProperty} returns this
 */
proto.rv.data.TestPatternDefinition.DoubleProperty.prototype.setMin = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double max = 3;
 * @return {number}
 */
proto.rv.data.TestPatternDefinition.DoubleProperty.prototype.getMax = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.TestPatternDefinition.DoubleProperty} returns this
 */
proto.rv.data.TestPatternDefinition.DoubleProperty.prototype.setMax = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double step = 4;
 * @return {number}
 */
proto.rv.data.TestPatternDefinition.DoubleProperty.prototype.getStep = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.TestPatternDefinition.DoubleProperty} returns this
 */
proto.rv.data.TestPatternDefinition.DoubleProperty.prototype.setStep = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional string units = 5;
 * @return {string}
 */
proto.rv.data.TestPatternDefinition.DoubleProperty.prototype.getUnits = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.TestPatternDefinition.DoubleProperty} returns this
 */
proto.rv.data.TestPatternDefinition.DoubleProperty.prototype.setUnits = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional ViewType viewType = 6;
 * @return {!proto.rv.data.TestPatternDefinition.DoubleProperty.ViewType}
 */
proto.rv.data.TestPatternDefinition.DoubleProperty.prototype.getViewtype = function() {
  return /** @type {!proto.rv.data.TestPatternDefinition.DoubleProperty.ViewType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.rv.data.TestPatternDefinition.DoubleProperty.ViewType} value
 * @return {!proto.rv.data.TestPatternDefinition.DoubleProperty} returns this
 */
proto.rv.data.TestPatternDefinition.DoubleProperty.prototype.setViewtype = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TestPatternDefinition.IntProperty.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TestPatternDefinition.IntProperty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TestPatternDefinition.IntProperty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TestPatternDefinition.IntProperty.toObject = function(includeInstance, msg) {
  var f, obj = {
value: jspb.Message.getFieldWithDefault(msg, 1, 0),
min: jspb.Message.getFieldWithDefault(msg, 2, 0),
max: jspb.Message.getFieldWithDefault(msg, 3, 0),
units: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TestPatternDefinition.IntProperty}
 */
proto.rv.data.TestPatternDefinition.IntProperty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TestPatternDefinition.IntProperty;
  return proto.rv.data.TestPatternDefinition.IntProperty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TestPatternDefinition.IntProperty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TestPatternDefinition.IntProperty}
 */
proto.rv.data.TestPatternDefinition.IntProperty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMin(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMax(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnits(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TestPatternDefinition.IntProperty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TestPatternDefinition.IntProperty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TestPatternDefinition.IntProperty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TestPatternDefinition.IntProperty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMin();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getMax();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getUnits();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional int32 value = 1;
 * @return {number}
 */
proto.rv.data.TestPatternDefinition.IntProperty.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.TestPatternDefinition.IntProperty} returns this
 */
proto.rv.data.TestPatternDefinition.IntProperty.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 min = 2;
 * @return {number}
 */
proto.rv.data.TestPatternDefinition.IntProperty.prototype.getMin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.TestPatternDefinition.IntProperty} returns this
 */
proto.rv.data.TestPatternDefinition.IntProperty.prototype.setMin = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 max = 3;
 * @return {number}
 */
proto.rv.data.TestPatternDefinition.IntProperty.prototype.getMax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.TestPatternDefinition.IntProperty} returns this
 */
proto.rv.data.TestPatternDefinition.IntProperty.prototype.setMax = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string units = 5;
 * @return {string}
 */
proto.rv.data.TestPatternDefinition.IntProperty.prototype.getUnits = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.TestPatternDefinition.IntProperty} returns this
 */
proto.rv.data.TestPatternDefinition.IntProperty.prototype.setUnits = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rv.data.TestPatternDefinition.BoolProperty.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TestPatternDefinition.BoolProperty.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TestPatternDefinition.BoolProperty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TestPatternDefinition.BoolProperty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TestPatternDefinition.BoolProperty.toObject = function(includeInstance, msg) {
  var f, obj = {
value: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
dependentPropertiesList: jspb.Message.toObjectList(msg.getDependentPropertiesList(),
    proto.rv.data.TestPatternDefinition.Property.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TestPatternDefinition.BoolProperty}
 */
proto.rv.data.TestPatternDefinition.BoolProperty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TestPatternDefinition.BoolProperty;
  return proto.rv.data.TestPatternDefinition.BoolProperty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TestPatternDefinition.BoolProperty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TestPatternDefinition.BoolProperty}
 */
proto.rv.data.TestPatternDefinition.BoolProperty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setValue(value);
      break;
    case 2:
      var value = new proto.rv.data.TestPatternDefinition.Property;
      reader.readMessage(value,proto.rv.data.TestPatternDefinition.Property.deserializeBinaryFromReader);
      msg.addDependentProperties(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TestPatternDefinition.BoolProperty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TestPatternDefinition.BoolProperty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TestPatternDefinition.BoolProperty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TestPatternDefinition.BoolProperty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getDependentPropertiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.rv.data.TestPatternDefinition.Property.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool value = 1;
 * @return {boolean}
 */
proto.rv.data.TestPatternDefinition.BoolProperty.prototype.getValue = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.TestPatternDefinition.BoolProperty} returns this
 */
proto.rv.data.TestPatternDefinition.BoolProperty.prototype.setValue = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * repeated Property dependent_properties = 2;
 * @return {!Array<!proto.rv.data.TestPatternDefinition.Property>}
 */
proto.rv.data.TestPatternDefinition.BoolProperty.prototype.getDependentPropertiesList = function() {
  return /** @type{!Array<!proto.rv.data.TestPatternDefinition.Property>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rv.data.TestPatternDefinition.Property, 2));
};


/**
 * @param {!Array<!proto.rv.data.TestPatternDefinition.Property>} value
 * @return {!proto.rv.data.TestPatternDefinition.BoolProperty} returns this
*/
proto.rv.data.TestPatternDefinition.BoolProperty.prototype.setDependentPropertiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.rv.data.TestPatternDefinition.Property=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rv.data.TestPatternDefinition.Property}
 */
proto.rv.data.TestPatternDefinition.BoolProperty.prototype.addDependentProperties = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.rv.data.TestPatternDefinition.Property, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.TestPatternDefinition.BoolProperty} returns this
 */
proto.rv.data.TestPatternDefinition.BoolProperty.prototype.clearDependentPropertiesList = function() {
  return this.setDependentPropertiesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TestPatternDefinition.StringProperty.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TestPatternDefinition.StringProperty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TestPatternDefinition.StringProperty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TestPatternDefinition.StringProperty.toObject = function(includeInstance, msg) {
  var f, obj = {
value: jspb.Message.getFieldWithDefault(msg, 1, ""),
minChars: jspb.Message.getFieldWithDefault(msg, 2, 0),
maxChars: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TestPatternDefinition.StringProperty}
 */
proto.rv.data.TestPatternDefinition.StringProperty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TestPatternDefinition.StringProperty;
  return proto.rv.data.TestPatternDefinition.StringProperty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TestPatternDefinition.StringProperty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TestPatternDefinition.StringProperty}
 */
proto.rv.data.TestPatternDefinition.StringProperty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinChars(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxChars(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TestPatternDefinition.StringProperty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TestPatternDefinition.StringProperty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TestPatternDefinition.StringProperty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TestPatternDefinition.StringProperty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMinChars();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getMaxChars();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string value = 1;
 * @return {string}
 */
proto.rv.data.TestPatternDefinition.StringProperty.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.TestPatternDefinition.StringProperty} returns this
 */
proto.rv.data.TestPatternDefinition.StringProperty.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 min_chars = 2;
 * @return {number}
 */
proto.rv.data.TestPatternDefinition.StringProperty.prototype.getMinChars = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.TestPatternDefinition.StringProperty} returns this
 */
proto.rv.data.TestPatternDefinition.StringProperty.prototype.setMinChars = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 max_chars = 3;
 * @return {number}
 */
proto.rv.data.TestPatternDefinition.StringProperty.prototype.getMaxChars = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.TestPatternDefinition.StringProperty} returns this
 */
proto.rv.data.TestPatternDefinition.StringProperty.prototype.setMaxChars = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TestPatternDefinition.FontProperty.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TestPatternDefinition.FontProperty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TestPatternDefinition.FontProperty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TestPatternDefinition.FontProperty.toObject = function(includeInstance, msg) {
  var f, obj = {
font: (f = msg.getFont()) && proto.rv.data.Font.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TestPatternDefinition.FontProperty}
 */
proto.rv.data.TestPatternDefinition.FontProperty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TestPatternDefinition.FontProperty;
  return proto.rv.data.TestPatternDefinition.FontProperty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TestPatternDefinition.FontProperty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TestPatternDefinition.FontProperty}
 */
proto.rv.data.TestPatternDefinition.FontProperty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.Font;
      reader.readMessage(value,proto.rv.data.Font.deserializeBinaryFromReader);
      msg.setFont(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TestPatternDefinition.FontProperty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TestPatternDefinition.FontProperty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TestPatternDefinition.FontProperty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TestPatternDefinition.FontProperty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFont();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.Font.serializeBinaryToWriter
    );
  }
};


/**
 * optional Font font = 1;
 * @return {?proto.rv.data.Font}
 */
proto.rv.data.TestPatternDefinition.FontProperty.prototype.getFont = function() {
  return /** @type{?proto.rv.data.Font} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Font, 1));
};


/**
 * @param {?proto.rv.data.Font|undefined} value
 * @return {!proto.rv.data.TestPatternDefinition.FontProperty} returns this
*/
proto.rv.data.TestPatternDefinition.FontProperty.prototype.setFont = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TestPatternDefinition.FontProperty} returns this
 */
proto.rv.data.TestPatternDefinition.FontProperty.prototype.clearFont = function() {
  return this.setFont(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TestPatternDefinition.FontProperty.prototype.hasFont = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rv.data.TestPatternDefinition.SelectorProperty.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TestPatternDefinition.SelectorProperty.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TestPatternDefinition.SelectorProperty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TestPatternDefinition.SelectorProperty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TestPatternDefinition.SelectorProperty.toObject = function(includeInstance, msg) {
  var f, obj = {
selectedIndex: jspb.Message.getFieldWithDefault(msg, 1, 0),
valueLocalizationKeysList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TestPatternDefinition.SelectorProperty}
 */
proto.rv.data.TestPatternDefinition.SelectorProperty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TestPatternDefinition.SelectorProperty;
  return proto.rv.data.TestPatternDefinition.SelectorProperty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TestPatternDefinition.SelectorProperty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TestPatternDefinition.SelectorProperty}
 */
proto.rv.data.TestPatternDefinition.SelectorProperty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSelectedIndex(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addValueLocalizationKeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TestPatternDefinition.SelectorProperty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TestPatternDefinition.SelectorProperty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TestPatternDefinition.SelectorProperty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TestPatternDefinition.SelectorProperty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSelectedIndex();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getValueLocalizationKeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional int32 selected_index = 1;
 * @return {number}
 */
proto.rv.data.TestPatternDefinition.SelectorProperty.prototype.getSelectedIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.TestPatternDefinition.SelectorProperty} returns this
 */
proto.rv.data.TestPatternDefinition.SelectorProperty.prototype.setSelectedIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated string value_localization_keys = 2;
 * @return {!Array<string>}
 */
proto.rv.data.TestPatternDefinition.SelectorProperty.prototype.getValueLocalizationKeysList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.rv.data.TestPatternDefinition.SelectorProperty} returns this
 */
proto.rv.data.TestPatternDefinition.SelectorProperty.prototype.setValueLocalizationKeysList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.rv.data.TestPatternDefinition.SelectorProperty} returns this
 */
proto.rv.data.TestPatternDefinition.SelectorProperty.prototype.addValueLocalizationKeys = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.TestPatternDefinition.SelectorProperty} returns this
 */
proto.rv.data.TestPatternDefinition.SelectorProperty.prototype.clearValueLocalizationKeysList = function() {
  return this.setValueLocalizationKeysList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rv.data.TestPatternDefinition.Property.oneofGroups_ = [[3,4,5,6,7,8,9]];

/**
 * @enum {number}
 */
proto.rv.data.TestPatternDefinition.Property.PropertytypeCase = {
  PROPERTYTYPE_NOT_SET: 0,
  COLOR_PROPERTY: 3,
  DOUBLE_PROPERTY: 4,
  INT_PROPERTY: 5,
  BOOL_PROPERTY: 6,
  STRING_PROPERTY: 7,
  FONT_PROPERTY: 8,
  SELECTOR_PROPERTY: 9
};

/**
 * @return {proto.rv.data.TestPatternDefinition.Property.PropertytypeCase}
 */
proto.rv.data.TestPatternDefinition.Property.prototype.getPropertytypeCase = function() {
  return /** @type {proto.rv.data.TestPatternDefinition.Property.PropertytypeCase} */(jspb.Message.computeOneofCase(this, proto.rv.data.TestPatternDefinition.Property.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TestPatternDefinition.Property.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TestPatternDefinition.Property.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TestPatternDefinition.Property} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TestPatternDefinition.Property.toObject = function(includeInstance, msg) {
  var f, obj = {
nameLocalizationKey: jspb.Message.getFieldWithDefault(msg, 1, ""),
colorProperty: (f = msg.getColorProperty()) && proto.rv.data.TestPatternDefinition.ColorProperty.toObject(includeInstance, f),
doubleProperty: (f = msg.getDoubleProperty()) && proto.rv.data.TestPatternDefinition.DoubleProperty.toObject(includeInstance, f),
intProperty: (f = msg.getIntProperty()) && proto.rv.data.TestPatternDefinition.IntProperty.toObject(includeInstance, f),
boolProperty: (f = msg.getBoolProperty()) && proto.rv.data.TestPatternDefinition.BoolProperty.toObject(includeInstance, f),
stringProperty: (f = msg.getStringProperty()) && proto.rv.data.TestPatternDefinition.StringProperty.toObject(includeInstance, f),
fontProperty: (f = msg.getFontProperty()) && proto.rv.data.TestPatternDefinition.FontProperty.toObject(includeInstance, f),
selectorProperty: (f = msg.getSelectorProperty()) && proto.rv.data.TestPatternDefinition.SelectorProperty.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TestPatternDefinition.Property}
 */
proto.rv.data.TestPatternDefinition.Property.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TestPatternDefinition.Property;
  return proto.rv.data.TestPatternDefinition.Property.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TestPatternDefinition.Property} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TestPatternDefinition.Property}
 */
proto.rv.data.TestPatternDefinition.Property.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNameLocalizationKey(value);
      break;
    case 3:
      var value = new proto.rv.data.TestPatternDefinition.ColorProperty;
      reader.readMessage(value,proto.rv.data.TestPatternDefinition.ColorProperty.deserializeBinaryFromReader);
      msg.setColorProperty(value);
      break;
    case 4:
      var value = new proto.rv.data.TestPatternDefinition.DoubleProperty;
      reader.readMessage(value,proto.rv.data.TestPatternDefinition.DoubleProperty.deserializeBinaryFromReader);
      msg.setDoubleProperty(value);
      break;
    case 5:
      var value = new proto.rv.data.TestPatternDefinition.IntProperty;
      reader.readMessage(value,proto.rv.data.TestPatternDefinition.IntProperty.deserializeBinaryFromReader);
      msg.setIntProperty(value);
      break;
    case 6:
      var value = new proto.rv.data.TestPatternDefinition.BoolProperty;
      reader.readMessage(value,proto.rv.data.TestPatternDefinition.BoolProperty.deserializeBinaryFromReader);
      msg.setBoolProperty(value);
      break;
    case 7:
      var value = new proto.rv.data.TestPatternDefinition.StringProperty;
      reader.readMessage(value,proto.rv.data.TestPatternDefinition.StringProperty.deserializeBinaryFromReader);
      msg.setStringProperty(value);
      break;
    case 8:
      var value = new proto.rv.data.TestPatternDefinition.FontProperty;
      reader.readMessage(value,proto.rv.data.TestPatternDefinition.FontProperty.deserializeBinaryFromReader);
      msg.setFontProperty(value);
      break;
    case 9:
      var value = new proto.rv.data.TestPatternDefinition.SelectorProperty;
      reader.readMessage(value,proto.rv.data.TestPatternDefinition.SelectorProperty.deserializeBinaryFromReader);
      msg.setSelectorProperty(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TestPatternDefinition.Property.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TestPatternDefinition.Property.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TestPatternDefinition.Property} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TestPatternDefinition.Property.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNameLocalizationKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getColorProperty();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rv.data.TestPatternDefinition.ColorProperty.serializeBinaryToWriter
    );
  }
  f = message.getDoubleProperty();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rv.data.TestPatternDefinition.DoubleProperty.serializeBinaryToWriter
    );
  }
  f = message.getIntProperty();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.rv.data.TestPatternDefinition.IntProperty.serializeBinaryToWriter
    );
  }
  f = message.getBoolProperty();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.rv.data.TestPatternDefinition.BoolProperty.serializeBinaryToWriter
    );
  }
  f = message.getStringProperty();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.rv.data.TestPatternDefinition.StringProperty.serializeBinaryToWriter
    );
  }
  f = message.getFontProperty();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.rv.data.TestPatternDefinition.FontProperty.serializeBinaryToWriter
    );
  }
  f = message.getSelectorProperty();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.rv.data.TestPatternDefinition.SelectorProperty.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name_localization_key = 1;
 * @return {string}
 */
proto.rv.data.TestPatternDefinition.Property.prototype.getNameLocalizationKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.TestPatternDefinition.Property} returns this
 */
proto.rv.data.TestPatternDefinition.Property.prototype.setNameLocalizationKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ColorProperty color_property = 3;
 * @return {?proto.rv.data.TestPatternDefinition.ColorProperty}
 */
proto.rv.data.TestPatternDefinition.Property.prototype.getColorProperty = function() {
  return /** @type{?proto.rv.data.TestPatternDefinition.ColorProperty} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TestPatternDefinition.ColorProperty, 3));
};


/**
 * @param {?proto.rv.data.TestPatternDefinition.ColorProperty|undefined} value
 * @return {!proto.rv.data.TestPatternDefinition.Property} returns this
*/
proto.rv.data.TestPatternDefinition.Property.prototype.setColorProperty = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.rv.data.TestPatternDefinition.Property.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TestPatternDefinition.Property} returns this
 */
proto.rv.data.TestPatternDefinition.Property.prototype.clearColorProperty = function() {
  return this.setColorProperty(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TestPatternDefinition.Property.prototype.hasColorProperty = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional DoubleProperty double_property = 4;
 * @return {?proto.rv.data.TestPatternDefinition.DoubleProperty}
 */
proto.rv.data.TestPatternDefinition.Property.prototype.getDoubleProperty = function() {
  return /** @type{?proto.rv.data.TestPatternDefinition.DoubleProperty} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TestPatternDefinition.DoubleProperty, 4));
};


/**
 * @param {?proto.rv.data.TestPatternDefinition.DoubleProperty|undefined} value
 * @return {!proto.rv.data.TestPatternDefinition.Property} returns this
*/
proto.rv.data.TestPatternDefinition.Property.prototype.setDoubleProperty = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.rv.data.TestPatternDefinition.Property.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TestPatternDefinition.Property} returns this
 */
proto.rv.data.TestPatternDefinition.Property.prototype.clearDoubleProperty = function() {
  return this.setDoubleProperty(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TestPatternDefinition.Property.prototype.hasDoubleProperty = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional IntProperty int_property = 5;
 * @return {?proto.rv.data.TestPatternDefinition.IntProperty}
 */
proto.rv.data.TestPatternDefinition.Property.prototype.getIntProperty = function() {
  return /** @type{?proto.rv.data.TestPatternDefinition.IntProperty} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TestPatternDefinition.IntProperty, 5));
};


/**
 * @param {?proto.rv.data.TestPatternDefinition.IntProperty|undefined} value
 * @return {!proto.rv.data.TestPatternDefinition.Property} returns this
*/
proto.rv.data.TestPatternDefinition.Property.prototype.setIntProperty = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.rv.data.TestPatternDefinition.Property.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TestPatternDefinition.Property} returns this
 */
proto.rv.data.TestPatternDefinition.Property.prototype.clearIntProperty = function() {
  return this.setIntProperty(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TestPatternDefinition.Property.prototype.hasIntProperty = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional BoolProperty bool_property = 6;
 * @return {?proto.rv.data.TestPatternDefinition.BoolProperty}
 */
proto.rv.data.TestPatternDefinition.Property.prototype.getBoolProperty = function() {
  return /** @type{?proto.rv.data.TestPatternDefinition.BoolProperty} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TestPatternDefinition.BoolProperty, 6));
};


/**
 * @param {?proto.rv.data.TestPatternDefinition.BoolProperty|undefined} value
 * @return {!proto.rv.data.TestPatternDefinition.Property} returns this
*/
proto.rv.data.TestPatternDefinition.Property.prototype.setBoolProperty = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.rv.data.TestPatternDefinition.Property.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TestPatternDefinition.Property} returns this
 */
proto.rv.data.TestPatternDefinition.Property.prototype.clearBoolProperty = function() {
  return this.setBoolProperty(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TestPatternDefinition.Property.prototype.hasBoolProperty = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional StringProperty string_property = 7;
 * @return {?proto.rv.data.TestPatternDefinition.StringProperty}
 */
proto.rv.data.TestPatternDefinition.Property.prototype.getStringProperty = function() {
  return /** @type{?proto.rv.data.TestPatternDefinition.StringProperty} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TestPatternDefinition.StringProperty, 7));
};


/**
 * @param {?proto.rv.data.TestPatternDefinition.StringProperty|undefined} value
 * @return {!proto.rv.data.TestPatternDefinition.Property} returns this
*/
proto.rv.data.TestPatternDefinition.Property.prototype.setStringProperty = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.rv.data.TestPatternDefinition.Property.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TestPatternDefinition.Property} returns this
 */
proto.rv.data.TestPatternDefinition.Property.prototype.clearStringProperty = function() {
  return this.setStringProperty(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TestPatternDefinition.Property.prototype.hasStringProperty = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional FontProperty font_property = 8;
 * @return {?proto.rv.data.TestPatternDefinition.FontProperty}
 */
proto.rv.data.TestPatternDefinition.Property.prototype.getFontProperty = function() {
  return /** @type{?proto.rv.data.TestPatternDefinition.FontProperty} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TestPatternDefinition.FontProperty, 8));
};


/**
 * @param {?proto.rv.data.TestPatternDefinition.FontProperty|undefined} value
 * @return {!proto.rv.data.TestPatternDefinition.Property} returns this
*/
proto.rv.data.TestPatternDefinition.Property.prototype.setFontProperty = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.rv.data.TestPatternDefinition.Property.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TestPatternDefinition.Property} returns this
 */
proto.rv.data.TestPatternDefinition.Property.prototype.clearFontProperty = function() {
  return this.setFontProperty(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TestPatternDefinition.Property.prototype.hasFontProperty = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional SelectorProperty selector_property = 9;
 * @return {?proto.rv.data.TestPatternDefinition.SelectorProperty}
 */
proto.rv.data.TestPatternDefinition.Property.prototype.getSelectorProperty = function() {
  return /** @type{?proto.rv.data.TestPatternDefinition.SelectorProperty} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TestPatternDefinition.SelectorProperty, 9));
};


/**
 * @param {?proto.rv.data.TestPatternDefinition.SelectorProperty|undefined} value
 * @return {!proto.rv.data.TestPatternDefinition.Property} returns this
*/
proto.rv.data.TestPatternDefinition.Property.prototype.setSelectorProperty = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.rv.data.TestPatternDefinition.Property.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TestPatternDefinition.Property} returns this
 */
proto.rv.data.TestPatternDefinition.Property.prototype.clearSelectorProperty = function() {
  return this.setSelectorProperty(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TestPatternDefinition.Property.prototype.hasSelectorProperty = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional UUID uuid = 1;
 * @return {?proto.rv.data.UUID}
 */
proto.rv.data.TestPatternDefinition.prototype.getUuid = function() {
  return /** @type{?proto.rv.data.UUID} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.UUID, 1));
};


/**
 * @param {?proto.rv.data.UUID|undefined} value
 * @return {!proto.rv.data.TestPatternDefinition} returns this
*/
proto.rv.data.TestPatternDefinition.prototype.setUuid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TestPatternDefinition} returns this
 */
proto.rv.data.TestPatternDefinition.prototype.clearUuid = function() {
  return this.setUuid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TestPatternDefinition.prototype.hasUuid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name_localization_key = 2;
 * @return {string}
 */
proto.rv.data.TestPatternDefinition.prototype.getNameLocalizationKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.TestPatternDefinition} returns this
 */
proto.rv.data.TestPatternDefinition.prototype.setNameLocalizationKey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Property properties = 3;
 * @return {!Array<!proto.rv.data.TestPatternDefinition.Property>}
 */
proto.rv.data.TestPatternDefinition.prototype.getPropertiesList = function() {
  return /** @type{!Array<!proto.rv.data.TestPatternDefinition.Property>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rv.data.TestPatternDefinition.Property, 3));
};


/**
 * @param {!Array<!proto.rv.data.TestPatternDefinition.Property>} value
 * @return {!proto.rv.data.TestPatternDefinition} returns this
*/
proto.rv.data.TestPatternDefinition.prototype.setPropertiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.rv.data.TestPatternDefinition.Property=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rv.data.TestPatternDefinition.Property}
 */
proto.rv.data.TestPatternDefinition.prototype.addProperties = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.rv.data.TestPatternDefinition.Property, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.TestPatternDefinition} returns this
 */
proto.rv.data.TestPatternDefinition.prototype.clearPropertiesList = function() {
  return this.setPropertiesList([]);
};


/**
 * optional bool show_delay_settings = 4;
 * @return {boolean}
 */
proto.rv.data.TestPatternDefinition.prototype.getShowDelaySettings = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.TestPatternDefinition} returns this
 */
proto.rv.data.TestPatternDefinition.prototype.setShowDelaySettings = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool is_default = 5;
 * @return {boolean}
 */
proto.rv.data.TestPatternDefinition.prototype.getIsDefault = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.TestPatternDefinition} returns this
 */
proto.rv.data.TestPatternDefinition.prototype.setIsDefault = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


