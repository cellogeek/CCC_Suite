// source: proApiV1Timer.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.rv.data.API_v1_Timer');
goog.provide('proto.rv.data.API_v1_Timer.API_v1_TimePeriod');
goog.provide('proto.rv.data.API_v1_Timer.API_v1_Timer_Countdown');
goog.provide('proto.rv.data.API_v1_Timer.API_v1_Timer_CountdownToTime');
goog.provide('proto.rv.data.API_v1_Timer.API_v1_Timer_Elapsed');
goog.provide('proto.rv.data.API_v1_Timer.TimerconfigurationCase');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.rv.data.API_v1_Identifier');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.API_v1_Timer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rv.data.API_v1_Timer.oneofGroups_);
};
goog.inherits(proto.rv.data.API_v1_Timer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.API_v1_Timer.displayName = 'proto.rv.data.API_v1_Timer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.API_v1_Timer.API_v1_Timer_Countdown = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.API_v1_Timer.API_v1_Timer_Countdown, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.API_v1_Timer.API_v1_Timer_Countdown.displayName = 'proto.rv.data.API_v1_Timer.API_v1_Timer_Countdown';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.API_v1_Timer.API_v1_Timer_CountdownToTime = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.API_v1_Timer.API_v1_Timer_CountdownToTime, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.API_v1_Timer.API_v1_Timer_CountdownToTime.displayName = 'proto.rv.data.API_v1_Timer.API_v1_Timer_CountdownToTime';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.API_v1_Timer.API_v1_Timer_Elapsed = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.API_v1_Timer.API_v1_Timer_Elapsed, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.API_v1_Timer.API_v1_Timer_Elapsed.displayName = 'proto.rv.data.API_v1_Timer.API_v1_Timer_Elapsed';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rv.data.API_v1_Timer.oneofGroups_ = [[3,4,5]];

/**
 * @enum {number}
 */
proto.rv.data.API_v1_Timer.TimerconfigurationCase = {
  TIMERCONFIGURATION_NOT_SET: 0,
  COUNTDOWN: 3,
  COUNT_DOWN_TO_TIME: 4,
  ELAPSED: 5
};

/**
 * @return {proto.rv.data.API_v1_Timer.TimerconfigurationCase}
 */
proto.rv.data.API_v1_Timer.prototype.getTimerconfigurationCase = function() {
  return /** @type {proto.rv.data.API_v1_Timer.TimerconfigurationCase} */(jspb.Message.computeOneofCase(this, proto.rv.data.API_v1_Timer.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.API_v1_Timer.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.API_v1_Timer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.API_v1_Timer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.API_v1_Timer.toObject = function(includeInstance, msg) {
  var f, obj = {
id: (f = msg.getId()) && proto.rv.data.API_v1_Identifier.toObject(includeInstance, f),
allowsOverrun: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
countdown: (f = msg.getCountdown()) && proto.rv.data.API_v1_Timer.API_v1_Timer_Countdown.toObject(includeInstance, f),
countDownToTime: (f = msg.getCountDownToTime()) && proto.rv.data.API_v1_Timer.API_v1_Timer_CountdownToTime.toObject(includeInstance, f),
elapsed: (f = msg.getElapsed()) && proto.rv.data.API_v1_Timer.API_v1_Timer_Elapsed.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.API_v1_Timer}
 */
proto.rv.data.API_v1_Timer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.API_v1_Timer;
  return proto.rv.data.API_v1_Timer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.API_v1_Timer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.API_v1_Timer}
 */
proto.rv.data.API_v1_Timer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.API_v1_Identifier;
      reader.readMessage(value,proto.rv.data.API_v1_Identifier.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowsOverrun(value);
      break;
    case 3:
      var value = new proto.rv.data.API_v1_Timer.API_v1_Timer_Countdown;
      reader.readMessage(value,proto.rv.data.API_v1_Timer.API_v1_Timer_Countdown.deserializeBinaryFromReader);
      msg.setCountdown(value);
      break;
    case 4:
      var value = new proto.rv.data.API_v1_Timer.API_v1_Timer_CountdownToTime;
      reader.readMessage(value,proto.rv.data.API_v1_Timer.API_v1_Timer_CountdownToTime.deserializeBinaryFromReader);
      msg.setCountDownToTime(value);
      break;
    case 5:
      var value = new proto.rv.data.API_v1_Timer.API_v1_Timer_Elapsed;
      reader.readMessage(value,proto.rv.data.API_v1_Timer.API_v1_Timer_Elapsed.deserializeBinaryFromReader);
      msg.setElapsed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.API_v1_Timer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.API_v1_Timer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.API_v1_Timer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.API_v1_Timer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.API_v1_Identifier.serializeBinaryToWriter
    );
  }
  f = message.getAllowsOverrun();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getCountdown();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rv.data.API_v1_Timer.API_v1_Timer_Countdown.serializeBinaryToWriter
    );
  }
  f = message.getCountDownToTime();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rv.data.API_v1_Timer.API_v1_Timer_CountdownToTime.serializeBinaryToWriter
    );
  }
  f = message.getElapsed();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.rv.data.API_v1_Timer.API_v1_Timer_Elapsed.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.rv.data.API_v1_Timer.API_v1_TimePeriod = {
  AM: 0,
  PM: 1,
  IS_24_HOUR: 2
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.API_v1_Timer.API_v1_Timer_Countdown.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.API_v1_Timer.API_v1_Timer_Countdown.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.API_v1_Timer.API_v1_Timer_Countdown} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.API_v1_Timer.API_v1_Timer_Countdown.toObject = function(includeInstance, msg) {
  var f, obj = {
duration: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.API_v1_Timer.API_v1_Timer_Countdown}
 */
proto.rv.data.API_v1_Timer.API_v1_Timer_Countdown.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.API_v1_Timer.API_v1_Timer_Countdown;
  return proto.rv.data.API_v1_Timer.API_v1_Timer_Countdown.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.API_v1_Timer.API_v1_Timer_Countdown} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.API_v1_Timer.API_v1_Timer_Countdown}
 */
proto.rv.data.API_v1_Timer.API_v1_Timer_Countdown.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDuration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.API_v1_Timer.API_v1_Timer_Countdown.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.API_v1_Timer.API_v1_Timer_Countdown.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.API_v1_Timer.API_v1_Timer_Countdown} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.API_v1_Timer.API_v1_Timer_Countdown.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDuration();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 duration = 1;
 * @return {number}
 */
proto.rv.data.API_v1_Timer.API_v1_Timer_Countdown.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.API_v1_Timer.API_v1_Timer_Countdown} returns this
 */
proto.rv.data.API_v1_Timer.API_v1_Timer_Countdown.prototype.setDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.API_v1_Timer.API_v1_Timer_CountdownToTime.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.API_v1_Timer.API_v1_Timer_CountdownToTime.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.API_v1_Timer.API_v1_Timer_CountdownToTime} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.API_v1_Timer.API_v1_Timer_CountdownToTime.toObject = function(includeInstance, msg) {
  var f, obj = {
timeOfDay: jspb.Message.getFieldWithDefault(msg, 1, 0),
period: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.API_v1_Timer.API_v1_Timer_CountdownToTime}
 */
proto.rv.data.API_v1_Timer.API_v1_Timer_CountdownToTime.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.API_v1_Timer.API_v1_Timer_CountdownToTime;
  return proto.rv.data.API_v1_Timer.API_v1_Timer_CountdownToTime.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.API_v1_Timer.API_v1_Timer_CountdownToTime} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.API_v1_Timer.API_v1_Timer_CountdownToTime}
 */
proto.rv.data.API_v1_Timer.API_v1_Timer_CountdownToTime.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTimeOfDay(value);
      break;
    case 2:
      var value = /** @type {!proto.rv.data.API_v1_Timer.API_v1_TimePeriod} */ (reader.readEnum());
      msg.setPeriod(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.API_v1_Timer.API_v1_Timer_CountdownToTime.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.API_v1_Timer.API_v1_Timer_CountdownToTime.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.API_v1_Timer.API_v1_Timer_CountdownToTime} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.API_v1_Timer.API_v1_Timer_CountdownToTime.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimeOfDay();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPeriod();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional int32 time_of_day = 1;
 * @return {number}
 */
proto.rv.data.API_v1_Timer.API_v1_Timer_CountdownToTime.prototype.getTimeOfDay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.API_v1_Timer.API_v1_Timer_CountdownToTime} returns this
 */
proto.rv.data.API_v1_Timer.API_v1_Timer_CountdownToTime.prototype.setTimeOfDay = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional API_v1_TimePeriod period = 2;
 * @return {!proto.rv.data.API_v1_Timer.API_v1_TimePeriod}
 */
proto.rv.data.API_v1_Timer.API_v1_Timer_CountdownToTime.prototype.getPeriod = function() {
  return /** @type {!proto.rv.data.API_v1_Timer.API_v1_TimePeriod} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.rv.data.API_v1_Timer.API_v1_TimePeriod} value
 * @return {!proto.rv.data.API_v1_Timer.API_v1_Timer_CountdownToTime} returns this
 */
proto.rv.data.API_v1_Timer.API_v1_Timer_CountdownToTime.prototype.setPeriod = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.API_v1_Timer.API_v1_Timer_Elapsed.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.API_v1_Timer.API_v1_Timer_Elapsed.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.API_v1_Timer.API_v1_Timer_Elapsed} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.API_v1_Timer.API_v1_Timer_Elapsed.toObject = function(includeInstance, msg) {
  var f, obj = {
startTime: jspb.Message.getFieldWithDefault(msg, 1, 0),
endTime: jspb.Message.getFieldWithDefault(msg, 2, 0),
hasEndTime: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.API_v1_Timer.API_v1_Timer_Elapsed}
 */
proto.rv.data.API_v1_Timer.API_v1_Timer_Elapsed.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.API_v1_Timer.API_v1_Timer_Elapsed;
  return proto.rv.data.API_v1_Timer.API_v1_Timer_Elapsed.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.API_v1_Timer.API_v1_Timer_Elapsed} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.API_v1_Timer.API_v1_Timer_Elapsed}
 */
proto.rv.data.API_v1_Timer.API_v1_Timer_Elapsed.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStartTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEndTime(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasEndTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.API_v1_Timer.API_v1_Timer_Elapsed.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.API_v1_Timer.API_v1_Timer_Elapsed.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.API_v1_Timer.API_v1_Timer_Elapsed} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.API_v1_Timer.API_v1_Timer_Elapsed.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartTime();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getEndTime();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getHasEndTime();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional int32 start_time = 1;
 * @return {number}
 */
proto.rv.data.API_v1_Timer.API_v1_Timer_Elapsed.prototype.getStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.API_v1_Timer.API_v1_Timer_Elapsed} returns this
 */
proto.rv.data.API_v1_Timer.API_v1_Timer_Elapsed.prototype.setStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 end_time = 2;
 * @return {number}
 */
proto.rv.data.API_v1_Timer.API_v1_Timer_Elapsed.prototype.getEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.API_v1_Timer.API_v1_Timer_Elapsed} returns this
 */
proto.rv.data.API_v1_Timer.API_v1_Timer_Elapsed.prototype.setEndTime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool has_end_time = 3;
 * @return {boolean}
 */
proto.rv.data.API_v1_Timer.API_v1_Timer_Elapsed.prototype.getHasEndTime = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.API_v1_Timer.API_v1_Timer_Elapsed} returns this
 */
proto.rv.data.API_v1_Timer.API_v1_Timer_Elapsed.prototype.setHasEndTime = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional API_v1_Identifier id = 1;
 * @return {?proto.rv.data.API_v1_Identifier}
 */
proto.rv.data.API_v1_Timer.prototype.getId = function() {
  return /** @type{?proto.rv.data.API_v1_Identifier} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.API_v1_Identifier, 1));
};


/**
 * @param {?proto.rv.data.API_v1_Identifier|undefined} value
 * @return {!proto.rv.data.API_v1_Timer} returns this
*/
proto.rv.data.API_v1_Timer.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.API_v1_Timer} returns this
 */
proto.rv.data.API_v1_Timer.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.API_v1_Timer.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool allows_overrun = 2;
 * @return {boolean}
 */
proto.rv.data.API_v1_Timer.prototype.getAllowsOverrun = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.API_v1_Timer} returns this
 */
proto.rv.data.API_v1_Timer.prototype.setAllowsOverrun = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional API_v1_Timer_Countdown countdown = 3;
 * @return {?proto.rv.data.API_v1_Timer.API_v1_Timer_Countdown}
 */
proto.rv.data.API_v1_Timer.prototype.getCountdown = function() {
  return /** @type{?proto.rv.data.API_v1_Timer.API_v1_Timer_Countdown} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.API_v1_Timer.API_v1_Timer_Countdown, 3));
};


/**
 * @param {?proto.rv.data.API_v1_Timer.API_v1_Timer_Countdown|undefined} value
 * @return {!proto.rv.data.API_v1_Timer} returns this
*/
proto.rv.data.API_v1_Timer.prototype.setCountdown = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.rv.data.API_v1_Timer.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.API_v1_Timer} returns this
 */
proto.rv.data.API_v1_Timer.prototype.clearCountdown = function() {
  return this.setCountdown(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.API_v1_Timer.prototype.hasCountdown = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional API_v1_Timer_CountdownToTime count_down_to_time = 4;
 * @return {?proto.rv.data.API_v1_Timer.API_v1_Timer_CountdownToTime}
 */
proto.rv.data.API_v1_Timer.prototype.getCountDownToTime = function() {
  return /** @type{?proto.rv.data.API_v1_Timer.API_v1_Timer_CountdownToTime} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.API_v1_Timer.API_v1_Timer_CountdownToTime, 4));
};


/**
 * @param {?proto.rv.data.API_v1_Timer.API_v1_Timer_CountdownToTime|undefined} value
 * @return {!proto.rv.data.API_v1_Timer} returns this
*/
proto.rv.data.API_v1_Timer.prototype.setCountDownToTime = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.rv.data.API_v1_Timer.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.API_v1_Timer} returns this
 */
proto.rv.data.API_v1_Timer.prototype.clearCountDownToTime = function() {
  return this.setCountDownToTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.API_v1_Timer.prototype.hasCountDownToTime = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional API_v1_Timer_Elapsed elapsed = 5;
 * @return {?proto.rv.data.API_v1_Timer.API_v1_Timer_Elapsed}
 */
proto.rv.data.API_v1_Timer.prototype.getElapsed = function() {
  return /** @type{?proto.rv.data.API_v1_Timer.API_v1_Timer_Elapsed} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.API_v1_Timer.API_v1_Timer_Elapsed, 5));
};


/**
 * @param {?proto.rv.data.API_v1_Timer.API_v1_Timer_Elapsed|undefined} value
 * @return {!proto.rv.data.API_v1_Timer} returns this
*/
proto.rv.data.API_v1_Timer.prototype.setElapsed = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.rv.data.API_v1_Timer.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.API_v1_Timer} returns this
 */
proto.rv.data.API_v1_Timer.prototype.clearElapsed = function() {
  return this.setElapsed(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.API_v1_Timer.prototype.hasElapsed = function() {
  return jspb.Message.getField(this, 5) != null;
};


