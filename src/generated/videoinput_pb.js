// source: input.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.rv.data.VideoInput');
goog.provide('proto.rv.data.VideoInput.AltaudiosourceCase');
goog.provide('proto.rv.data.VideoInput.AudioDeviceType');
goog.provide('proto.rv.data.VideoInput.SettingsDocument');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.rv.data.Color');
goog.require('proto.rv.data.DigitalAudio.Device');
goog.require('proto.rv.data.Media.VideoDevice');
goog.require('proto.rv.data.URL');
goog.require('proto.rv.data.UUID');

goog.forwardDeclare('proto.rv.data.AlphaType');
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.VideoInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rv.data.VideoInput.oneofGroups_);
};
goog.inherits(proto.rv.data.VideoInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.VideoInput.displayName = 'proto.rv.data.VideoInput';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.VideoInput.SettingsDocument = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rv.data.VideoInput.SettingsDocument.repeatedFields_, null);
};
goog.inherits(proto.rv.data.VideoInput.SettingsDocument, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.VideoInput.SettingsDocument.displayName = 'proto.rv.data.VideoInput.SettingsDocument';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rv.data.VideoInput.oneofGroups_ = [[6,7]];

/**
 * @enum {number}
 */
proto.rv.data.VideoInput.AltaudiosourceCase = {
  ALTAUDIOSOURCE_NOT_SET: 0,
  AUDIO_DEVICE: 6,
  VIDEO_DEVICE: 7
};

/**
 * @return {proto.rv.data.VideoInput.AltaudiosourceCase}
 */
proto.rv.data.VideoInput.prototype.getAltaudiosourceCase = function() {
  return /** @type {proto.rv.data.VideoInput.AltaudiosourceCase} */(jspb.Message.computeOneofCase(this, proto.rv.data.VideoInput.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.VideoInput.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.VideoInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.VideoInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.VideoInput.toObject = function(includeInstance, msg) {
  var f, obj = {
uuid: (f = msg.getUuid()) && proto.rv.data.UUID.toObject(includeInstance, f),
userDescription: jspb.Message.getFieldWithDefault(msg, 2, ""),
videoInputDevice: (f = msg.getVideoInputDevice()) && proto.rv.data.Media.VideoDevice.toObject(includeInstance, f),
displayColor: (f = msg.getDisplayColor()) && proto.rv.data.Color.toObject(includeInstance, f),
thumbnailPath: (f = msg.getThumbnailPath()) && proto.rv.data.URL.toObject(includeInstance, f),
audioType: jspb.Message.getFieldWithDefault(msg, 8, 0),
alphaType: jspb.Message.getFieldWithDefault(msg, 9, 0),
audioDevice: (f = msg.getAudioDevice()) && proto.rv.data.DigitalAudio.Device.toObject(includeInstance, f),
videoDevice: (f = msg.getVideoDevice()) && proto.rv.data.Media.VideoDevice.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.VideoInput}
 */
proto.rv.data.VideoInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.VideoInput;
  return proto.rv.data.VideoInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.VideoInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.VideoInput}
 */
proto.rv.data.VideoInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.UUID;
      reader.readMessage(value,proto.rv.data.UUID.deserializeBinaryFromReader);
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserDescription(value);
      break;
    case 3:
      var value = new proto.rv.data.Media.VideoDevice;
      reader.readMessage(value,proto.rv.data.Media.VideoDevice.deserializeBinaryFromReader);
      msg.setVideoInputDevice(value);
      break;
    case 4:
      var value = new proto.rv.data.Color;
      reader.readMessage(value,proto.rv.data.Color.deserializeBinaryFromReader);
      msg.setDisplayColor(value);
      break;
    case 5:
      var value = new proto.rv.data.URL;
      reader.readMessage(value,proto.rv.data.URL.deserializeBinaryFromReader);
      msg.setThumbnailPath(value);
      break;
    case 8:
      var value = /** @type {!proto.rv.data.VideoInput.AudioDeviceType} */ (reader.readEnum());
      msg.setAudioType(value);
      break;
    case 9:
      var value = /** @type {!proto.rv.data.AlphaType} */ (reader.readEnum());
      msg.setAlphaType(value);
      break;
    case 6:
      var value = new proto.rv.data.DigitalAudio.Device;
      reader.readMessage(value,proto.rv.data.DigitalAudio.Device.deserializeBinaryFromReader);
      msg.setAudioDevice(value);
      break;
    case 7:
      var value = new proto.rv.data.Media.VideoDevice;
      reader.readMessage(value,proto.rv.data.Media.VideoDevice.deserializeBinaryFromReader);
      msg.setVideoDevice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.VideoInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.VideoInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.VideoInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.VideoInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.UUID.serializeBinaryToWriter
    );
  }
  f = message.getUserDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVideoInputDevice();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rv.data.Media.VideoDevice.serializeBinaryToWriter
    );
  }
  f = message.getDisplayColor();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rv.data.Color.serializeBinaryToWriter
    );
  }
  f = message.getThumbnailPath();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.rv.data.URL.serializeBinaryToWriter
    );
  }
  f = message.getAudioType();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getAlphaType();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getAudioDevice();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.rv.data.DigitalAudio.Device.serializeBinaryToWriter
    );
  }
  f = message.getVideoDevice();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.rv.data.Media.VideoDevice.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.rv.data.VideoInput.AudioDeviceType = {
  AUDIO_DEVICE_TYPE_DEFAULT: 0,
  AUDIO_DEVICE_TYPE_NONE: 1,
  AUDIO_DEVICE_TYPE_ALTERNATE: 2
};


/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rv.data.VideoInput.SettingsDocument.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.VideoInput.SettingsDocument.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.VideoInput.SettingsDocument.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.VideoInput.SettingsDocument} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.VideoInput.SettingsDocument.toObject = function(includeInstance, msg) {
  var f, obj = {
inputsList: jspb.Message.toObjectList(msg.getInputsList(),
    proto.rv.data.VideoInput.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.VideoInput.SettingsDocument}
 */
proto.rv.data.VideoInput.SettingsDocument.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.VideoInput.SettingsDocument;
  return proto.rv.data.VideoInput.SettingsDocument.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.VideoInput.SettingsDocument} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.VideoInput.SettingsDocument}
 */
proto.rv.data.VideoInput.SettingsDocument.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.VideoInput;
      reader.readMessage(value,proto.rv.data.VideoInput.deserializeBinaryFromReader);
      msg.addInputs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.VideoInput.SettingsDocument.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.VideoInput.SettingsDocument.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.VideoInput.SettingsDocument} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.VideoInput.SettingsDocument.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rv.data.VideoInput.serializeBinaryToWriter
    );
  }
};


/**
 * repeated VideoInput inputs = 1;
 * @return {!Array<!proto.rv.data.VideoInput>}
 */
proto.rv.data.VideoInput.SettingsDocument.prototype.getInputsList = function() {
  return /** @type{!Array<!proto.rv.data.VideoInput>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rv.data.VideoInput, 1));
};


/**
 * @param {!Array<!proto.rv.data.VideoInput>} value
 * @return {!proto.rv.data.VideoInput.SettingsDocument} returns this
*/
proto.rv.data.VideoInput.SettingsDocument.prototype.setInputsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.rv.data.VideoInput=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rv.data.VideoInput}
 */
proto.rv.data.VideoInput.SettingsDocument.prototype.addInputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rv.data.VideoInput, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.VideoInput.SettingsDocument} returns this
 */
proto.rv.data.VideoInput.SettingsDocument.prototype.clearInputsList = function() {
  return this.setInputsList([]);
};


/**
 * optional UUID uuid = 1;
 * @return {?proto.rv.data.UUID}
 */
proto.rv.data.VideoInput.prototype.getUuid = function() {
  return /** @type{?proto.rv.data.UUID} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.UUID, 1));
};


/**
 * @param {?proto.rv.data.UUID|undefined} value
 * @return {!proto.rv.data.VideoInput} returns this
*/
proto.rv.data.VideoInput.prototype.setUuid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.VideoInput} returns this
 */
proto.rv.data.VideoInput.prototype.clearUuid = function() {
  return this.setUuid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.VideoInput.prototype.hasUuid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string user_description = 2;
 * @return {string}
 */
proto.rv.data.VideoInput.prototype.getUserDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.VideoInput} returns this
 */
proto.rv.data.VideoInput.prototype.setUserDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Media.VideoDevice video_input_device = 3;
 * @return {?proto.rv.data.Media.VideoDevice}
 */
proto.rv.data.VideoInput.prototype.getVideoInputDevice = function() {
  return /** @type{?proto.rv.data.Media.VideoDevice} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Media.VideoDevice, 3));
};


/**
 * @param {?proto.rv.data.Media.VideoDevice|undefined} value
 * @return {!proto.rv.data.VideoInput} returns this
*/
proto.rv.data.VideoInput.prototype.setVideoInputDevice = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.VideoInput} returns this
 */
proto.rv.data.VideoInput.prototype.clearVideoInputDevice = function() {
  return this.setVideoInputDevice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.VideoInput.prototype.hasVideoInputDevice = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Color display_color = 4;
 * @return {?proto.rv.data.Color}
 */
proto.rv.data.VideoInput.prototype.getDisplayColor = function() {
  return /** @type{?proto.rv.data.Color} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Color, 4));
};


/**
 * @param {?proto.rv.data.Color|undefined} value
 * @return {!proto.rv.data.VideoInput} returns this
*/
proto.rv.data.VideoInput.prototype.setDisplayColor = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.VideoInput} returns this
 */
proto.rv.data.VideoInput.prototype.clearDisplayColor = function() {
  return this.setDisplayColor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.VideoInput.prototype.hasDisplayColor = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional URL thumbnail_path = 5;
 * @return {?proto.rv.data.URL}
 */
proto.rv.data.VideoInput.prototype.getThumbnailPath = function() {
  return /** @type{?proto.rv.data.URL} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.URL, 5));
};


/**
 * @param {?proto.rv.data.URL|undefined} value
 * @return {!proto.rv.data.VideoInput} returns this
*/
proto.rv.data.VideoInput.prototype.setThumbnailPath = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.VideoInput} returns this
 */
proto.rv.data.VideoInput.prototype.clearThumbnailPath = function() {
  return this.setThumbnailPath(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.VideoInput.prototype.hasThumbnailPath = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional AudioDeviceType audio_type = 8;
 * @return {!proto.rv.data.VideoInput.AudioDeviceType}
 */
proto.rv.data.VideoInput.prototype.getAudioType = function() {
  return /** @type {!proto.rv.data.VideoInput.AudioDeviceType} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.rv.data.VideoInput.AudioDeviceType} value
 * @return {!proto.rv.data.VideoInput} returns this
 */
proto.rv.data.VideoInput.prototype.setAudioType = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional AlphaType alpha_type = 9;
 * @return {!proto.rv.data.AlphaType}
 */
proto.rv.data.VideoInput.prototype.getAlphaType = function() {
  return /** @type {!proto.rv.data.AlphaType} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.rv.data.AlphaType} value
 * @return {!proto.rv.data.VideoInput} returns this
 */
proto.rv.data.VideoInput.prototype.setAlphaType = function(value) {
  return jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional DigitalAudio.Device audio_device = 6;
 * @return {?proto.rv.data.DigitalAudio.Device}
 */
proto.rv.data.VideoInput.prototype.getAudioDevice = function() {
  return /** @type{?proto.rv.data.DigitalAudio.Device} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.DigitalAudio.Device, 6));
};


/**
 * @param {?proto.rv.data.DigitalAudio.Device|undefined} value
 * @return {!proto.rv.data.VideoInput} returns this
*/
proto.rv.data.VideoInput.prototype.setAudioDevice = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.rv.data.VideoInput.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.VideoInput} returns this
 */
proto.rv.data.VideoInput.prototype.clearAudioDevice = function() {
  return this.setAudioDevice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.VideoInput.prototype.hasAudioDevice = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Media.VideoDevice video_device = 7;
 * @return {?proto.rv.data.Media.VideoDevice}
 */
proto.rv.data.VideoInput.prototype.getVideoDevice = function() {
  return /** @type{?proto.rv.data.Media.VideoDevice} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Media.VideoDevice, 7));
};


/**
 * @param {?proto.rv.data.Media.VideoDevice|undefined} value
 * @return {!proto.rv.data.VideoInput} returns this
*/
proto.rv.data.VideoInput.prototype.setVideoDevice = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.rv.data.VideoInput.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.VideoInput} returns this
 */
proto.rv.data.VideoInput.prototype.clearVideoDevice = function() {
  return this.setVideoDevice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.VideoInput.prototype.hasVideoDevice = function() {
  return jspb.Message.getField(this, 7) != null;
};


