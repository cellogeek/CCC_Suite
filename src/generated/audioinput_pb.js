// source: input.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.rv.data.AudioInput');
goog.provide('proto.rv.data.AudioInput.BehaviorMode');
goog.provide('proto.rv.data.AudioInput.BehaviorMode.AutoOff');
goog.provide('proto.rv.data.AudioInput.BehaviorMode.AutoOn');
goog.provide('proto.rv.data.AudioInput.BehaviorMode.ModeCase');
goog.provide('proto.rv.data.AudioInput.BehaviorMode.Off');
goog.provide('proto.rv.data.AudioInput.BehaviorMode.On');
goog.provide('proto.rv.data.AudioInput.SourceCase');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.rv.data.DigitalAudio.Device');
goog.require('proto.rv.data.Media.VideoDevice');
goog.require('proto.rv.data.UUID');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.AudioInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rv.data.AudioInput.oneofGroups_);
};
goog.inherits(proto.rv.data.AudioInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.AudioInput.displayName = 'proto.rv.data.AudioInput';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.AudioInput.BehaviorMode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rv.data.AudioInput.BehaviorMode.oneofGroups_);
};
goog.inherits(proto.rv.data.AudioInput.BehaviorMode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.AudioInput.BehaviorMode.displayName = 'proto.rv.data.AudioInput.BehaviorMode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.AudioInput.BehaviorMode.On = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.AudioInput.BehaviorMode.On, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.AudioInput.BehaviorMode.On.displayName = 'proto.rv.data.AudioInput.BehaviorMode.On';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.AudioInput.BehaviorMode.Off = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.AudioInput.BehaviorMode.Off, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.AudioInput.BehaviorMode.Off.displayName = 'proto.rv.data.AudioInput.BehaviorMode.Off';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.AudioInput.BehaviorMode.AutoOff = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.AudioInput.BehaviorMode.AutoOff, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.AudioInput.BehaviorMode.AutoOff.displayName = 'proto.rv.data.AudioInput.BehaviorMode.AutoOff';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.AudioInput.BehaviorMode.AutoOn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rv.data.AudioInput.BehaviorMode.AutoOn.repeatedFields_, null);
};
goog.inherits(proto.rv.data.AudioInput.BehaviorMode.AutoOn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.AudioInput.BehaviorMode.AutoOn.displayName = 'proto.rv.data.AudioInput.BehaviorMode.AutoOn';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rv.data.AudioInput.oneofGroups_ = [[3,4]];

/**
 * @enum {number}
 */
proto.rv.data.AudioInput.SourceCase = {
  SOURCE_NOT_SET: 0,
  AUDIO_DEVICE: 3,
  VIDEO_DEVICE: 4
};

/**
 * @return {proto.rv.data.AudioInput.SourceCase}
 */
proto.rv.data.AudioInput.prototype.getSourceCase = function() {
  return /** @type {proto.rv.data.AudioInput.SourceCase} */(jspb.Message.computeOneofCase(this, proto.rv.data.AudioInput.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.AudioInput.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.AudioInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.AudioInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.AudioInput.toObject = function(includeInstance, msg) {
  var f, obj = {
uuid: (f = msg.getUuid()) && proto.rv.data.UUID.toObject(includeInstance, f),
userDescription: jspb.Message.getFieldWithDefault(msg, 2, ""),
behaviorMode: (f = msg.getBehaviorMode()) && proto.rv.data.AudioInput.BehaviorMode.toObject(includeInstance, f),
audioDevice: (f = msg.getAudioDevice()) && proto.rv.data.DigitalAudio.Device.toObject(includeInstance, f),
videoDevice: (f = msg.getVideoDevice()) && proto.rv.data.Media.VideoDevice.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.AudioInput}
 */
proto.rv.data.AudioInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.AudioInput;
  return proto.rv.data.AudioInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.AudioInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.AudioInput}
 */
proto.rv.data.AudioInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.UUID;
      reader.readMessage(value,proto.rv.data.UUID.deserializeBinaryFromReader);
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserDescription(value);
      break;
    case 5:
      var value = new proto.rv.data.AudioInput.BehaviorMode;
      reader.readMessage(value,proto.rv.data.AudioInput.BehaviorMode.deserializeBinaryFromReader);
      msg.setBehaviorMode(value);
      break;
    case 3:
      var value = new proto.rv.data.DigitalAudio.Device;
      reader.readMessage(value,proto.rv.data.DigitalAudio.Device.deserializeBinaryFromReader);
      msg.setAudioDevice(value);
      break;
    case 4:
      var value = new proto.rv.data.Media.VideoDevice;
      reader.readMessage(value,proto.rv.data.Media.VideoDevice.deserializeBinaryFromReader);
      msg.setVideoDevice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.AudioInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.AudioInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.AudioInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.AudioInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.UUID.serializeBinaryToWriter
    );
  }
  f = message.getUserDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBehaviorMode();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.rv.data.AudioInput.BehaviorMode.serializeBinaryToWriter
    );
  }
  f = message.getAudioDevice();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rv.data.DigitalAudio.Device.serializeBinaryToWriter
    );
  }
  f = message.getVideoDevice();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rv.data.Media.VideoDevice.serializeBinaryToWriter
    );
  }
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rv.data.AudioInput.BehaviorMode.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.rv.data.AudioInput.BehaviorMode.ModeCase = {
  MODE_NOT_SET: 0,
  ON: 1,
  OFF: 2,
  AUTO_ON: 3,
  AUTO_OFF: 4
};

/**
 * @return {proto.rv.data.AudioInput.BehaviorMode.ModeCase}
 */
proto.rv.data.AudioInput.BehaviorMode.prototype.getModeCase = function() {
  return /** @type {proto.rv.data.AudioInput.BehaviorMode.ModeCase} */(jspb.Message.computeOneofCase(this, proto.rv.data.AudioInput.BehaviorMode.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.AudioInput.BehaviorMode.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.AudioInput.BehaviorMode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.AudioInput.BehaviorMode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.AudioInput.BehaviorMode.toObject = function(includeInstance, msg) {
  var f, obj = {
on: (f = msg.getOn()) && proto.rv.data.AudioInput.BehaviorMode.On.toObject(includeInstance, f),
off: (f = msg.getOff()) && proto.rv.data.AudioInput.BehaviorMode.Off.toObject(includeInstance, f),
autoOn: (f = msg.getAutoOn()) && proto.rv.data.AudioInput.BehaviorMode.AutoOn.toObject(includeInstance, f),
autoOff: (f = msg.getAutoOff()) && proto.rv.data.AudioInput.BehaviorMode.AutoOff.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.AudioInput.BehaviorMode}
 */
proto.rv.data.AudioInput.BehaviorMode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.AudioInput.BehaviorMode;
  return proto.rv.data.AudioInput.BehaviorMode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.AudioInput.BehaviorMode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.AudioInput.BehaviorMode}
 */
proto.rv.data.AudioInput.BehaviorMode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.AudioInput.BehaviorMode.On;
      reader.readMessage(value,proto.rv.data.AudioInput.BehaviorMode.On.deserializeBinaryFromReader);
      msg.setOn(value);
      break;
    case 2:
      var value = new proto.rv.data.AudioInput.BehaviorMode.Off;
      reader.readMessage(value,proto.rv.data.AudioInput.BehaviorMode.Off.deserializeBinaryFromReader);
      msg.setOff(value);
      break;
    case 3:
      var value = new proto.rv.data.AudioInput.BehaviorMode.AutoOn;
      reader.readMessage(value,proto.rv.data.AudioInput.BehaviorMode.AutoOn.deserializeBinaryFromReader);
      msg.setAutoOn(value);
      break;
    case 4:
      var value = new proto.rv.data.AudioInput.BehaviorMode.AutoOff;
      reader.readMessage(value,proto.rv.data.AudioInput.BehaviorMode.AutoOff.deserializeBinaryFromReader);
      msg.setAutoOff(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.AudioInput.BehaviorMode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.AudioInput.BehaviorMode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.AudioInput.BehaviorMode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.AudioInput.BehaviorMode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOn();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.AudioInput.BehaviorMode.On.serializeBinaryToWriter
    );
  }
  f = message.getOff();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rv.data.AudioInput.BehaviorMode.Off.serializeBinaryToWriter
    );
  }
  f = message.getAutoOn();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rv.data.AudioInput.BehaviorMode.AutoOn.serializeBinaryToWriter
    );
  }
  f = message.getAutoOff();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rv.data.AudioInput.BehaviorMode.AutoOff.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.AudioInput.BehaviorMode.On.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.AudioInput.BehaviorMode.On.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.AudioInput.BehaviorMode.On} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.AudioInput.BehaviorMode.On.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.AudioInput.BehaviorMode.On}
 */
proto.rv.data.AudioInput.BehaviorMode.On.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.AudioInput.BehaviorMode.On;
  return proto.rv.data.AudioInput.BehaviorMode.On.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.AudioInput.BehaviorMode.On} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.AudioInput.BehaviorMode.On}
 */
proto.rv.data.AudioInput.BehaviorMode.On.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.AudioInput.BehaviorMode.On.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.AudioInput.BehaviorMode.On.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.AudioInput.BehaviorMode.On} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.AudioInput.BehaviorMode.On.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.AudioInput.BehaviorMode.Off.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.AudioInput.BehaviorMode.Off.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.AudioInput.BehaviorMode.Off} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.AudioInput.BehaviorMode.Off.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.AudioInput.BehaviorMode.Off}
 */
proto.rv.data.AudioInput.BehaviorMode.Off.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.AudioInput.BehaviorMode.Off;
  return proto.rv.data.AudioInput.BehaviorMode.Off.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.AudioInput.BehaviorMode.Off} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.AudioInput.BehaviorMode.Off}
 */
proto.rv.data.AudioInput.BehaviorMode.Off.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.AudioInput.BehaviorMode.Off.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.AudioInput.BehaviorMode.Off.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.AudioInput.BehaviorMode.Off} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.AudioInput.BehaviorMode.Off.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.AudioInput.BehaviorMode.AutoOff.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.AudioInput.BehaviorMode.AutoOff.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.AudioInput.BehaviorMode.AutoOff} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.AudioInput.BehaviorMode.AutoOff.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.AudioInput.BehaviorMode.AutoOff}
 */
proto.rv.data.AudioInput.BehaviorMode.AutoOff.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.AudioInput.BehaviorMode.AutoOff;
  return proto.rv.data.AudioInput.BehaviorMode.AutoOff.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.AudioInput.BehaviorMode.AutoOff} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.AudioInput.BehaviorMode.AutoOff}
 */
proto.rv.data.AudioInput.BehaviorMode.AutoOff.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.AudioInput.BehaviorMode.AutoOff.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.AudioInput.BehaviorMode.AutoOff.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.AudioInput.BehaviorMode.AutoOff} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.AudioInput.BehaviorMode.AutoOff.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rv.data.AudioInput.BehaviorMode.AutoOn.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.AudioInput.BehaviorMode.AutoOn.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.AudioInput.BehaviorMode.AutoOn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.AudioInput.BehaviorMode.AutoOn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.AudioInput.BehaviorMode.AutoOn.toObject = function(includeInstance, msg) {
  var f, obj = {
linkedVideoInputsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.AudioInput.BehaviorMode.AutoOn}
 */
proto.rv.data.AudioInput.BehaviorMode.AutoOn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.AudioInput.BehaviorMode.AutoOn;
  return proto.rv.data.AudioInput.BehaviorMode.AutoOn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.AudioInput.BehaviorMode.AutoOn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.AudioInput.BehaviorMode.AutoOn}
 */
proto.rv.data.AudioInput.BehaviorMode.AutoOn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addLinkedVideoInputs(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.AudioInput.BehaviorMode.AutoOn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.AudioInput.BehaviorMode.AutoOn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.AudioInput.BehaviorMode.AutoOn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.AudioInput.BehaviorMode.AutoOn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLinkedVideoInputsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
};


/**
 * repeated uint32 linked_video_inputs = 1;
 * @return {!Array<number>}
 */
proto.rv.data.AudioInput.BehaviorMode.AutoOn.prototype.getLinkedVideoInputsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.rv.data.AudioInput.BehaviorMode.AutoOn} returns this
 */
proto.rv.data.AudioInput.BehaviorMode.AutoOn.prototype.setLinkedVideoInputsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.rv.data.AudioInput.BehaviorMode.AutoOn} returns this
 */
proto.rv.data.AudioInput.BehaviorMode.AutoOn.prototype.addLinkedVideoInputs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.AudioInput.BehaviorMode.AutoOn} returns this
 */
proto.rv.data.AudioInput.BehaviorMode.AutoOn.prototype.clearLinkedVideoInputsList = function() {
  return this.setLinkedVideoInputsList([]);
};


/**
 * optional On on = 1;
 * @return {?proto.rv.data.AudioInput.BehaviorMode.On}
 */
proto.rv.data.AudioInput.BehaviorMode.prototype.getOn = function() {
  return /** @type{?proto.rv.data.AudioInput.BehaviorMode.On} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.AudioInput.BehaviorMode.On, 1));
};


/**
 * @param {?proto.rv.data.AudioInput.BehaviorMode.On|undefined} value
 * @return {!proto.rv.data.AudioInput.BehaviorMode} returns this
*/
proto.rv.data.AudioInput.BehaviorMode.prototype.setOn = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.rv.data.AudioInput.BehaviorMode.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.AudioInput.BehaviorMode} returns this
 */
proto.rv.data.AudioInput.BehaviorMode.prototype.clearOn = function() {
  return this.setOn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.AudioInput.BehaviorMode.prototype.hasOn = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Off off = 2;
 * @return {?proto.rv.data.AudioInput.BehaviorMode.Off}
 */
proto.rv.data.AudioInput.BehaviorMode.prototype.getOff = function() {
  return /** @type{?proto.rv.data.AudioInput.BehaviorMode.Off} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.AudioInput.BehaviorMode.Off, 2));
};


/**
 * @param {?proto.rv.data.AudioInput.BehaviorMode.Off|undefined} value
 * @return {!proto.rv.data.AudioInput.BehaviorMode} returns this
*/
proto.rv.data.AudioInput.BehaviorMode.prototype.setOff = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.rv.data.AudioInput.BehaviorMode.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.AudioInput.BehaviorMode} returns this
 */
proto.rv.data.AudioInput.BehaviorMode.prototype.clearOff = function() {
  return this.setOff(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.AudioInput.BehaviorMode.prototype.hasOff = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AutoOn auto_on = 3;
 * @return {?proto.rv.data.AudioInput.BehaviorMode.AutoOn}
 */
proto.rv.data.AudioInput.BehaviorMode.prototype.getAutoOn = function() {
  return /** @type{?proto.rv.data.AudioInput.BehaviorMode.AutoOn} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.AudioInput.BehaviorMode.AutoOn, 3));
};


/**
 * @param {?proto.rv.data.AudioInput.BehaviorMode.AutoOn|undefined} value
 * @return {!proto.rv.data.AudioInput.BehaviorMode} returns this
*/
proto.rv.data.AudioInput.BehaviorMode.prototype.setAutoOn = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.rv.data.AudioInput.BehaviorMode.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.AudioInput.BehaviorMode} returns this
 */
proto.rv.data.AudioInput.BehaviorMode.prototype.clearAutoOn = function() {
  return this.setAutoOn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.AudioInput.BehaviorMode.prototype.hasAutoOn = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional AutoOff auto_off = 4;
 * @return {?proto.rv.data.AudioInput.BehaviorMode.AutoOff}
 */
proto.rv.data.AudioInput.BehaviorMode.prototype.getAutoOff = function() {
  return /** @type{?proto.rv.data.AudioInput.BehaviorMode.AutoOff} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.AudioInput.BehaviorMode.AutoOff, 4));
};


/**
 * @param {?proto.rv.data.AudioInput.BehaviorMode.AutoOff|undefined} value
 * @return {!proto.rv.data.AudioInput.BehaviorMode} returns this
*/
proto.rv.data.AudioInput.BehaviorMode.prototype.setAutoOff = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.rv.data.AudioInput.BehaviorMode.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.AudioInput.BehaviorMode} returns this
 */
proto.rv.data.AudioInput.BehaviorMode.prototype.clearAutoOff = function() {
  return this.setAutoOff(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.AudioInput.BehaviorMode.prototype.hasAutoOff = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional UUID uuid = 1;
 * @return {?proto.rv.data.UUID}
 */
proto.rv.data.AudioInput.prototype.getUuid = function() {
  return /** @type{?proto.rv.data.UUID} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.UUID, 1));
};


/**
 * @param {?proto.rv.data.UUID|undefined} value
 * @return {!proto.rv.data.AudioInput} returns this
*/
proto.rv.data.AudioInput.prototype.setUuid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.AudioInput} returns this
 */
proto.rv.data.AudioInput.prototype.clearUuid = function() {
  return this.setUuid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.AudioInput.prototype.hasUuid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string user_description = 2;
 * @return {string}
 */
proto.rv.data.AudioInput.prototype.getUserDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.AudioInput} returns this
 */
proto.rv.data.AudioInput.prototype.setUserDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional BehaviorMode behavior_mode = 5;
 * @return {?proto.rv.data.AudioInput.BehaviorMode}
 */
proto.rv.data.AudioInput.prototype.getBehaviorMode = function() {
  return /** @type{?proto.rv.data.AudioInput.BehaviorMode} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.AudioInput.BehaviorMode, 5));
};


/**
 * @param {?proto.rv.data.AudioInput.BehaviorMode|undefined} value
 * @return {!proto.rv.data.AudioInput} returns this
*/
proto.rv.data.AudioInput.prototype.setBehaviorMode = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.AudioInput} returns this
 */
proto.rv.data.AudioInput.prototype.clearBehaviorMode = function() {
  return this.setBehaviorMode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.AudioInput.prototype.hasBehaviorMode = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional DigitalAudio.Device audio_device = 3;
 * @return {?proto.rv.data.DigitalAudio.Device}
 */
proto.rv.data.AudioInput.prototype.getAudioDevice = function() {
  return /** @type{?proto.rv.data.DigitalAudio.Device} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.DigitalAudio.Device, 3));
};


/**
 * @param {?proto.rv.data.DigitalAudio.Device|undefined} value
 * @return {!proto.rv.data.AudioInput} returns this
*/
proto.rv.data.AudioInput.prototype.setAudioDevice = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.rv.data.AudioInput.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.AudioInput} returns this
 */
proto.rv.data.AudioInput.prototype.clearAudioDevice = function() {
  return this.setAudioDevice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.AudioInput.prototype.hasAudioDevice = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Media.VideoDevice video_device = 4;
 * @return {?proto.rv.data.Media.VideoDevice}
 */
proto.rv.data.AudioInput.prototype.getVideoDevice = function() {
  return /** @type{?proto.rv.data.Media.VideoDevice} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Media.VideoDevice, 4));
};


/**
 * @param {?proto.rv.data.Media.VideoDevice|undefined} value
 * @return {!proto.rv.data.AudioInput} returns this
*/
proto.rv.data.AudioInput.prototype.setVideoDevice = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.rv.data.AudioInput.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.AudioInput} returns this
 */
proto.rv.data.AudioInput.prototype.clearVideoDevice = function() {
  return this.setVideoDevice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.AudioInput.prototype.hasVideoDevice = function() {
  return jspb.Message.getField(this, 4) != null;
};


