// source: proCoreTestPatterns.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.rv.data.TestPatternResponse');
goog.provide('proto.rv.data.TestPatternResponse.GetDefinitions');
goog.provide('proto.rv.data.TestPatternResponse.GetThumbnail');
goog.provide('proto.rv.data.TestPatternResponse.ResponseCase');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.rv.data.TestPatternDefinition');
goog.require('proto.rv.data.TestPatternState');
goog.require('proto.rv.data.UUID');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TestPatternResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rv.data.TestPatternResponse.oneofGroups_);
};
goog.inherits(proto.rv.data.TestPatternResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TestPatternResponse.displayName = 'proto.rv.data.TestPatternResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TestPatternResponse.GetDefinitions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rv.data.TestPatternResponse.GetDefinitions.repeatedFields_, null);
};
goog.inherits(proto.rv.data.TestPatternResponse.GetDefinitions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TestPatternResponse.GetDefinitions.displayName = 'proto.rv.data.TestPatternResponse.GetDefinitions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TestPatternResponse.GetThumbnail = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.TestPatternResponse.GetThumbnail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TestPatternResponse.GetThumbnail.displayName = 'proto.rv.data.TestPatternResponse.GetThumbnail';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rv.data.TestPatternResponse.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.rv.data.TestPatternResponse.ResponseCase = {
  RESPONSE_NOT_SET: 0,
  GET_DEFINITIONS: 1,
  GET_CURRENT_STATE: 2,
  GET_THUMBNAIL: 3
};

/**
 * @return {proto.rv.data.TestPatternResponse.ResponseCase}
 */
proto.rv.data.TestPatternResponse.prototype.getResponseCase = function() {
  return /** @type {proto.rv.data.TestPatternResponse.ResponseCase} */(jspb.Message.computeOneofCase(this, proto.rv.data.TestPatternResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TestPatternResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TestPatternResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TestPatternResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TestPatternResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
getDefinitions: (f = msg.getGetDefinitions()) && proto.rv.data.TestPatternResponse.GetDefinitions.toObject(includeInstance, f),
getCurrentState: (f = msg.getGetCurrentState()) && proto.rv.data.TestPatternState.toObject(includeInstance, f),
getThumbnail: (f = msg.getGetThumbnail()) && proto.rv.data.TestPatternResponse.GetThumbnail.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TestPatternResponse}
 */
proto.rv.data.TestPatternResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TestPatternResponse;
  return proto.rv.data.TestPatternResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TestPatternResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TestPatternResponse}
 */
proto.rv.data.TestPatternResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.TestPatternResponse.GetDefinitions;
      reader.readMessage(value,proto.rv.data.TestPatternResponse.GetDefinitions.deserializeBinaryFromReader);
      msg.setGetDefinitions(value);
      break;
    case 2:
      var value = new proto.rv.data.TestPatternState;
      reader.readMessage(value,proto.rv.data.TestPatternState.deserializeBinaryFromReader);
      msg.setGetCurrentState(value);
      break;
    case 3:
      var value = new proto.rv.data.TestPatternResponse.GetThumbnail;
      reader.readMessage(value,proto.rv.data.TestPatternResponse.GetThumbnail.deserializeBinaryFromReader);
      msg.setGetThumbnail(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TestPatternResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TestPatternResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TestPatternResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TestPatternResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGetDefinitions();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.TestPatternResponse.GetDefinitions.serializeBinaryToWriter
    );
  }
  f = message.getGetCurrentState();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rv.data.TestPatternState.serializeBinaryToWriter
    );
  }
  f = message.getGetThumbnail();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rv.data.TestPatternResponse.GetThumbnail.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rv.data.TestPatternResponse.GetDefinitions.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TestPatternResponse.GetDefinitions.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TestPatternResponse.GetDefinitions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TestPatternResponse.GetDefinitions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TestPatternResponse.GetDefinitions.toObject = function(includeInstance, msg) {
  var f, obj = {
patternsList: jspb.Message.toObjectList(msg.getPatternsList(),
    proto.rv.data.TestPatternDefinition.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TestPatternResponse.GetDefinitions}
 */
proto.rv.data.TestPatternResponse.GetDefinitions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TestPatternResponse.GetDefinitions;
  return proto.rv.data.TestPatternResponse.GetDefinitions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TestPatternResponse.GetDefinitions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TestPatternResponse.GetDefinitions}
 */
proto.rv.data.TestPatternResponse.GetDefinitions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.TestPatternDefinition;
      reader.readMessage(value,proto.rv.data.TestPatternDefinition.deserializeBinaryFromReader);
      msg.addPatterns(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TestPatternResponse.GetDefinitions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TestPatternResponse.GetDefinitions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TestPatternResponse.GetDefinitions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TestPatternResponse.GetDefinitions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPatternsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rv.data.TestPatternDefinition.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TestPatternDefinition patterns = 1;
 * @return {!Array<!proto.rv.data.TestPatternDefinition>}
 */
proto.rv.data.TestPatternResponse.GetDefinitions.prototype.getPatternsList = function() {
  return /** @type{!Array<!proto.rv.data.TestPatternDefinition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rv.data.TestPatternDefinition, 1));
};


/**
 * @param {!Array<!proto.rv.data.TestPatternDefinition>} value
 * @return {!proto.rv.data.TestPatternResponse.GetDefinitions} returns this
*/
proto.rv.data.TestPatternResponse.GetDefinitions.prototype.setPatternsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.rv.data.TestPatternDefinition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rv.data.TestPatternDefinition}
 */
proto.rv.data.TestPatternResponse.GetDefinitions.prototype.addPatterns = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rv.data.TestPatternDefinition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.TestPatternResponse.GetDefinitions} returns this
 */
proto.rv.data.TestPatternResponse.GetDefinitions.prototype.clearPatternsList = function() {
  return this.setPatternsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TestPatternResponse.GetThumbnail.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TestPatternResponse.GetThumbnail.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TestPatternResponse.GetThumbnail} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TestPatternResponse.GetThumbnail.toObject = function(includeInstance, msg) {
  var f, obj = {
pattern: (f = msg.getPattern()) && proto.rv.data.UUID.toObject(includeInstance, f),
image: msg.getImage_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TestPatternResponse.GetThumbnail}
 */
proto.rv.data.TestPatternResponse.GetThumbnail.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TestPatternResponse.GetThumbnail;
  return proto.rv.data.TestPatternResponse.GetThumbnail.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TestPatternResponse.GetThumbnail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TestPatternResponse.GetThumbnail}
 */
proto.rv.data.TestPatternResponse.GetThumbnail.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.UUID;
      reader.readMessage(value,proto.rv.data.UUID.deserializeBinaryFromReader);
      msg.setPattern(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setImage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TestPatternResponse.GetThumbnail.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TestPatternResponse.GetThumbnail.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TestPatternResponse.GetThumbnail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TestPatternResponse.GetThumbnail.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPattern();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.UUID.serializeBinaryToWriter
    );
  }
  f = message.getImage_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional UUID pattern = 1;
 * @return {?proto.rv.data.UUID}
 */
proto.rv.data.TestPatternResponse.GetThumbnail.prototype.getPattern = function() {
  return /** @type{?proto.rv.data.UUID} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.UUID, 1));
};


/**
 * @param {?proto.rv.data.UUID|undefined} value
 * @return {!proto.rv.data.TestPatternResponse.GetThumbnail} returns this
*/
proto.rv.data.TestPatternResponse.GetThumbnail.prototype.setPattern = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TestPatternResponse.GetThumbnail} returns this
 */
proto.rv.data.TestPatternResponse.GetThumbnail.prototype.clearPattern = function() {
  return this.setPattern(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TestPatternResponse.GetThumbnail.prototype.hasPattern = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes image = 2;
 * @return {!(string|Uint8Array)}
 */
proto.rv.data.TestPatternResponse.GetThumbnail.prototype.getImage = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes image = 2;
 * This is a type-conversion wrapper around `getImage()`
 * @return {string}
 */
proto.rv.data.TestPatternResponse.GetThumbnail.prototype.getImage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getImage()));
};


/**
 * optional bytes image = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getImage()`
 * @return {!Uint8Array}
 */
proto.rv.data.TestPatternResponse.GetThumbnail.prototype.getImage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getImage()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rv.data.TestPatternResponse.GetThumbnail} returns this
 */
proto.rv.data.TestPatternResponse.GetThumbnail.prototype.setImage = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional GetDefinitions get_definitions = 1;
 * @return {?proto.rv.data.TestPatternResponse.GetDefinitions}
 */
proto.rv.data.TestPatternResponse.prototype.getGetDefinitions = function() {
  return /** @type{?proto.rv.data.TestPatternResponse.GetDefinitions} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TestPatternResponse.GetDefinitions, 1));
};


/**
 * @param {?proto.rv.data.TestPatternResponse.GetDefinitions|undefined} value
 * @return {!proto.rv.data.TestPatternResponse} returns this
*/
proto.rv.data.TestPatternResponse.prototype.setGetDefinitions = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.rv.data.TestPatternResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TestPatternResponse} returns this
 */
proto.rv.data.TestPatternResponse.prototype.clearGetDefinitions = function() {
  return this.setGetDefinitions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TestPatternResponse.prototype.hasGetDefinitions = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TestPatternState get_current_state = 2;
 * @return {?proto.rv.data.TestPatternState}
 */
proto.rv.data.TestPatternResponse.prototype.getGetCurrentState = function() {
  return /** @type{?proto.rv.data.TestPatternState} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TestPatternState, 2));
};


/**
 * @param {?proto.rv.data.TestPatternState|undefined} value
 * @return {!proto.rv.data.TestPatternResponse} returns this
*/
proto.rv.data.TestPatternResponse.prototype.setGetCurrentState = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.rv.data.TestPatternResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TestPatternResponse} returns this
 */
proto.rv.data.TestPatternResponse.prototype.clearGetCurrentState = function() {
  return this.setGetCurrentState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TestPatternResponse.prototype.hasGetCurrentState = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional GetThumbnail get_thumbnail = 3;
 * @return {?proto.rv.data.TestPatternResponse.GetThumbnail}
 */
proto.rv.data.TestPatternResponse.prototype.getGetThumbnail = function() {
  return /** @type{?proto.rv.data.TestPatternResponse.GetThumbnail} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TestPatternResponse.GetThumbnail, 3));
};


/**
 * @param {?proto.rv.data.TestPatternResponse.GetThumbnail|undefined} value
 * @return {!proto.rv.data.TestPatternResponse} returns this
*/
proto.rv.data.TestPatternResponse.prototype.setGetThumbnail = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.rv.data.TestPatternResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TestPatternResponse} returns this
 */
proto.rv.data.TestPatternResponse.prototype.clearGetThumbnail = function() {
  return this.setGetThumbnail(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TestPatternResponse.prototype.hasGetThumbnail = function() {
  return jspb.Message.getField(this, 3) != null;
};


