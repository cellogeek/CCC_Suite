// source: proCore.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.rv.data.TriggerTransferRenderState');
goog.provide('proto.rv.data.TriggerTransferRenderState.AutoAdvanceState');
goog.provide('proto.rv.data.TriggerTransferRenderState.CaptureState');
goog.provide('proto.rv.data.TriggerTransferRenderState.CaptureState.Status');
goog.provide('proto.rv.data.TriggerTransferRenderState.MediaState');
goog.provide('proto.rv.data.TriggerTransferRenderState.SlideState');
goog.provide('proto.rv.data.TriggerTransferRenderState.TimecodeState');
goog.provide('proto.rv.data.TriggerTransferRenderState.TimecodeState.Status');
goog.provide('proto.rv.data.TriggerTransferRenderState.TimelineState');
goog.provide('proto.rv.data.TriggerTransferRenderState.TimerState');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.rv.data.Action.MediaType.PlaybackMarker');
goog.require('proto.rv.data.Media');
goog.require('proto.rv.data.Playlist');
goog.require('proto.rv.data.Presentation');
goog.require('proto.rv.data.Slide');
goog.require('proto.rv.data.Timer');
goog.require('proto.rv.data.UUID');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TriggerTransferRenderState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rv.data.TriggerTransferRenderState.repeatedFields_, null);
};
goog.inherits(proto.rv.data.TriggerTransferRenderState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TriggerTransferRenderState.displayName = 'proto.rv.data.TriggerTransferRenderState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TriggerTransferRenderState.TimerState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.TriggerTransferRenderState.TimerState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TriggerTransferRenderState.TimerState.displayName = 'proto.rv.data.TriggerTransferRenderState.TimerState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TriggerTransferRenderState.MediaState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rv.data.TriggerTransferRenderState.MediaState.repeatedFields_, null);
};
goog.inherits(proto.rv.data.TriggerTransferRenderState.MediaState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TriggerTransferRenderState.MediaState.displayName = 'proto.rv.data.TriggerTransferRenderState.MediaState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TriggerTransferRenderState.CaptureState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.TriggerTransferRenderState.CaptureState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TriggerTransferRenderState.CaptureState.displayName = 'proto.rv.data.TriggerTransferRenderState.CaptureState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TriggerTransferRenderState.AutoAdvanceState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.TriggerTransferRenderState.AutoAdvanceState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TriggerTransferRenderState.AutoAdvanceState.displayName = 'proto.rv.data.TriggerTransferRenderState.AutoAdvanceState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TriggerTransferRenderState.TimelineState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.TriggerTransferRenderState.TimelineState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TriggerTransferRenderState.TimelineState.displayName = 'proto.rv.data.TriggerTransferRenderState.TimelineState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TriggerTransferRenderState.SlideState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.TriggerTransferRenderState.SlideState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TriggerTransferRenderState.SlideState.displayName = 'proto.rv.data.TriggerTransferRenderState.SlideState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TriggerTransferRenderState.TimecodeState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.TriggerTransferRenderState.TimecodeState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TriggerTransferRenderState.TimecodeState.displayName = 'proto.rv.data.TriggerTransferRenderState.TimecodeState';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rv.data.TriggerTransferRenderState.repeatedFields_ = [9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TriggerTransferRenderState.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TriggerTransferRenderState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TriggerTransferRenderState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TriggerTransferRenderState.toObject = function(includeInstance, msg) {
  var f, obj = {
slide: (f = msg.getSlide()) && proto.rv.data.Slide.toObject(includeInstance, f),
stageMessage: jspb.Message.getFieldWithDefault(msg, 2, ""),
presentationMedia: (f = msg.getPresentationMedia()) && proto.rv.data.TriggerTransferRenderState.MediaState.toObject(includeInstance, f),
announcementMedia: (f = msg.getAnnouncementMedia()) && proto.rv.data.TriggerTransferRenderState.MediaState.toObject(includeInstance, f),
audioMedia: (f = msg.getAudioMedia()) && proto.rv.data.TriggerTransferRenderState.MediaState.toObject(includeInstance, f),
liveVideoMedia: (f = msg.getLiveVideoMedia()) && proto.rv.data.Media.toObject(includeInstance, f),
presentation: (f = msg.getPresentation()) && proto.rv.data.TriggerTransferRenderState.SlideState.toObject(includeInstance, f),
announcement: (f = msg.getAnnouncement()) && proto.rv.data.TriggerTransferRenderState.SlideState.toObject(includeInstance, f),
timersList: jspb.Message.toObjectList(msg.getTimersList(),
    proto.rv.data.TriggerTransferRenderState.TimerState.toObject, includeInstance),
capture: (f = msg.getCapture()) && proto.rv.data.TriggerTransferRenderState.CaptureState.toObject(includeInstance, f),
timecode: (f = msg.getTimecode()) && proto.rv.data.TriggerTransferRenderState.TimecodeState.toObject(includeInstance, f),
systemTime: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TriggerTransferRenderState}
 */
proto.rv.data.TriggerTransferRenderState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TriggerTransferRenderState;
  return proto.rv.data.TriggerTransferRenderState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TriggerTransferRenderState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TriggerTransferRenderState}
 */
proto.rv.data.TriggerTransferRenderState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.Slide;
      reader.readMessage(value,proto.rv.data.Slide.deserializeBinaryFromReader);
      msg.setSlide(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStageMessage(value);
      break;
    case 3:
      var value = new proto.rv.data.TriggerTransferRenderState.MediaState;
      reader.readMessage(value,proto.rv.data.TriggerTransferRenderState.MediaState.deserializeBinaryFromReader);
      msg.setPresentationMedia(value);
      break;
    case 4:
      var value = new proto.rv.data.TriggerTransferRenderState.MediaState;
      reader.readMessage(value,proto.rv.data.TriggerTransferRenderState.MediaState.deserializeBinaryFromReader);
      msg.setAnnouncementMedia(value);
      break;
    case 5:
      var value = new proto.rv.data.TriggerTransferRenderState.MediaState;
      reader.readMessage(value,proto.rv.data.TriggerTransferRenderState.MediaState.deserializeBinaryFromReader);
      msg.setAudioMedia(value);
      break;
    case 6:
      var value = new proto.rv.data.Media;
      reader.readMessage(value,proto.rv.data.Media.deserializeBinaryFromReader);
      msg.setLiveVideoMedia(value);
      break;
    case 7:
      var value = new proto.rv.data.TriggerTransferRenderState.SlideState;
      reader.readMessage(value,proto.rv.data.TriggerTransferRenderState.SlideState.deserializeBinaryFromReader);
      msg.setPresentation(value);
      break;
    case 8:
      var value = new proto.rv.data.TriggerTransferRenderState.SlideState;
      reader.readMessage(value,proto.rv.data.TriggerTransferRenderState.SlideState.deserializeBinaryFromReader);
      msg.setAnnouncement(value);
      break;
    case 9:
      var value = new proto.rv.data.TriggerTransferRenderState.TimerState;
      reader.readMessage(value,proto.rv.data.TriggerTransferRenderState.TimerState.deserializeBinaryFromReader);
      msg.addTimers(value);
      break;
    case 10:
      var value = new proto.rv.data.TriggerTransferRenderState.CaptureState;
      reader.readMessage(value,proto.rv.data.TriggerTransferRenderState.CaptureState.deserializeBinaryFromReader);
      msg.setCapture(value);
      break;
    case 11:
      var value = new proto.rv.data.TriggerTransferRenderState.TimecodeState;
      reader.readMessage(value,proto.rv.data.TriggerTransferRenderState.TimecodeState.deserializeBinaryFromReader);
      msg.setTimecode(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSystemTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TriggerTransferRenderState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TriggerTransferRenderState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TriggerTransferRenderState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TriggerTransferRenderState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSlide();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.Slide.serializeBinaryToWriter
    );
  }
  f = message.getStageMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPresentationMedia();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rv.data.TriggerTransferRenderState.MediaState.serializeBinaryToWriter
    );
  }
  f = message.getAnnouncementMedia();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rv.data.TriggerTransferRenderState.MediaState.serializeBinaryToWriter
    );
  }
  f = message.getAudioMedia();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.rv.data.TriggerTransferRenderState.MediaState.serializeBinaryToWriter
    );
  }
  f = message.getLiveVideoMedia();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.rv.data.Media.serializeBinaryToWriter
    );
  }
  f = message.getPresentation();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.rv.data.TriggerTransferRenderState.SlideState.serializeBinaryToWriter
    );
  }
  f = message.getAnnouncement();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.rv.data.TriggerTransferRenderState.SlideState.serializeBinaryToWriter
    );
  }
  f = message.getTimersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.rv.data.TriggerTransferRenderState.TimerState.serializeBinaryToWriter
    );
  }
  f = message.getCapture();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.rv.data.TriggerTransferRenderState.CaptureState.serializeBinaryToWriter
    );
  }
  f = message.getTimecode();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.rv.data.TriggerTransferRenderState.TimecodeState.serializeBinaryToWriter
    );
  }
  f = message.getSystemTime();
  if (f !== 0) {
    writer.writeUint64(
      12,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TriggerTransferRenderState.TimerState.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TriggerTransferRenderState.TimerState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TriggerTransferRenderState.TimerState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TriggerTransferRenderState.TimerState.toObject = function(includeInstance, msg) {
  var f, obj = {
timer: (f = msg.getTimer()) && proto.rv.data.Timer.toObject(includeInstance, f),
isRunning: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
hasOverrun: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
value: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TriggerTransferRenderState.TimerState}
 */
proto.rv.data.TriggerTransferRenderState.TimerState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TriggerTransferRenderState.TimerState;
  return proto.rv.data.TriggerTransferRenderState.TimerState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TriggerTransferRenderState.TimerState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TriggerTransferRenderState.TimerState}
 */
proto.rv.data.TriggerTransferRenderState.TimerState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.Timer;
      reader.readMessage(value,proto.rv.data.Timer.deserializeBinaryFromReader);
      msg.setTimer(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsRunning(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasOverrun(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TriggerTransferRenderState.TimerState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TriggerTransferRenderState.TimerState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TriggerTransferRenderState.TimerState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TriggerTransferRenderState.TimerState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.Timer.serializeBinaryToWriter
    );
  }
  f = message.getIsRunning();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getHasOverrun();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional Timer timer = 1;
 * @return {?proto.rv.data.Timer}
 */
proto.rv.data.TriggerTransferRenderState.TimerState.prototype.getTimer = function() {
  return /** @type{?proto.rv.data.Timer} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Timer, 1));
};


/**
 * @param {?proto.rv.data.Timer|undefined} value
 * @return {!proto.rv.data.TriggerTransferRenderState.TimerState} returns this
*/
proto.rv.data.TriggerTransferRenderState.TimerState.prototype.setTimer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TriggerTransferRenderState.TimerState} returns this
 */
proto.rv.data.TriggerTransferRenderState.TimerState.prototype.clearTimer = function() {
  return this.setTimer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TriggerTransferRenderState.TimerState.prototype.hasTimer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool is_running = 2;
 * @return {boolean}
 */
proto.rv.data.TriggerTransferRenderState.TimerState.prototype.getIsRunning = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.TriggerTransferRenderState.TimerState} returns this
 */
proto.rv.data.TriggerTransferRenderState.TimerState.prototype.setIsRunning = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool has_overrun = 3;
 * @return {boolean}
 */
proto.rv.data.TriggerTransferRenderState.TimerState.prototype.getHasOverrun = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.TriggerTransferRenderState.TimerState} returns this
 */
proto.rv.data.TriggerTransferRenderState.TimerState.prototype.setHasOverrun = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional float value = 4;
 * @return {number}
 */
proto.rv.data.TriggerTransferRenderState.TimerState.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.TriggerTransferRenderState.TimerState} returns this
 */
proto.rv.data.TriggerTransferRenderState.TimerState.prototype.setValue = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rv.data.TriggerTransferRenderState.MediaState.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TriggerTransferRenderState.MediaState.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TriggerTransferRenderState.MediaState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TriggerTransferRenderState.MediaState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TriggerTransferRenderState.MediaState.toObject = function(includeInstance, msg) {
  var f, obj = {
currentMedia: (f = msg.getCurrentMedia()) && proto.rv.data.Media.toObject(includeInstance, f),
isPlaying: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
isLooping: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
currentTime: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
timeRemaining: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
playlistUuid: (f = msg.getPlaylistUuid()) && proto.rv.data.UUID.toObject(includeInstance, f),
playlistName: jspb.Message.getFieldWithDefault(msg, 7, ""),
markersList: jspb.Message.toObjectList(msg.getMarkersList(),
    proto.rv.data.Action.MediaType.PlaybackMarker.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TriggerTransferRenderState.MediaState}
 */
proto.rv.data.TriggerTransferRenderState.MediaState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TriggerTransferRenderState.MediaState;
  return proto.rv.data.TriggerTransferRenderState.MediaState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TriggerTransferRenderState.MediaState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TriggerTransferRenderState.MediaState}
 */
proto.rv.data.TriggerTransferRenderState.MediaState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.Media;
      reader.readMessage(value,proto.rv.data.Media.deserializeBinaryFromReader);
      msg.setCurrentMedia(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsPlaying(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsLooping(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCurrentTime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTimeRemaining(value);
      break;
    case 6:
      var value = new proto.rv.data.UUID;
      reader.readMessage(value,proto.rv.data.UUID.deserializeBinaryFromReader);
      msg.setPlaylistUuid(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlaylistName(value);
      break;
    case 8:
      var value = new proto.rv.data.Action.MediaType.PlaybackMarker;
      reader.readMessage(value,proto.rv.data.Action.MediaType.PlaybackMarker.deserializeBinaryFromReader);
      msg.addMarkers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TriggerTransferRenderState.MediaState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TriggerTransferRenderState.MediaState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TriggerTransferRenderState.MediaState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TriggerTransferRenderState.MediaState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrentMedia();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.Media.serializeBinaryToWriter
    );
  }
  f = message.getIsPlaying();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getIsLooping();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getCurrentTime();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getTimeRemaining();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getPlaylistUuid();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.rv.data.UUID.serializeBinaryToWriter
    );
  }
  f = message.getPlaylistName();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getMarkersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.rv.data.Action.MediaType.PlaybackMarker.serializeBinaryToWriter
    );
  }
};


/**
 * optional Media current_media = 1;
 * @return {?proto.rv.data.Media}
 */
proto.rv.data.TriggerTransferRenderState.MediaState.prototype.getCurrentMedia = function() {
  return /** @type{?proto.rv.data.Media} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Media, 1));
};


/**
 * @param {?proto.rv.data.Media|undefined} value
 * @return {!proto.rv.data.TriggerTransferRenderState.MediaState} returns this
*/
proto.rv.data.TriggerTransferRenderState.MediaState.prototype.setCurrentMedia = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TriggerTransferRenderState.MediaState} returns this
 */
proto.rv.data.TriggerTransferRenderState.MediaState.prototype.clearCurrentMedia = function() {
  return this.setCurrentMedia(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TriggerTransferRenderState.MediaState.prototype.hasCurrentMedia = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool is_playing = 2;
 * @return {boolean}
 */
proto.rv.data.TriggerTransferRenderState.MediaState.prototype.getIsPlaying = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.TriggerTransferRenderState.MediaState} returns this
 */
proto.rv.data.TriggerTransferRenderState.MediaState.prototype.setIsPlaying = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool is_looping = 3;
 * @return {boolean}
 */
proto.rv.data.TriggerTransferRenderState.MediaState.prototype.getIsLooping = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.TriggerTransferRenderState.MediaState} returns this
 */
proto.rv.data.TriggerTransferRenderState.MediaState.prototype.setIsLooping = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional float current_time = 4;
 * @return {number}
 */
proto.rv.data.TriggerTransferRenderState.MediaState.prototype.getCurrentTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.TriggerTransferRenderState.MediaState} returns this
 */
proto.rv.data.TriggerTransferRenderState.MediaState.prototype.setCurrentTime = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float time_remaining = 5;
 * @return {number}
 */
proto.rv.data.TriggerTransferRenderState.MediaState.prototype.getTimeRemaining = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.TriggerTransferRenderState.MediaState} returns this
 */
proto.rv.data.TriggerTransferRenderState.MediaState.prototype.setTimeRemaining = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional UUID playlist_uuid = 6;
 * @return {?proto.rv.data.UUID}
 */
proto.rv.data.TriggerTransferRenderState.MediaState.prototype.getPlaylistUuid = function() {
  return /** @type{?proto.rv.data.UUID} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.UUID, 6));
};


/**
 * @param {?proto.rv.data.UUID|undefined} value
 * @return {!proto.rv.data.TriggerTransferRenderState.MediaState} returns this
*/
proto.rv.data.TriggerTransferRenderState.MediaState.prototype.setPlaylistUuid = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TriggerTransferRenderState.MediaState} returns this
 */
proto.rv.data.TriggerTransferRenderState.MediaState.prototype.clearPlaylistUuid = function() {
  return this.setPlaylistUuid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TriggerTransferRenderState.MediaState.prototype.hasPlaylistUuid = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string playlist_name = 7;
 * @return {string}
 */
proto.rv.data.TriggerTransferRenderState.MediaState.prototype.getPlaylistName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.TriggerTransferRenderState.MediaState} returns this
 */
proto.rv.data.TriggerTransferRenderState.MediaState.prototype.setPlaylistName = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * repeated Action.MediaType.PlaybackMarker markers = 8;
 * @return {!Array<!proto.rv.data.Action.MediaType.PlaybackMarker>}
 */
proto.rv.data.TriggerTransferRenderState.MediaState.prototype.getMarkersList = function() {
  return /** @type{!Array<!proto.rv.data.Action.MediaType.PlaybackMarker>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rv.data.Action.MediaType.PlaybackMarker, 8));
};


/**
 * @param {!Array<!proto.rv.data.Action.MediaType.PlaybackMarker>} value
 * @return {!proto.rv.data.TriggerTransferRenderState.MediaState} returns this
*/
proto.rv.data.TriggerTransferRenderState.MediaState.prototype.setMarkersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.rv.data.Action.MediaType.PlaybackMarker=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rv.data.Action.MediaType.PlaybackMarker}
 */
proto.rv.data.TriggerTransferRenderState.MediaState.prototype.addMarkers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.rv.data.Action.MediaType.PlaybackMarker, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.TriggerTransferRenderState.MediaState} returns this
 */
proto.rv.data.TriggerTransferRenderState.MediaState.prototype.clearMarkersList = function() {
  return this.setMarkersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TriggerTransferRenderState.CaptureState.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TriggerTransferRenderState.CaptureState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TriggerTransferRenderState.CaptureState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TriggerTransferRenderState.CaptureState.toObject = function(includeInstance, msg) {
  var f, obj = {
status: jspb.Message.getFieldWithDefault(msg, 1, 0),
time: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TriggerTransferRenderState.CaptureState}
 */
proto.rv.data.TriggerTransferRenderState.CaptureState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TriggerTransferRenderState.CaptureState;
  return proto.rv.data.TriggerTransferRenderState.CaptureState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TriggerTransferRenderState.CaptureState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TriggerTransferRenderState.CaptureState}
 */
proto.rv.data.TriggerTransferRenderState.CaptureState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.rv.data.TriggerTransferRenderState.CaptureState.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TriggerTransferRenderState.CaptureState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TriggerTransferRenderState.CaptureState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TriggerTransferRenderState.CaptureState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TriggerTransferRenderState.CaptureState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTime();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.rv.data.TriggerTransferRenderState.CaptureState.Status = {
  STOPPED: 0,
  ACTIVE: 1,
  CAUTION: 2,
  ERROR: 3
};

/**
 * optional Status status = 1;
 * @return {!proto.rv.data.TriggerTransferRenderState.CaptureState.Status}
 */
proto.rv.data.TriggerTransferRenderState.CaptureState.prototype.getStatus = function() {
  return /** @type {!proto.rv.data.TriggerTransferRenderState.CaptureState.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.rv.data.TriggerTransferRenderState.CaptureState.Status} value
 * @return {!proto.rv.data.TriggerTransferRenderState.CaptureState} returns this
 */
proto.rv.data.TriggerTransferRenderState.CaptureState.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional float time = 2;
 * @return {number}
 */
proto.rv.data.TriggerTransferRenderState.CaptureState.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.TriggerTransferRenderState.CaptureState} returns this
 */
proto.rv.data.TriggerTransferRenderState.CaptureState.prototype.setTime = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TriggerTransferRenderState.AutoAdvanceState.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TriggerTransferRenderState.AutoAdvanceState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TriggerTransferRenderState.AutoAdvanceState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TriggerTransferRenderState.AutoAdvanceState.toObject = function(includeInstance, msg) {
  var f, obj = {
active: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
remainingTime: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TriggerTransferRenderState.AutoAdvanceState}
 */
proto.rv.data.TriggerTransferRenderState.AutoAdvanceState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TriggerTransferRenderState.AutoAdvanceState;
  return proto.rv.data.TriggerTransferRenderState.AutoAdvanceState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TriggerTransferRenderState.AutoAdvanceState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TriggerTransferRenderState.AutoAdvanceState}
 */
proto.rv.data.TriggerTransferRenderState.AutoAdvanceState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRemainingTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TriggerTransferRenderState.AutoAdvanceState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TriggerTransferRenderState.AutoAdvanceState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TriggerTransferRenderState.AutoAdvanceState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TriggerTransferRenderState.AutoAdvanceState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActive();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getRemainingTime();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional bool active = 1;
 * @return {boolean}
 */
proto.rv.data.TriggerTransferRenderState.AutoAdvanceState.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.TriggerTransferRenderState.AutoAdvanceState} returns this
 */
proto.rv.data.TriggerTransferRenderState.AutoAdvanceState.prototype.setActive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional float remaining_time = 2;
 * @return {number}
 */
proto.rv.data.TriggerTransferRenderState.AutoAdvanceState.prototype.getRemainingTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.TriggerTransferRenderState.AutoAdvanceState} returns this
 */
proto.rv.data.TriggerTransferRenderState.AutoAdvanceState.prototype.setRemainingTime = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TriggerTransferRenderState.TimelineState.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TriggerTransferRenderState.TimelineState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TriggerTransferRenderState.TimelineState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TriggerTransferRenderState.TimelineState.toObject = function(includeInstance, msg) {
  var f, obj = {
active: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
currentTime: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
lastSlideIndex: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TriggerTransferRenderState.TimelineState}
 */
proto.rv.data.TriggerTransferRenderState.TimelineState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TriggerTransferRenderState.TimelineState;
  return proto.rv.data.TriggerTransferRenderState.TimelineState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TriggerTransferRenderState.TimelineState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TriggerTransferRenderState.TimelineState}
 */
proto.rv.data.TriggerTransferRenderState.TimelineState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCurrentTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLastSlideIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TriggerTransferRenderState.TimelineState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TriggerTransferRenderState.TimelineState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TriggerTransferRenderState.TimelineState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TriggerTransferRenderState.TimelineState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActive();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getCurrentTime();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getLastSlideIndex();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional bool active = 1;
 * @return {boolean}
 */
proto.rv.data.TriggerTransferRenderState.TimelineState.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.TriggerTransferRenderState.TimelineState} returns this
 */
proto.rv.data.TriggerTransferRenderState.TimelineState.prototype.setActive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional float current_time = 2;
 * @return {number}
 */
proto.rv.data.TriggerTransferRenderState.TimelineState.prototype.getCurrentTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.TriggerTransferRenderState.TimelineState} returns this
 */
proto.rv.data.TriggerTransferRenderState.TimelineState.prototype.setCurrentTime = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional int32 last_slide_index = 3;
 * @return {number}
 */
proto.rv.data.TriggerTransferRenderState.TimelineState.prototype.getLastSlideIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.TriggerTransferRenderState.TimelineState} returns this
 */
proto.rv.data.TriggerTransferRenderState.TimelineState.prototype.setLastSlideIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TriggerTransferRenderState.SlideState.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TriggerTransferRenderState.SlideState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TriggerTransferRenderState.SlideState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TriggerTransferRenderState.SlideState.toObject = function(includeInstance, msg) {
  var f, obj = {
presentation: (f = msg.getPresentation()) && proto.rv.data.Presentation.toObject(includeInstance, f),
playlist: (f = msg.getPlaylist()) && proto.rv.data.Playlist.toObject(includeInstance, f),
currentCue: (f = msg.getCurrentCue()) && proto.rv.data.UUID.toObject(includeInstance, f),
nextCue: (f = msg.getNextCue()) && proto.rv.data.UUID.toObject(includeInstance, f),
autoAdvance: (f = msg.getAutoAdvance()) && proto.rv.data.TriggerTransferRenderState.AutoAdvanceState.toObject(includeInstance, f),
timelineState: (f = msg.getTimelineState()) && proto.rv.data.TriggerTransferRenderState.TimelineState.toObject(includeInstance, f),
currentCueIndex: jspb.Message.getFieldWithDefault(msg, 7, 0),
currentPlaylistIndex: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TriggerTransferRenderState.SlideState}
 */
proto.rv.data.TriggerTransferRenderState.SlideState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TriggerTransferRenderState.SlideState;
  return proto.rv.data.TriggerTransferRenderState.SlideState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TriggerTransferRenderState.SlideState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TriggerTransferRenderState.SlideState}
 */
proto.rv.data.TriggerTransferRenderState.SlideState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.Presentation;
      reader.readMessage(value,proto.rv.data.Presentation.deserializeBinaryFromReader);
      msg.setPresentation(value);
      break;
    case 2:
      var value = new proto.rv.data.Playlist;
      reader.readMessage(value,proto.rv.data.Playlist.deserializeBinaryFromReader);
      msg.setPlaylist(value);
      break;
    case 3:
      var value = new proto.rv.data.UUID;
      reader.readMessage(value,proto.rv.data.UUID.deserializeBinaryFromReader);
      msg.setCurrentCue(value);
      break;
    case 4:
      var value = new proto.rv.data.UUID;
      reader.readMessage(value,proto.rv.data.UUID.deserializeBinaryFromReader);
      msg.setNextCue(value);
      break;
    case 5:
      var value = new proto.rv.data.TriggerTransferRenderState.AutoAdvanceState;
      reader.readMessage(value,proto.rv.data.TriggerTransferRenderState.AutoAdvanceState.deserializeBinaryFromReader);
      msg.setAutoAdvance(value);
      break;
    case 6:
      var value = new proto.rv.data.TriggerTransferRenderState.TimelineState;
      reader.readMessage(value,proto.rv.data.TriggerTransferRenderState.TimelineState.deserializeBinaryFromReader);
      msg.setTimelineState(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCurrentCueIndex(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCurrentPlaylistIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TriggerTransferRenderState.SlideState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TriggerTransferRenderState.SlideState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TriggerTransferRenderState.SlideState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TriggerTransferRenderState.SlideState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPresentation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.Presentation.serializeBinaryToWriter
    );
  }
  f = message.getPlaylist();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rv.data.Playlist.serializeBinaryToWriter
    );
  }
  f = message.getCurrentCue();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rv.data.UUID.serializeBinaryToWriter
    );
  }
  f = message.getNextCue();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rv.data.UUID.serializeBinaryToWriter
    );
  }
  f = message.getAutoAdvance();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.rv.data.TriggerTransferRenderState.AutoAdvanceState.serializeBinaryToWriter
    );
  }
  f = message.getTimelineState();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.rv.data.TriggerTransferRenderState.TimelineState.serializeBinaryToWriter
    );
  }
  f = message.getCurrentCueIndex();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getCurrentPlaylistIndex();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
};


/**
 * optional Presentation presentation = 1;
 * @return {?proto.rv.data.Presentation}
 */
proto.rv.data.TriggerTransferRenderState.SlideState.prototype.getPresentation = function() {
  return /** @type{?proto.rv.data.Presentation} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Presentation, 1));
};


/**
 * @param {?proto.rv.data.Presentation|undefined} value
 * @return {!proto.rv.data.TriggerTransferRenderState.SlideState} returns this
*/
proto.rv.data.TriggerTransferRenderState.SlideState.prototype.setPresentation = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TriggerTransferRenderState.SlideState} returns this
 */
proto.rv.data.TriggerTransferRenderState.SlideState.prototype.clearPresentation = function() {
  return this.setPresentation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TriggerTransferRenderState.SlideState.prototype.hasPresentation = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Playlist playlist = 2;
 * @return {?proto.rv.data.Playlist}
 */
proto.rv.data.TriggerTransferRenderState.SlideState.prototype.getPlaylist = function() {
  return /** @type{?proto.rv.data.Playlist} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Playlist, 2));
};


/**
 * @param {?proto.rv.data.Playlist|undefined} value
 * @return {!proto.rv.data.TriggerTransferRenderState.SlideState} returns this
*/
proto.rv.data.TriggerTransferRenderState.SlideState.prototype.setPlaylist = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TriggerTransferRenderState.SlideState} returns this
 */
proto.rv.data.TriggerTransferRenderState.SlideState.prototype.clearPlaylist = function() {
  return this.setPlaylist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TriggerTransferRenderState.SlideState.prototype.hasPlaylist = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional UUID current_cue = 3;
 * @return {?proto.rv.data.UUID}
 */
proto.rv.data.TriggerTransferRenderState.SlideState.prototype.getCurrentCue = function() {
  return /** @type{?proto.rv.data.UUID} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.UUID, 3));
};


/**
 * @param {?proto.rv.data.UUID|undefined} value
 * @return {!proto.rv.data.TriggerTransferRenderState.SlideState} returns this
*/
proto.rv.data.TriggerTransferRenderState.SlideState.prototype.setCurrentCue = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TriggerTransferRenderState.SlideState} returns this
 */
proto.rv.data.TriggerTransferRenderState.SlideState.prototype.clearCurrentCue = function() {
  return this.setCurrentCue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TriggerTransferRenderState.SlideState.prototype.hasCurrentCue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional UUID next_cue = 4;
 * @return {?proto.rv.data.UUID}
 */
proto.rv.data.TriggerTransferRenderState.SlideState.prototype.getNextCue = function() {
  return /** @type{?proto.rv.data.UUID} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.UUID, 4));
};


/**
 * @param {?proto.rv.data.UUID|undefined} value
 * @return {!proto.rv.data.TriggerTransferRenderState.SlideState} returns this
*/
proto.rv.data.TriggerTransferRenderState.SlideState.prototype.setNextCue = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TriggerTransferRenderState.SlideState} returns this
 */
proto.rv.data.TriggerTransferRenderState.SlideState.prototype.clearNextCue = function() {
  return this.setNextCue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TriggerTransferRenderState.SlideState.prototype.hasNextCue = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional AutoAdvanceState auto_advance = 5;
 * @return {?proto.rv.data.TriggerTransferRenderState.AutoAdvanceState}
 */
proto.rv.data.TriggerTransferRenderState.SlideState.prototype.getAutoAdvance = function() {
  return /** @type{?proto.rv.data.TriggerTransferRenderState.AutoAdvanceState} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TriggerTransferRenderState.AutoAdvanceState, 5));
};


/**
 * @param {?proto.rv.data.TriggerTransferRenderState.AutoAdvanceState|undefined} value
 * @return {!proto.rv.data.TriggerTransferRenderState.SlideState} returns this
*/
proto.rv.data.TriggerTransferRenderState.SlideState.prototype.setAutoAdvance = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TriggerTransferRenderState.SlideState} returns this
 */
proto.rv.data.TriggerTransferRenderState.SlideState.prototype.clearAutoAdvance = function() {
  return this.setAutoAdvance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TriggerTransferRenderState.SlideState.prototype.hasAutoAdvance = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional TimelineState timeline_state = 6;
 * @return {?proto.rv.data.TriggerTransferRenderState.TimelineState}
 */
proto.rv.data.TriggerTransferRenderState.SlideState.prototype.getTimelineState = function() {
  return /** @type{?proto.rv.data.TriggerTransferRenderState.TimelineState} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TriggerTransferRenderState.TimelineState, 6));
};


/**
 * @param {?proto.rv.data.TriggerTransferRenderState.TimelineState|undefined} value
 * @return {!proto.rv.data.TriggerTransferRenderState.SlideState} returns this
*/
proto.rv.data.TriggerTransferRenderState.SlideState.prototype.setTimelineState = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TriggerTransferRenderState.SlideState} returns this
 */
proto.rv.data.TriggerTransferRenderState.SlideState.prototype.clearTimelineState = function() {
  return this.setTimelineState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TriggerTransferRenderState.SlideState.prototype.hasTimelineState = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int32 current_cue_index = 7;
 * @return {number}
 */
proto.rv.data.TriggerTransferRenderState.SlideState.prototype.getCurrentCueIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.TriggerTransferRenderState.SlideState} returns this
 */
proto.rv.data.TriggerTransferRenderState.SlideState.prototype.setCurrentCueIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 current_playlist_index = 8;
 * @return {number}
 */
proto.rv.data.TriggerTransferRenderState.SlideState.prototype.getCurrentPlaylistIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.TriggerTransferRenderState.SlideState} returns this
 */
proto.rv.data.TriggerTransferRenderState.SlideState.prototype.setCurrentPlaylistIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TriggerTransferRenderState.TimecodeState.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TriggerTransferRenderState.TimecodeState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TriggerTransferRenderState.TimecodeState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TriggerTransferRenderState.TimecodeState.toObject = function(includeInstance, msg) {
  var f, obj = {
status: jspb.Message.getFieldWithDefault(msg, 1, 0),
time: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TriggerTransferRenderState.TimecodeState}
 */
proto.rv.data.TriggerTransferRenderState.TimecodeState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TriggerTransferRenderState.TimecodeState;
  return proto.rv.data.TriggerTransferRenderState.TimecodeState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TriggerTransferRenderState.TimecodeState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TriggerTransferRenderState.TimecodeState}
 */
proto.rv.data.TriggerTransferRenderState.TimecodeState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.rv.data.TriggerTransferRenderState.TimecodeState.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TriggerTransferRenderState.TimecodeState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TriggerTransferRenderState.TimecodeState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TriggerTransferRenderState.TimecodeState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TriggerTransferRenderState.TimecodeState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTime();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.rv.data.TriggerTransferRenderState.TimecodeState.Status = {
  STOPPED: 0,
  PLAYING: 1,
  ERROR: 2
};

/**
 * optional Status status = 1;
 * @return {!proto.rv.data.TriggerTransferRenderState.TimecodeState.Status}
 */
proto.rv.data.TriggerTransferRenderState.TimecodeState.prototype.getStatus = function() {
  return /** @type {!proto.rv.data.TriggerTransferRenderState.TimecodeState.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.rv.data.TriggerTransferRenderState.TimecodeState.Status} value
 * @return {!proto.rv.data.TriggerTransferRenderState.TimecodeState} returns this
 */
proto.rv.data.TriggerTransferRenderState.TimecodeState.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional float time = 2;
 * @return {number}
 */
proto.rv.data.TriggerTransferRenderState.TimecodeState.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.TriggerTransferRenderState.TimecodeState} returns this
 */
proto.rv.data.TriggerTransferRenderState.TimecodeState.prototype.setTime = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional Slide slide = 1;
 * @return {?proto.rv.data.Slide}
 */
proto.rv.data.TriggerTransferRenderState.prototype.getSlide = function() {
  return /** @type{?proto.rv.data.Slide} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Slide, 1));
};


/**
 * @param {?proto.rv.data.Slide|undefined} value
 * @return {!proto.rv.data.TriggerTransferRenderState} returns this
*/
proto.rv.data.TriggerTransferRenderState.prototype.setSlide = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TriggerTransferRenderState} returns this
 */
proto.rv.data.TriggerTransferRenderState.prototype.clearSlide = function() {
  return this.setSlide(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TriggerTransferRenderState.prototype.hasSlide = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string stage_message = 2;
 * @return {string}
 */
proto.rv.data.TriggerTransferRenderState.prototype.getStageMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.TriggerTransferRenderState} returns this
 */
proto.rv.data.TriggerTransferRenderState.prototype.setStageMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional MediaState presentation_media = 3;
 * @return {?proto.rv.data.TriggerTransferRenderState.MediaState}
 */
proto.rv.data.TriggerTransferRenderState.prototype.getPresentationMedia = function() {
  return /** @type{?proto.rv.data.TriggerTransferRenderState.MediaState} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TriggerTransferRenderState.MediaState, 3));
};


/**
 * @param {?proto.rv.data.TriggerTransferRenderState.MediaState|undefined} value
 * @return {!proto.rv.data.TriggerTransferRenderState} returns this
*/
proto.rv.data.TriggerTransferRenderState.prototype.setPresentationMedia = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TriggerTransferRenderState} returns this
 */
proto.rv.data.TriggerTransferRenderState.prototype.clearPresentationMedia = function() {
  return this.setPresentationMedia(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TriggerTransferRenderState.prototype.hasPresentationMedia = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional MediaState announcement_media = 4;
 * @return {?proto.rv.data.TriggerTransferRenderState.MediaState}
 */
proto.rv.data.TriggerTransferRenderState.prototype.getAnnouncementMedia = function() {
  return /** @type{?proto.rv.data.TriggerTransferRenderState.MediaState} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TriggerTransferRenderState.MediaState, 4));
};


/**
 * @param {?proto.rv.data.TriggerTransferRenderState.MediaState|undefined} value
 * @return {!proto.rv.data.TriggerTransferRenderState} returns this
*/
proto.rv.data.TriggerTransferRenderState.prototype.setAnnouncementMedia = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TriggerTransferRenderState} returns this
 */
proto.rv.data.TriggerTransferRenderState.prototype.clearAnnouncementMedia = function() {
  return this.setAnnouncementMedia(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TriggerTransferRenderState.prototype.hasAnnouncementMedia = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional MediaState audio_media = 5;
 * @return {?proto.rv.data.TriggerTransferRenderState.MediaState}
 */
proto.rv.data.TriggerTransferRenderState.prototype.getAudioMedia = function() {
  return /** @type{?proto.rv.data.TriggerTransferRenderState.MediaState} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TriggerTransferRenderState.MediaState, 5));
};


/**
 * @param {?proto.rv.data.TriggerTransferRenderState.MediaState|undefined} value
 * @return {!proto.rv.data.TriggerTransferRenderState} returns this
*/
proto.rv.data.TriggerTransferRenderState.prototype.setAudioMedia = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TriggerTransferRenderState} returns this
 */
proto.rv.data.TriggerTransferRenderState.prototype.clearAudioMedia = function() {
  return this.setAudioMedia(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TriggerTransferRenderState.prototype.hasAudioMedia = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Media live_video_media = 6;
 * @return {?proto.rv.data.Media}
 */
proto.rv.data.TriggerTransferRenderState.prototype.getLiveVideoMedia = function() {
  return /** @type{?proto.rv.data.Media} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Media, 6));
};


/**
 * @param {?proto.rv.data.Media|undefined} value
 * @return {!proto.rv.data.TriggerTransferRenderState} returns this
*/
proto.rv.data.TriggerTransferRenderState.prototype.setLiveVideoMedia = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TriggerTransferRenderState} returns this
 */
proto.rv.data.TriggerTransferRenderState.prototype.clearLiveVideoMedia = function() {
  return this.setLiveVideoMedia(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TriggerTransferRenderState.prototype.hasLiveVideoMedia = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional SlideState presentation = 7;
 * @return {?proto.rv.data.TriggerTransferRenderState.SlideState}
 */
proto.rv.data.TriggerTransferRenderState.prototype.getPresentation = function() {
  return /** @type{?proto.rv.data.TriggerTransferRenderState.SlideState} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TriggerTransferRenderState.SlideState, 7));
};


/**
 * @param {?proto.rv.data.TriggerTransferRenderState.SlideState|undefined} value
 * @return {!proto.rv.data.TriggerTransferRenderState} returns this
*/
proto.rv.data.TriggerTransferRenderState.prototype.setPresentation = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TriggerTransferRenderState} returns this
 */
proto.rv.data.TriggerTransferRenderState.prototype.clearPresentation = function() {
  return this.setPresentation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TriggerTransferRenderState.prototype.hasPresentation = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional SlideState announcement = 8;
 * @return {?proto.rv.data.TriggerTransferRenderState.SlideState}
 */
proto.rv.data.TriggerTransferRenderState.prototype.getAnnouncement = function() {
  return /** @type{?proto.rv.data.TriggerTransferRenderState.SlideState} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TriggerTransferRenderState.SlideState, 8));
};


/**
 * @param {?proto.rv.data.TriggerTransferRenderState.SlideState|undefined} value
 * @return {!proto.rv.data.TriggerTransferRenderState} returns this
*/
proto.rv.data.TriggerTransferRenderState.prototype.setAnnouncement = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TriggerTransferRenderState} returns this
 */
proto.rv.data.TriggerTransferRenderState.prototype.clearAnnouncement = function() {
  return this.setAnnouncement(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TriggerTransferRenderState.prototype.hasAnnouncement = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * repeated TimerState timers = 9;
 * @return {!Array<!proto.rv.data.TriggerTransferRenderState.TimerState>}
 */
proto.rv.data.TriggerTransferRenderState.prototype.getTimersList = function() {
  return /** @type{!Array<!proto.rv.data.TriggerTransferRenderState.TimerState>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rv.data.TriggerTransferRenderState.TimerState, 9));
};


/**
 * @param {!Array<!proto.rv.data.TriggerTransferRenderState.TimerState>} value
 * @return {!proto.rv.data.TriggerTransferRenderState} returns this
*/
proto.rv.data.TriggerTransferRenderState.prototype.setTimersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.rv.data.TriggerTransferRenderState.TimerState=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rv.data.TriggerTransferRenderState.TimerState}
 */
proto.rv.data.TriggerTransferRenderState.prototype.addTimers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.rv.data.TriggerTransferRenderState.TimerState, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.TriggerTransferRenderState} returns this
 */
proto.rv.data.TriggerTransferRenderState.prototype.clearTimersList = function() {
  return this.setTimersList([]);
};


/**
 * optional CaptureState capture = 10;
 * @return {?proto.rv.data.TriggerTransferRenderState.CaptureState}
 */
proto.rv.data.TriggerTransferRenderState.prototype.getCapture = function() {
  return /** @type{?proto.rv.data.TriggerTransferRenderState.CaptureState} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TriggerTransferRenderState.CaptureState, 10));
};


/**
 * @param {?proto.rv.data.TriggerTransferRenderState.CaptureState|undefined} value
 * @return {!proto.rv.data.TriggerTransferRenderState} returns this
*/
proto.rv.data.TriggerTransferRenderState.prototype.setCapture = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TriggerTransferRenderState} returns this
 */
proto.rv.data.TriggerTransferRenderState.prototype.clearCapture = function() {
  return this.setCapture(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TriggerTransferRenderState.prototype.hasCapture = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional TimecodeState timecode = 11;
 * @return {?proto.rv.data.TriggerTransferRenderState.TimecodeState}
 */
proto.rv.data.TriggerTransferRenderState.prototype.getTimecode = function() {
  return /** @type{?proto.rv.data.TriggerTransferRenderState.TimecodeState} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TriggerTransferRenderState.TimecodeState, 11));
};


/**
 * @param {?proto.rv.data.TriggerTransferRenderState.TimecodeState|undefined} value
 * @return {!proto.rv.data.TriggerTransferRenderState} returns this
*/
proto.rv.data.TriggerTransferRenderState.prototype.setTimecode = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TriggerTransferRenderState} returns this
 */
proto.rv.data.TriggerTransferRenderState.prototype.clearTimecode = function() {
  return this.setTimecode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TriggerTransferRenderState.prototype.hasTimecode = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional uint64 system_time = 12;
 * @return {number}
 */
proto.rv.data.TriggerTransferRenderState.prototype.getSystemTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.TriggerTransferRenderState} returns this
 */
proto.rv.data.TriggerTransferRenderState.prototype.setSystemTime = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


