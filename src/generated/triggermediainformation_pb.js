// source: analyticsTriggerMedia.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.rv.analytics.TriggerMediaInformation');
goog.provide('proto.rv.analytics.TriggerMediaInformation.Audio');
goog.provide('proto.rv.analytics.TriggerMediaInformation.Audio.Behavior');
goog.provide('proto.rv.analytics.TriggerMediaInformation.Audio.PlaybackBehavior');
goog.provide('proto.rv.analytics.TriggerMediaInformation.CompletionTarget');
goog.provide('proto.rv.analytics.TriggerMediaInformation.Image');
goog.provide('proto.rv.analytics.TriggerMediaInformation.LiveVideo');
goog.provide('proto.rv.analytics.TriggerMediaInformation.MediatypeCase');
goog.provide('proto.rv.analytics.TriggerMediaInformation.SourceType');
goog.provide('proto.rv.analytics.TriggerMediaInformation.Transition');
goog.provide('proto.rv.analytics.TriggerMediaInformation.Transport');
goog.provide('proto.rv.analytics.TriggerMediaInformation.Transport.DurationRange');
goog.provide('proto.rv.analytics.TriggerMediaInformation.Video');
goog.provide('proto.rv.analytics.TriggerMediaInformation.Video.PlaybackBehavior');
goog.provide('proto.rv.analytics.TriggerMediaInformation.VisualMedia');
goog.provide('proto.rv.analytics.TriggerMediaInformation.VisualMedia.Behavior');
goog.provide('proto.rv.analytics.TriggerMediaInformation.VisualMedia.FlipMode');
goog.provide('proto.rv.analytics.TriggerMediaInformation.VisualMedia.NativeRotation');
goog.provide('proto.rv.analytics.TriggerMediaInformation.VisualMedia.ScaleMode');
goog.provide('proto.rv.analytics.TriggerMediaInformation.VisualMedia.Size');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.analytics.TriggerMediaInformation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rv.analytics.TriggerMediaInformation.oneofGroups_);
};
goog.inherits(proto.rv.analytics.TriggerMediaInformation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.analytics.TriggerMediaInformation.displayName = 'proto.rv.analytics.TriggerMediaInformation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.analytics.TriggerMediaInformation.Transition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.analytics.TriggerMediaInformation.Transition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.analytics.TriggerMediaInformation.Transition.displayName = 'proto.rv.analytics.TriggerMediaInformation.Transition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.analytics.TriggerMediaInformation.VisualMedia = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.analytics.TriggerMediaInformation.VisualMedia, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.analytics.TriggerMediaInformation.VisualMedia.displayName = 'proto.rv.analytics.TriggerMediaInformation.VisualMedia';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.analytics.TriggerMediaInformation.VisualMedia.Size = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.analytics.TriggerMediaInformation.VisualMedia.Size, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.analytics.TriggerMediaInformation.VisualMedia.Size.displayName = 'proto.rv.analytics.TriggerMediaInformation.VisualMedia.Size';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.analytics.TriggerMediaInformation.Transport = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.analytics.TriggerMediaInformation.Transport, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.analytics.TriggerMediaInformation.Transport.displayName = 'proto.rv.analytics.TriggerMediaInformation.Transport';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.analytics.TriggerMediaInformation.Video = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.analytics.TriggerMediaInformation.Video, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.analytics.TriggerMediaInformation.Video.displayName = 'proto.rv.analytics.TriggerMediaInformation.Video';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.analytics.TriggerMediaInformation.Audio = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.analytics.TriggerMediaInformation.Audio, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.analytics.TriggerMediaInformation.Audio.displayName = 'proto.rv.analytics.TriggerMediaInformation.Audio';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.analytics.TriggerMediaInformation.Image = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.analytics.TriggerMediaInformation.Image, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.analytics.TriggerMediaInformation.Image.displayName = 'proto.rv.analytics.TriggerMediaInformation.Image';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.analytics.TriggerMediaInformation.LiveVideo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.analytics.TriggerMediaInformation.LiveVideo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.analytics.TriggerMediaInformation.LiveVideo.displayName = 'proto.rv.analytics.TriggerMediaInformation.LiveVideo';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rv.analytics.TriggerMediaInformation.oneofGroups_ = [[2,3,4,5]];

/**
 * @enum {number}
 */
proto.rv.analytics.TriggerMediaInformation.MediatypeCase = {
  MEDIATYPE_NOT_SET: 0,
  VIDEO: 2,
  IMAGE: 3,
  AUDIO: 4,
  LIVE_VIDEO: 5
};

/**
 * @return {proto.rv.analytics.TriggerMediaInformation.MediatypeCase}
 */
proto.rv.analytics.TriggerMediaInformation.prototype.getMediatypeCase = function() {
  return /** @type {proto.rv.analytics.TriggerMediaInformation.MediatypeCase} */(jspb.Message.computeOneofCase(this, proto.rv.analytics.TriggerMediaInformation.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.analytics.TriggerMediaInformation.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.analytics.TriggerMediaInformation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.analytics.TriggerMediaInformation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.analytics.TriggerMediaInformation.toObject = function(includeInstance, msg) {
  var f, obj = {
sourceType: jspb.Message.getFieldWithDefault(msg, 1, 0),
video: (f = msg.getVideo()) && proto.rv.analytics.TriggerMediaInformation.Video.toObject(includeInstance, f),
image: (f = msg.getImage()) && proto.rv.analytics.TriggerMediaInformation.Image.toObject(includeInstance, f),
audio: (f = msg.getAudio()) && proto.rv.analytics.TriggerMediaInformation.Audio.toObject(includeInstance, f),
liveVideo: (f = msg.getLiveVideo()) && proto.rv.analytics.TriggerMediaInformation.LiveVideo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.analytics.TriggerMediaInformation}
 */
proto.rv.analytics.TriggerMediaInformation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.analytics.TriggerMediaInformation;
  return proto.rv.analytics.TriggerMediaInformation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.analytics.TriggerMediaInformation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.analytics.TriggerMediaInformation}
 */
proto.rv.analytics.TriggerMediaInformation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.rv.analytics.TriggerMediaInformation.SourceType} */ (reader.readEnum());
      msg.setSourceType(value);
      break;
    case 2:
      var value = new proto.rv.analytics.TriggerMediaInformation.Video;
      reader.readMessage(value,proto.rv.analytics.TriggerMediaInformation.Video.deserializeBinaryFromReader);
      msg.setVideo(value);
      break;
    case 3:
      var value = new proto.rv.analytics.TriggerMediaInformation.Image;
      reader.readMessage(value,proto.rv.analytics.TriggerMediaInformation.Image.deserializeBinaryFromReader);
      msg.setImage(value);
      break;
    case 4:
      var value = new proto.rv.analytics.TriggerMediaInformation.Audio;
      reader.readMessage(value,proto.rv.analytics.TriggerMediaInformation.Audio.deserializeBinaryFromReader);
      msg.setAudio(value);
      break;
    case 5:
      var value = new proto.rv.analytics.TriggerMediaInformation.LiveVideo;
      reader.readMessage(value,proto.rv.analytics.TriggerMediaInformation.LiveVideo.deserializeBinaryFromReader);
      msg.setLiveVideo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.analytics.TriggerMediaInformation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.analytics.TriggerMediaInformation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.analytics.TriggerMediaInformation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.analytics.TriggerMediaInformation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourceType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getVideo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rv.analytics.TriggerMediaInformation.Video.serializeBinaryToWriter
    );
  }
  f = message.getImage();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rv.analytics.TriggerMediaInformation.Image.serializeBinaryToWriter
    );
  }
  f = message.getAudio();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rv.analytics.TriggerMediaInformation.Audio.serializeBinaryToWriter
    );
  }
  f = message.getLiveVideo();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.rv.analytics.TriggerMediaInformation.LiveVideo.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.rv.analytics.TriggerMediaInformation.CompletionTarget = {
  COMPLETION_TARGET_NONE: 0,
  COMPLETION_TARGET_NEXT: 1,
  COMPLETION_TARGET_RANDOM: 2,
  COMPLETION_TARGET_CUE: 3,
  COMPLETION_TARGET_FIRST: 4
};

/**
 * @enum {number}
 */
proto.rv.analytics.TriggerMediaInformation.SourceType = {
  SOURCE_TYPE_LOCAL: 0,
  SOURCE_TYPE_PROCONTENT: 1
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.analytics.TriggerMediaInformation.Transition.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.analytics.TriggerMediaInformation.Transition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.analytics.TriggerMediaInformation.Transition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.analytics.TriggerMediaInformation.Transition.toObject = function(includeInstance, msg) {
  var f, obj = {
isDefault: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.analytics.TriggerMediaInformation.Transition}
 */
proto.rv.analytics.TriggerMediaInformation.Transition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.analytics.TriggerMediaInformation.Transition;
  return proto.rv.analytics.TriggerMediaInformation.Transition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.analytics.TriggerMediaInformation.Transition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.analytics.TriggerMediaInformation.Transition}
 */
proto.rv.analytics.TriggerMediaInformation.Transition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsDefault(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.analytics.TriggerMediaInformation.Transition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.analytics.TriggerMediaInformation.Transition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.analytics.TriggerMediaInformation.Transition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.analytics.TriggerMediaInformation.Transition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsDefault();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool is_default = 1;
 * @return {boolean}
 */
proto.rv.analytics.TriggerMediaInformation.Transition.prototype.getIsDefault = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.analytics.TriggerMediaInformation.Transition} returns this
 */
proto.rv.analytics.TriggerMediaInformation.Transition.prototype.setIsDefault = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.rv.analytics.TriggerMediaInformation.Transition.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.analytics.TriggerMediaInformation.Transition} returns this
 */
proto.rv.analytics.TriggerMediaInformation.Transition.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.analytics.TriggerMediaInformation.VisualMedia.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.analytics.TriggerMediaInformation.VisualMedia.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.analytics.TriggerMediaInformation.VisualMedia} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.analytics.TriggerMediaInformation.VisualMedia.toObject = function(includeInstance, msg) {
  var f, obj = {
behavior: jspb.Message.getFieldWithDefault(msg, 1, 0),
scaleMode: jspb.Message.getFieldWithDefault(msg, 2, 0),
flipMode: jspb.Message.getFieldWithDefault(msg, 3, 0),
nativeRotation: jspb.Message.getFieldWithDefault(msg, 4, 0),
resolution: (f = msg.getResolution()) && proto.rv.analytics.TriggerMediaInformation.VisualMedia.Size.toObject(includeInstance, f),
enabledEffectsCount: jspb.Message.getFieldWithDefault(msg, 6, 0),
hasEffectPreset: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
transition: (f = msg.getTransition()) && proto.rv.analytics.TriggerMediaInformation.Transition.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.analytics.TriggerMediaInformation.VisualMedia}
 */
proto.rv.analytics.TriggerMediaInformation.VisualMedia.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.analytics.TriggerMediaInformation.VisualMedia;
  return proto.rv.analytics.TriggerMediaInformation.VisualMedia.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.analytics.TriggerMediaInformation.VisualMedia} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.analytics.TriggerMediaInformation.VisualMedia}
 */
proto.rv.analytics.TriggerMediaInformation.VisualMedia.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.rv.analytics.TriggerMediaInformation.VisualMedia.Behavior} */ (reader.readEnum());
      msg.setBehavior(value);
      break;
    case 2:
      var value = /** @type {!proto.rv.analytics.TriggerMediaInformation.VisualMedia.ScaleMode} */ (reader.readEnum());
      msg.setScaleMode(value);
      break;
    case 3:
      var value = /** @type {!proto.rv.analytics.TriggerMediaInformation.VisualMedia.FlipMode} */ (reader.readEnum());
      msg.setFlipMode(value);
      break;
    case 4:
      var value = /** @type {!proto.rv.analytics.TriggerMediaInformation.VisualMedia.NativeRotation} */ (reader.readEnum());
      msg.setNativeRotation(value);
      break;
    case 5:
      var value = new proto.rv.analytics.TriggerMediaInformation.VisualMedia.Size;
      reader.readMessage(value,proto.rv.analytics.TriggerMediaInformation.VisualMedia.Size.deserializeBinaryFromReader);
      msg.setResolution(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEnabledEffectsCount(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasEffectPreset(value);
      break;
    case 8:
      var value = new proto.rv.analytics.TriggerMediaInformation.Transition;
      reader.readMessage(value,proto.rv.analytics.TriggerMediaInformation.Transition.deserializeBinaryFromReader);
      msg.setTransition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.analytics.TriggerMediaInformation.VisualMedia.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.analytics.TriggerMediaInformation.VisualMedia.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.analytics.TriggerMediaInformation.VisualMedia} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.analytics.TriggerMediaInformation.VisualMedia.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBehavior();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getScaleMode();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getFlipMode();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getNativeRotation();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getResolution();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.rv.analytics.TriggerMediaInformation.VisualMedia.Size.serializeBinaryToWriter
    );
  }
  f = message.getEnabledEffectsCount();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getHasEffectPreset();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getTransition();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.rv.analytics.TriggerMediaInformation.Transition.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.rv.analytics.TriggerMediaInformation.VisualMedia.Behavior = {
  BEHAVIOR_BACKGROUND: 0,
  BEHAVIOR_FOREGROUND: 1,
  BEHAVIOR_VIDEO_INPUT: 2
};

/**
 * @enum {number}
 */
proto.rv.analytics.TriggerMediaInformation.VisualMedia.ScaleMode = {
  SCALE_MODE_FIT: 0,
  SCALE_MODE_FILL: 1,
  SCALE_MODE_STRETCH: 2,
  SCALE_MODE_BLUR: 3
};

/**
 * @enum {number}
 */
proto.rv.analytics.TriggerMediaInformation.VisualMedia.FlipMode = {
  FLIP_MODE_NONE: 0,
  FLIP_MODE_HORIZONTAL: 1,
  FLIP_MODE_VERTICAL: 2,
  FLIP_MODE_BOTH: 3
};

/**
 * @enum {number}
 */
proto.rv.analytics.TriggerMediaInformation.VisualMedia.NativeRotation = {
  NATIVE_ROTATION_STANDARD: 0,
  NATIVE_ROTATION_90: 90,
  NATIVE_ROTATION_180: 180,
  NATIVE_ROTATION_270: 270
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.analytics.TriggerMediaInformation.VisualMedia.Size.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.analytics.TriggerMediaInformation.VisualMedia.Size.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.analytics.TriggerMediaInformation.VisualMedia.Size} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.analytics.TriggerMediaInformation.VisualMedia.Size.toObject = function(includeInstance, msg) {
  var f, obj = {
width: jspb.Message.getFieldWithDefault(msg, 1, 0),
height: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.analytics.TriggerMediaInformation.VisualMedia.Size}
 */
proto.rv.analytics.TriggerMediaInformation.VisualMedia.Size.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.analytics.TriggerMediaInformation.VisualMedia.Size;
  return proto.rv.analytics.TriggerMediaInformation.VisualMedia.Size.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.analytics.TriggerMediaInformation.VisualMedia.Size} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.analytics.TriggerMediaInformation.VisualMedia.Size}
 */
proto.rv.analytics.TriggerMediaInformation.VisualMedia.Size.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWidth(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.analytics.TriggerMediaInformation.VisualMedia.Size.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.analytics.TriggerMediaInformation.VisualMedia.Size.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.analytics.TriggerMediaInformation.VisualMedia.Size} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.analytics.TriggerMediaInformation.VisualMedia.Size.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWidth();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 width = 1;
 * @return {number}
 */
proto.rv.analytics.TriggerMediaInformation.VisualMedia.Size.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.analytics.TriggerMediaInformation.VisualMedia.Size} returns this
 */
proto.rv.analytics.TriggerMediaInformation.VisualMedia.Size.prototype.setWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 height = 2;
 * @return {number}
 */
proto.rv.analytics.TriggerMediaInformation.VisualMedia.Size.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.analytics.TriggerMediaInformation.VisualMedia.Size} returns this
 */
proto.rv.analytics.TriggerMediaInformation.VisualMedia.Size.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Behavior behavior = 1;
 * @return {!proto.rv.analytics.TriggerMediaInformation.VisualMedia.Behavior}
 */
proto.rv.analytics.TriggerMediaInformation.VisualMedia.prototype.getBehavior = function() {
  return /** @type {!proto.rv.analytics.TriggerMediaInformation.VisualMedia.Behavior} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.rv.analytics.TriggerMediaInformation.VisualMedia.Behavior} value
 * @return {!proto.rv.analytics.TriggerMediaInformation.VisualMedia} returns this
 */
proto.rv.analytics.TriggerMediaInformation.VisualMedia.prototype.setBehavior = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional ScaleMode scale_mode = 2;
 * @return {!proto.rv.analytics.TriggerMediaInformation.VisualMedia.ScaleMode}
 */
proto.rv.analytics.TriggerMediaInformation.VisualMedia.prototype.getScaleMode = function() {
  return /** @type {!proto.rv.analytics.TriggerMediaInformation.VisualMedia.ScaleMode} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.rv.analytics.TriggerMediaInformation.VisualMedia.ScaleMode} value
 * @return {!proto.rv.analytics.TriggerMediaInformation.VisualMedia} returns this
 */
proto.rv.analytics.TriggerMediaInformation.VisualMedia.prototype.setScaleMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional FlipMode flip_mode = 3;
 * @return {!proto.rv.analytics.TriggerMediaInformation.VisualMedia.FlipMode}
 */
proto.rv.analytics.TriggerMediaInformation.VisualMedia.prototype.getFlipMode = function() {
  return /** @type {!proto.rv.analytics.TriggerMediaInformation.VisualMedia.FlipMode} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.rv.analytics.TriggerMediaInformation.VisualMedia.FlipMode} value
 * @return {!proto.rv.analytics.TriggerMediaInformation.VisualMedia} returns this
 */
proto.rv.analytics.TriggerMediaInformation.VisualMedia.prototype.setFlipMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional NativeRotation native_rotation = 4;
 * @return {!proto.rv.analytics.TriggerMediaInformation.VisualMedia.NativeRotation}
 */
proto.rv.analytics.TriggerMediaInformation.VisualMedia.prototype.getNativeRotation = function() {
  return /** @type {!proto.rv.analytics.TriggerMediaInformation.VisualMedia.NativeRotation} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.rv.analytics.TriggerMediaInformation.VisualMedia.NativeRotation} value
 * @return {!proto.rv.analytics.TriggerMediaInformation.VisualMedia} returns this
 */
proto.rv.analytics.TriggerMediaInformation.VisualMedia.prototype.setNativeRotation = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional Size resolution = 5;
 * @return {?proto.rv.analytics.TriggerMediaInformation.VisualMedia.Size}
 */
proto.rv.analytics.TriggerMediaInformation.VisualMedia.prototype.getResolution = function() {
  return /** @type{?proto.rv.analytics.TriggerMediaInformation.VisualMedia.Size} */ (
    jspb.Message.getWrapperField(this, proto.rv.analytics.TriggerMediaInformation.VisualMedia.Size, 5));
};


/**
 * @param {?proto.rv.analytics.TriggerMediaInformation.VisualMedia.Size|undefined} value
 * @return {!proto.rv.analytics.TriggerMediaInformation.VisualMedia} returns this
*/
proto.rv.analytics.TriggerMediaInformation.VisualMedia.prototype.setResolution = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.analytics.TriggerMediaInformation.VisualMedia} returns this
 */
proto.rv.analytics.TriggerMediaInformation.VisualMedia.prototype.clearResolution = function() {
  return this.setResolution(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.analytics.TriggerMediaInformation.VisualMedia.prototype.hasResolution = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 enabled_effects_count = 6;
 * @return {number}
 */
proto.rv.analytics.TriggerMediaInformation.VisualMedia.prototype.getEnabledEffectsCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.analytics.TriggerMediaInformation.VisualMedia} returns this
 */
proto.rv.analytics.TriggerMediaInformation.VisualMedia.prototype.setEnabledEffectsCount = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bool has_effect_preset = 7;
 * @return {boolean}
 */
proto.rv.analytics.TriggerMediaInformation.VisualMedia.prototype.getHasEffectPreset = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.analytics.TriggerMediaInformation.VisualMedia} returns this
 */
proto.rv.analytics.TriggerMediaInformation.VisualMedia.prototype.setHasEffectPreset = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional Transition transition = 8;
 * @return {?proto.rv.analytics.TriggerMediaInformation.Transition}
 */
proto.rv.analytics.TriggerMediaInformation.VisualMedia.prototype.getTransition = function() {
  return /** @type{?proto.rv.analytics.TriggerMediaInformation.Transition} */ (
    jspb.Message.getWrapperField(this, proto.rv.analytics.TriggerMediaInformation.Transition, 8));
};


/**
 * @param {?proto.rv.analytics.TriggerMediaInformation.Transition|undefined} value
 * @return {!proto.rv.analytics.TriggerMediaInformation.VisualMedia} returns this
*/
proto.rv.analytics.TriggerMediaInformation.VisualMedia.prototype.setTransition = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.analytics.TriggerMediaInformation.VisualMedia} returns this
 */
proto.rv.analytics.TriggerMediaInformation.VisualMedia.prototype.clearTransition = function() {
  return this.setTransition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.analytics.TriggerMediaInformation.VisualMedia.prototype.hasTransition = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.analytics.TriggerMediaInformation.Transport.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.analytics.TriggerMediaInformation.Transport.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.analytics.TriggerMediaInformation.Transport} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.analytics.TriggerMediaInformation.Transport.toObject = function(includeInstance, msg) {
  var f, obj = {
sourceDurationRange: jspb.Message.getFieldWithDefault(msg, 1, 0),
hasAudioRampIn: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
hasAudioRampOut: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
hasInPoint: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
hasOutPoint: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
playRate: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
playbackMarkerCount: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.analytics.TriggerMediaInformation.Transport}
 */
proto.rv.analytics.TriggerMediaInformation.Transport.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.analytics.TriggerMediaInformation.Transport;
  return proto.rv.analytics.TriggerMediaInformation.Transport.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.analytics.TriggerMediaInformation.Transport} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.analytics.TriggerMediaInformation.Transport}
 */
proto.rv.analytics.TriggerMediaInformation.Transport.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.rv.analytics.TriggerMediaInformation.Transport.DurationRange} */ (reader.readEnum());
      msg.setSourceDurationRange(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasAudioRampIn(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasAudioRampOut(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasInPoint(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasOutPoint(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPlayRate(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPlaybackMarkerCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.analytics.TriggerMediaInformation.Transport.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.analytics.TriggerMediaInformation.Transport.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.analytics.TriggerMediaInformation.Transport} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.analytics.TriggerMediaInformation.Transport.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourceDurationRange();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getHasAudioRampIn();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getHasAudioRampOut();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getHasInPoint();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getHasOutPoint();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getPlayRate();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getPlaybackMarkerCount();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.rv.analytics.TriggerMediaInformation.Transport.DurationRange = {
  DURATION_UNDER_10S: 0,
  DURATION_10S_TO_30S: 1,
  DURATION_30S_TO_60S: 2,
  DURATION_1M_TO_5M: 3,
  DURATION_5M_TO_10M: 4,
  DURATION_10M_TO_30M: 5,
  DURATION_30M_TO_60M: 6,
  DURATION_1H_TO_2H: 7,
  DURATION_OVER_2H: 8
};

/**
 * optional DurationRange source_duration_range = 1;
 * @return {!proto.rv.analytics.TriggerMediaInformation.Transport.DurationRange}
 */
proto.rv.analytics.TriggerMediaInformation.Transport.prototype.getSourceDurationRange = function() {
  return /** @type {!proto.rv.analytics.TriggerMediaInformation.Transport.DurationRange} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.rv.analytics.TriggerMediaInformation.Transport.DurationRange} value
 * @return {!proto.rv.analytics.TriggerMediaInformation.Transport} returns this
 */
proto.rv.analytics.TriggerMediaInformation.Transport.prototype.setSourceDurationRange = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bool has_audio_ramp_in = 2;
 * @return {boolean}
 */
proto.rv.analytics.TriggerMediaInformation.Transport.prototype.getHasAudioRampIn = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.analytics.TriggerMediaInformation.Transport} returns this
 */
proto.rv.analytics.TriggerMediaInformation.Transport.prototype.setHasAudioRampIn = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool has_audio_ramp_out = 3;
 * @return {boolean}
 */
proto.rv.analytics.TriggerMediaInformation.Transport.prototype.getHasAudioRampOut = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.analytics.TriggerMediaInformation.Transport} returns this
 */
proto.rv.analytics.TriggerMediaInformation.Transport.prototype.setHasAudioRampOut = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool has_in_point = 4;
 * @return {boolean}
 */
proto.rv.analytics.TriggerMediaInformation.Transport.prototype.getHasInPoint = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.analytics.TriggerMediaInformation.Transport} returns this
 */
proto.rv.analytics.TriggerMediaInformation.Transport.prototype.setHasInPoint = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool has_out_point = 5;
 * @return {boolean}
 */
proto.rv.analytics.TriggerMediaInformation.Transport.prototype.getHasOutPoint = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.analytics.TriggerMediaInformation.Transport} returns this
 */
proto.rv.analytics.TriggerMediaInformation.Transport.prototype.setHasOutPoint = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional double play_rate = 6;
 * @return {number}
 */
proto.rv.analytics.TriggerMediaInformation.Transport.prototype.getPlayRate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.analytics.TriggerMediaInformation.Transport} returns this
 */
proto.rv.analytics.TriggerMediaInformation.Transport.prototype.setPlayRate = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional uint32 playback_marker_count = 7;
 * @return {number}
 */
proto.rv.analytics.TriggerMediaInformation.Transport.prototype.getPlaybackMarkerCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.analytics.TriggerMediaInformation.Transport} returns this
 */
proto.rv.analytics.TriggerMediaInformation.Transport.prototype.setPlaybackMarkerCount = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.analytics.TriggerMediaInformation.Video.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.analytics.TriggerMediaInformation.Video.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.analytics.TriggerMediaInformation.Video} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.analytics.TriggerMediaInformation.Video.toObject = function(includeInstance, msg) {
  var f, obj = {
visualMedia: (f = msg.getVisualMedia()) && proto.rv.analytics.TriggerMediaInformation.VisualMedia.toObject(includeInstance, f),
playbackBehavior: jspb.Message.getFieldWithDefault(msg, 8, 0),
completionTarget: jspb.Message.getFieldWithDefault(msg, 9, 0),
softLoopEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
softLoopDuration: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0),
frameRate: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.0),
audioChannelCount: jspb.Message.getFieldWithDefault(msg, 13, 0),
transport: (f = msg.getTransport()) && proto.rv.analytics.TriggerMediaInformation.Transport.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.analytics.TriggerMediaInformation.Video}
 */
proto.rv.analytics.TriggerMediaInformation.Video.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.analytics.TriggerMediaInformation.Video;
  return proto.rv.analytics.TriggerMediaInformation.Video.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.analytics.TriggerMediaInformation.Video} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.analytics.TriggerMediaInformation.Video}
 */
proto.rv.analytics.TriggerMediaInformation.Video.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 7:
      var value = new proto.rv.analytics.TriggerMediaInformation.VisualMedia;
      reader.readMessage(value,proto.rv.analytics.TriggerMediaInformation.VisualMedia.deserializeBinaryFromReader);
      msg.setVisualMedia(value);
      break;
    case 8:
      var value = /** @type {!proto.rv.analytics.TriggerMediaInformation.Video.PlaybackBehavior} */ (reader.readEnum());
      msg.setPlaybackBehavior(value);
      break;
    case 9:
      var value = /** @type {!proto.rv.analytics.TriggerMediaInformation.CompletionTarget} */ (reader.readEnum());
      msg.setCompletionTarget(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSoftLoopEnabled(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSoftLoopDuration(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFrameRate(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAudioChannelCount(value);
      break;
    case 14:
      var value = new proto.rv.analytics.TriggerMediaInformation.Transport;
      reader.readMessage(value,proto.rv.analytics.TriggerMediaInformation.Transport.deserializeBinaryFromReader);
      msg.setTransport(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.analytics.TriggerMediaInformation.Video.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.analytics.TriggerMediaInformation.Video.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.analytics.TriggerMediaInformation.Video} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.analytics.TriggerMediaInformation.Video.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVisualMedia();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.rv.analytics.TriggerMediaInformation.VisualMedia.serializeBinaryToWriter
    );
  }
  f = message.getPlaybackBehavior();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getCompletionTarget();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getSoftLoopEnabled();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getSoftLoopDuration();
  if (f !== 0.0) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = message.getFrameRate();
  if (f !== 0.0) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = message.getAudioChannelCount();
  if (f !== 0) {
    writer.writeUint32(
      13,
      f
    );
  }
  f = message.getTransport();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.rv.analytics.TriggerMediaInformation.Transport.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.rv.analytics.TriggerMediaInformation.Video.PlaybackBehavior = {
  PLAYBACK_BEHAVIOR_STOP: 0,
  PLAYBACK_BEHAVIOR_LOOP: 1,
  PLAYBACK_BEHAVIOR_LOOP_FOR_PLAY_COUNT: 2,
  PLAYBACK_BEHAVIOR_LOOP_FOR_TIME: 3
};

/**
 * optional VisualMedia visual_media = 7;
 * @return {?proto.rv.analytics.TriggerMediaInformation.VisualMedia}
 */
proto.rv.analytics.TriggerMediaInformation.Video.prototype.getVisualMedia = function() {
  return /** @type{?proto.rv.analytics.TriggerMediaInformation.VisualMedia} */ (
    jspb.Message.getWrapperField(this, proto.rv.analytics.TriggerMediaInformation.VisualMedia, 7));
};


/**
 * @param {?proto.rv.analytics.TriggerMediaInformation.VisualMedia|undefined} value
 * @return {!proto.rv.analytics.TriggerMediaInformation.Video} returns this
*/
proto.rv.analytics.TriggerMediaInformation.Video.prototype.setVisualMedia = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.analytics.TriggerMediaInformation.Video} returns this
 */
proto.rv.analytics.TriggerMediaInformation.Video.prototype.clearVisualMedia = function() {
  return this.setVisualMedia(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.analytics.TriggerMediaInformation.Video.prototype.hasVisualMedia = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional PlaybackBehavior playback_behavior = 8;
 * @return {!proto.rv.analytics.TriggerMediaInformation.Video.PlaybackBehavior}
 */
proto.rv.analytics.TriggerMediaInformation.Video.prototype.getPlaybackBehavior = function() {
  return /** @type {!proto.rv.analytics.TriggerMediaInformation.Video.PlaybackBehavior} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.rv.analytics.TriggerMediaInformation.Video.PlaybackBehavior} value
 * @return {!proto.rv.analytics.TriggerMediaInformation.Video} returns this
 */
proto.rv.analytics.TriggerMediaInformation.Video.prototype.setPlaybackBehavior = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional CompletionTarget completion_target = 9;
 * @return {!proto.rv.analytics.TriggerMediaInformation.CompletionTarget}
 */
proto.rv.analytics.TriggerMediaInformation.Video.prototype.getCompletionTarget = function() {
  return /** @type {!proto.rv.analytics.TriggerMediaInformation.CompletionTarget} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.rv.analytics.TriggerMediaInformation.CompletionTarget} value
 * @return {!proto.rv.analytics.TriggerMediaInformation.Video} returns this
 */
proto.rv.analytics.TriggerMediaInformation.Video.prototype.setCompletionTarget = function(value) {
  return jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional bool soft_loop_enabled = 10;
 * @return {boolean}
 */
proto.rv.analytics.TriggerMediaInformation.Video.prototype.getSoftLoopEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.analytics.TriggerMediaInformation.Video} returns this
 */
proto.rv.analytics.TriggerMediaInformation.Video.prototype.setSoftLoopEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional double soft_loop_duration = 11;
 * @return {number}
 */
proto.rv.analytics.TriggerMediaInformation.Video.prototype.getSoftLoopDuration = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.analytics.TriggerMediaInformation.Video} returns this
 */
proto.rv.analytics.TriggerMediaInformation.Video.prototype.setSoftLoopDuration = function(value) {
  return jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional double frame_rate = 12;
 * @return {number}
 */
proto.rv.analytics.TriggerMediaInformation.Video.prototype.getFrameRate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.analytics.TriggerMediaInformation.Video} returns this
 */
proto.rv.analytics.TriggerMediaInformation.Video.prototype.setFrameRate = function(value) {
  return jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional uint32 audio_channel_count = 13;
 * @return {number}
 */
proto.rv.analytics.TriggerMediaInformation.Video.prototype.getAudioChannelCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.analytics.TriggerMediaInformation.Video} returns this
 */
proto.rv.analytics.TriggerMediaInformation.Video.prototype.setAudioChannelCount = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional Transport transport = 14;
 * @return {?proto.rv.analytics.TriggerMediaInformation.Transport}
 */
proto.rv.analytics.TriggerMediaInformation.Video.prototype.getTransport = function() {
  return /** @type{?proto.rv.analytics.TriggerMediaInformation.Transport} */ (
    jspb.Message.getWrapperField(this, proto.rv.analytics.TriggerMediaInformation.Transport, 14));
};


/**
 * @param {?proto.rv.analytics.TriggerMediaInformation.Transport|undefined} value
 * @return {!proto.rv.analytics.TriggerMediaInformation.Video} returns this
*/
proto.rv.analytics.TriggerMediaInformation.Video.prototype.setTransport = function(value) {
  return jspb.Message.setWrapperField(this, 14, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.analytics.TriggerMediaInformation.Video} returns this
 */
proto.rv.analytics.TriggerMediaInformation.Video.prototype.clearTransport = function() {
  return this.setTransport(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.analytics.TriggerMediaInformation.Video.prototype.hasTransport = function() {
  return jspb.Message.getField(this, 14) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.analytics.TriggerMediaInformation.Audio.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.analytics.TriggerMediaInformation.Audio.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.analytics.TriggerMediaInformation.Audio} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.analytics.TriggerMediaInformation.Audio.toObject = function(includeInstance, msg) {
  var f, obj = {
behavior: jspb.Message.getFieldWithDefault(msg, 1, 0),
playbackBehavior: jspb.Message.getFieldWithDefault(msg, 2, 0),
transition: (f = msg.getTransition()) && proto.rv.analytics.TriggerMediaInformation.Transition.toObject(includeInstance, f),
audioChannelCount: jspb.Message.getFieldWithDefault(msg, 4, 0),
transport: (f = msg.getTransport()) && proto.rv.analytics.TriggerMediaInformation.Transport.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.analytics.TriggerMediaInformation.Audio}
 */
proto.rv.analytics.TriggerMediaInformation.Audio.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.analytics.TriggerMediaInformation.Audio;
  return proto.rv.analytics.TriggerMediaInformation.Audio.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.analytics.TriggerMediaInformation.Audio} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.analytics.TriggerMediaInformation.Audio}
 */
proto.rv.analytics.TriggerMediaInformation.Audio.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.rv.analytics.TriggerMediaInformation.Audio.Behavior} */ (reader.readEnum());
      msg.setBehavior(value);
      break;
    case 2:
      var value = /** @type {!proto.rv.analytics.TriggerMediaInformation.Audio.PlaybackBehavior} */ (reader.readEnum());
      msg.setPlaybackBehavior(value);
      break;
    case 3:
      var value = new proto.rv.analytics.TriggerMediaInformation.Transition;
      reader.readMessage(value,proto.rv.analytics.TriggerMediaInformation.Transition.deserializeBinaryFromReader);
      msg.setTransition(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAudioChannelCount(value);
      break;
    case 5:
      var value = new proto.rv.analytics.TriggerMediaInformation.Transport;
      reader.readMessage(value,proto.rv.analytics.TriggerMediaInformation.Transport.deserializeBinaryFromReader);
      msg.setTransport(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.analytics.TriggerMediaInformation.Audio.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.analytics.TriggerMediaInformation.Audio.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.analytics.TriggerMediaInformation.Audio} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.analytics.TriggerMediaInformation.Audio.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBehavior();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPlaybackBehavior();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getTransition();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rv.analytics.TriggerMediaInformation.Transition.serializeBinaryToWriter
    );
  }
  f = message.getAudioChannelCount();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getTransport();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.rv.analytics.TriggerMediaInformation.Transport.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.rv.analytics.TriggerMediaInformation.Audio.Behavior = {
  BEHAVIOR_TUNE: 0,
  BEHAVIOR_SOUND: 1
};

/**
 * @enum {number}
 */
proto.rv.analytics.TriggerMediaInformation.Audio.PlaybackBehavior = {
  PLAYBACK_BEHAVIOR_STOP: 0,
  PLAYBACK_BEHAVIOR_LOOP: 1,
  PLAYBACK_BEHAVIOR_NEXT: 2
};

/**
 * optional Behavior behavior = 1;
 * @return {!proto.rv.analytics.TriggerMediaInformation.Audio.Behavior}
 */
proto.rv.analytics.TriggerMediaInformation.Audio.prototype.getBehavior = function() {
  return /** @type {!proto.rv.analytics.TriggerMediaInformation.Audio.Behavior} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.rv.analytics.TriggerMediaInformation.Audio.Behavior} value
 * @return {!proto.rv.analytics.TriggerMediaInformation.Audio} returns this
 */
proto.rv.analytics.TriggerMediaInformation.Audio.prototype.setBehavior = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional PlaybackBehavior playback_behavior = 2;
 * @return {!proto.rv.analytics.TriggerMediaInformation.Audio.PlaybackBehavior}
 */
proto.rv.analytics.TriggerMediaInformation.Audio.prototype.getPlaybackBehavior = function() {
  return /** @type {!proto.rv.analytics.TriggerMediaInformation.Audio.PlaybackBehavior} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.rv.analytics.TriggerMediaInformation.Audio.PlaybackBehavior} value
 * @return {!proto.rv.analytics.TriggerMediaInformation.Audio} returns this
 */
proto.rv.analytics.TriggerMediaInformation.Audio.prototype.setPlaybackBehavior = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Transition transition = 3;
 * @return {?proto.rv.analytics.TriggerMediaInformation.Transition}
 */
proto.rv.analytics.TriggerMediaInformation.Audio.prototype.getTransition = function() {
  return /** @type{?proto.rv.analytics.TriggerMediaInformation.Transition} */ (
    jspb.Message.getWrapperField(this, proto.rv.analytics.TriggerMediaInformation.Transition, 3));
};


/**
 * @param {?proto.rv.analytics.TriggerMediaInformation.Transition|undefined} value
 * @return {!proto.rv.analytics.TriggerMediaInformation.Audio} returns this
*/
proto.rv.analytics.TriggerMediaInformation.Audio.prototype.setTransition = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.analytics.TriggerMediaInformation.Audio} returns this
 */
proto.rv.analytics.TriggerMediaInformation.Audio.prototype.clearTransition = function() {
  return this.setTransition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.analytics.TriggerMediaInformation.Audio.prototype.hasTransition = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 audio_channel_count = 4;
 * @return {number}
 */
proto.rv.analytics.TriggerMediaInformation.Audio.prototype.getAudioChannelCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.analytics.TriggerMediaInformation.Audio} returns this
 */
proto.rv.analytics.TriggerMediaInformation.Audio.prototype.setAudioChannelCount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional Transport transport = 5;
 * @return {?proto.rv.analytics.TriggerMediaInformation.Transport}
 */
proto.rv.analytics.TriggerMediaInformation.Audio.prototype.getTransport = function() {
  return /** @type{?proto.rv.analytics.TriggerMediaInformation.Transport} */ (
    jspb.Message.getWrapperField(this, proto.rv.analytics.TriggerMediaInformation.Transport, 5));
};


/**
 * @param {?proto.rv.analytics.TriggerMediaInformation.Transport|undefined} value
 * @return {!proto.rv.analytics.TriggerMediaInformation.Audio} returns this
*/
proto.rv.analytics.TriggerMediaInformation.Audio.prototype.setTransport = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.analytics.TriggerMediaInformation.Audio} returns this
 */
proto.rv.analytics.TriggerMediaInformation.Audio.prototype.clearTransport = function() {
  return this.setTransport(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.analytics.TriggerMediaInformation.Audio.prototype.hasTransport = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.analytics.TriggerMediaInformation.Image.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.analytics.TriggerMediaInformation.Image.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.analytics.TriggerMediaInformation.Image} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.analytics.TriggerMediaInformation.Image.toObject = function(includeInstance, msg) {
  var f, obj = {
visualMedia: (f = msg.getVisualMedia()) && proto.rv.analytics.TriggerMediaInformation.VisualMedia.toObject(includeInstance, f),
transition: (f = msg.getTransition()) && proto.rv.analytics.TriggerMediaInformation.Transition.toObject(includeInstance, f),
completionTarget: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.analytics.TriggerMediaInformation.Image}
 */
proto.rv.analytics.TriggerMediaInformation.Image.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.analytics.TriggerMediaInformation.Image;
  return proto.rv.analytics.TriggerMediaInformation.Image.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.analytics.TriggerMediaInformation.Image} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.analytics.TriggerMediaInformation.Image}
 */
proto.rv.analytics.TriggerMediaInformation.Image.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.analytics.TriggerMediaInformation.VisualMedia;
      reader.readMessage(value,proto.rv.analytics.TriggerMediaInformation.VisualMedia.deserializeBinaryFromReader);
      msg.setVisualMedia(value);
      break;
    case 2:
      var value = new proto.rv.analytics.TriggerMediaInformation.Transition;
      reader.readMessage(value,proto.rv.analytics.TriggerMediaInformation.Transition.deserializeBinaryFromReader);
      msg.setTransition(value);
      break;
    case 3:
      var value = /** @type {!proto.rv.analytics.TriggerMediaInformation.CompletionTarget} */ (reader.readEnum());
      msg.setCompletionTarget(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.analytics.TriggerMediaInformation.Image.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.analytics.TriggerMediaInformation.Image.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.analytics.TriggerMediaInformation.Image} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.analytics.TriggerMediaInformation.Image.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVisualMedia();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.analytics.TriggerMediaInformation.VisualMedia.serializeBinaryToWriter
    );
  }
  f = message.getTransition();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rv.analytics.TriggerMediaInformation.Transition.serializeBinaryToWriter
    );
  }
  f = message.getCompletionTarget();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional VisualMedia visual_media = 1;
 * @return {?proto.rv.analytics.TriggerMediaInformation.VisualMedia}
 */
proto.rv.analytics.TriggerMediaInformation.Image.prototype.getVisualMedia = function() {
  return /** @type{?proto.rv.analytics.TriggerMediaInformation.VisualMedia} */ (
    jspb.Message.getWrapperField(this, proto.rv.analytics.TriggerMediaInformation.VisualMedia, 1));
};


/**
 * @param {?proto.rv.analytics.TriggerMediaInformation.VisualMedia|undefined} value
 * @return {!proto.rv.analytics.TriggerMediaInformation.Image} returns this
*/
proto.rv.analytics.TriggerMediaInformation.Image.prototype.setVisualMedia = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.analytics.TriggerMediaInformation.Image} returns this
 */
proto.rv.analytics.TriggerMediaInformation.Image.prototype.clearVisualMedia = function() {
  return this.setVisualMedia(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.analytics.TriggerMediaInformation.Image.prototype.hasVisualMedia = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Transition transition = 2;
 * @return {?proto.rv.analytics.TriggerMediaInformation.Transition}
 */
proto.rv.analytics.TriggerMediaInformation.Image.prototype.getTransition = function() {
  return /** @type{?proto.rv.analytics.TriggerMediaInformation.Transition} */ (
    jspb.Message.getWrapperField(this, proto.rv.analytics.TriggerMediaInformation.Transition, 2));
};


/**
 * @param {?proto.rv.analytics.TriggerMediaInformation.Transition|undefined} value
 * @return {!proto.rv.analytics.TriggerMediaInformation.Image} returns this
*/
proto.rv.analytics.TriggerMediaInformation.Image.prototype.setTransition = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.analytics.TriggerMediaInformation.Image} returns this
 */
proto.rv.analytics.TriggerMediaInformation.Image.prototype.clearTransition = function() {
  return this.setTransition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.analytics.TriggerMediaInformation.Image.prototype.hasTransition = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CompletionTarget completion_target = 3;
 * @return {!proto.rv.analytics.TriggerMediaInformation.CompletionTarget}
 */
proto.rv.analytics.TriggerMediaInformation.Image.prototype.getCompletionTarget = function() {
  return /** @type {!proto.rv.analytics.TriggerMediaInformation.CompletionTarget} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.rv.analytics.TriggerMediaInformation.CompletionTarget} value
 * @return {!proto.rv.analytics.TriggerMediaInformation.Image} returns this
 */
proto.rv.analytics.TriggerMediaInformation.Image.prototype.setCompletionTarget = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.analytics.TriggerMediaInformation.LiveVideo.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.analytics.TriggerMediaInformation.LiveVideo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.analytics.TriggerMediaInformation.LiveVideo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.analytics.TriggerMediaInformation.LiveVideo.toObject = function(includeInstance, msg) {
  var f, obj = {
visualMedia: (f = msg.getVisualMedia()) && proto.rv.analytics.TriggerMediaInformation.VisualMedia.toObject(includeInstance, f),
frameRate: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
audioChannelCount: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.analytics.TriggerMediaInformation.LiveVideo}
 */
proto.rv.analytics.TriggerMediaInformation.LiveVideo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.analytics.TriggerMediaInformation.LiveVideo;
  return proto.rv.analytics.TriggerMediaInformation.LiveVideo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.analytics.TriggerMediaInformation.LiveVideo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.analytics.TriggerMediaInformation.LiveVideo}
 */
proto.rv.analytics.TriggerMediaInformation.LiveVideo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.analytics.TriggerMediaInformation.VisualMedia;
      reader.readMessage(value,proto.rv.analytics.TriggerMediaInformation.VisualMedia.deserializeBinaryFromReader);
      msg.setVisualMedia(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFrameRate(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAudioChannelCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.analytics.TriggerMediaInformation.LiveVideo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.analytics.TriggerMediaInformation.LiveVideo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.analytics.TriggerMediaInformation.LiveVideo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.analytics.TriggerMediaInformation.LiveVideo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVisualMedia();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.analytics.TriggerMediaInformation.VisualMedia.serializeBinaryToWriter
    );
  }
  f = message.getFrameRate();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getAudioChannelCount();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional VisualMedia visual_media = 1;
 * @return {?proto.rv.analytics.TriggerMediaInformation.VisualMedia}
 */
proto.rv.analytics.TriggerMediaInformation.LiveVideo.prototype.getVisualMedia = function() {
  return /** @type{?proto.rv.analytics.TriggerMediaInformation.VisualMedia} */ (
    jspb.Message.getWrapperField(this, proto.rv.analytics.TriggerMediaInformation.VisualMedia, 1));
};


/**
 * @param {?proto.rv.analytics.TriggerMediaInformation.VisualMedia|undefined} value
 * @return {!proto.rv.analytics.TriggerMediaInformation.LiveVideo} returns this
*/
proto.rv.analytics.TriggerMediaInformation.LiveVideo.prototype.setVisualMedia = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.analytics.TriggerMediaInformation.LiveVideo} returns this
 */
proto.rv.analytics.TriggerMediaInformation.LiveVideo.prototype.clearVisualMedia = function() {
  return this.setVisualMedia(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.analytics.TriggerMediaInformation.LiveVideo.prototype.hasVisualMedia = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double frame_rate = 2;
 * @return {number}
 */
proto.rv.analytics.TriggerMediaInformation.LiveVideo.prototype.getFrameRate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.analytics.TriggerMediaInformation.LiveVideo} returns this
 */
proto.rv.analytics.TriggerMediaInformation.LiveVideo.prototype.setFrameRate = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional uint32 audio_channel_count = 3;
 * @return {number}
 */
proto.rv.analytics.TriggerMediaInformation.LiveVideo.prototype.getAudioChannelCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.analytics.TriggerMediaInformation.LiveVideo} returns this
 */
proto.rv.analytics.TriggerMediaInformation.LiveVideo.prototype.setAudioChannelCount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional SourceType source_type = 1;
 * @return {!proto.rv.analytics.TriggerMediaInformation.SourceType}
 */
proto.rv.analytics.TriggerMediaInformation.prototype.getSourceType = function() {
  return /** @type {!proto.rv.analytics.TriggerMediaInformation.SourceType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.rv.analytics.TriggerMediaInformation.SourceType} value
 * @return {!proto.rv.analytics.TriggerMediaInformation} returns this
 */
proto.rv.analytics.TriggerMediaInformation.prototype.setSourceType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Video video = 2;
 * @return {?proto.rv.analytics.TriggerMediaInformation.Video}
 */
proto.rv.analytics.TriggerMediaInformation.prototype.getVideo = function() {
  return /** @type{?proto.rv.analytics.TriggerMediaInformation.Video} */ (
    jspb.Message.getWrapperField(this, proto.rv.analytics.TriggerMediaInformation.Video, 2));
};


/**
 * @param {?proto.rv.analytics.TriggerMediaInformation.Video|undefined} value
 * @return {!proto.rv.analytics.TriggerMediaInformation} returns this
*/
proto.rv.analytics.TriggerMediaInformation.prototype.setVideo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.rv.analytics.TriggerMediaInformation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.analytics.TriggerMediaInformation} returns this
 */
proto.rv.analytics.TriggerMediaInformation.prototype.clearVideo = function() {
  return this.setVideo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.analytics.TriggerMediaInformation.prototype.hasVideo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Image image = 3;
 * @return {?proto.rv.analytics.TriggerMediaInformation.Image}
 */
proto.rv.analytics.TriggerMediaInformation.prototype.getImage = function() {
  return /** @type{?proto.rv.analytics.TriggerMediaInformation.Image} */ (
    jspb.Message.getWrapperField(this, proto.rv.analytics.TriggerMediaInformation.Image, 3));
};


/**
 * @param {?proto.rv.analytics.TriggerMediaInformation.Image|undefined} value
 * @return {!proto.rv.analytics.TriggerMediaInformation} returns this
*/
proto.rv.analytics.TriggerMediaInformation.prototype.setImage = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.rv.analytics.TriggerMediaInformation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.analytics.TriggerMediaInformation} returns this
 */
proto.rv.analytics.TriggerMediaInformation.prototype.clearImage = function() {
  return this.setImage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.analytics.TriggerMediaInformation.prototype.hasImage = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Audio audio = 4;
 * @return {?proto.rv.analytics.TriggerMediaInformation.Audio}
 */
proto.rv.analytics.TriggerMediaInformation.prototype.getAudio = function() {
  return /** @type{?proto.rv.analytics.TriggerMediaInformation.Audio} */ (
    jspb.Message.getWrapperField(this, proto.rv.analytics.TriggerMediaInformation.Audio, 4));
};


/**
 * @param {?proto.rv.analytics.TriggerMediaInformation.Audio|undefined} value
 * @return {!proto.rv.analytics.TriggerMediaInformation} returns this
*/
proto.rv.analytics.TriggerMediaInformation.prototype.setAudio = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.rv.analytics.TriggerMediaInformation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.analytics.TriggerMediaInformation} returns this
 */
proto.rv.analytics.TriggerMediaInformation.prototype.clearAudio = function() {
  return this.setAudio(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.analytics.TriggerMediaInformation.prototype.hasAudio = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional LiveVideo live_video = 5;
 * @return {?proto.rv.analytics.TriggerMediaInformation.LiveVideo}
 */
proto.rv.analytics.TriggerMediaInformation.prototype.getLiveVideo = function() {
  return /** @type{?proto.rv.analytics.TriggerMediaInformation.LiveVideo} */ (
    jspb.Message.getWrapperField(this, proto.rv.analytics.TriggerMediaInformation.LiveVideo, 5));
};


/**
 * @param {?proto.rv.analytics.TriggerMediaInformation.LiveVideo|undefined} value
 * @return {!proto.rv.analytics.TriggerMediaInformation} returns this
*/
proto.rv.analytics.TriggerMediaInformation.prototype.setLiveVideo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.rv.analytics.TriggerMediaInformation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.analytics.TriggerMediaInformation} returns this
 */
proto.rv.analytics.TriggerMediaInformation.prototype.clearLiveVideo = function() {
  return this.setLiveVideo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.analytics.TriggerMediaInformation.prototype.hasLiveVideo = function() {
  return jspb.Message.getField(this, 5) != null;
};


