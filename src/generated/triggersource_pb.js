// source: timedPlayback.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.rv.data.TriggerSource');
goog.provide('proto.rv.data.TriggerSource.Library');
goog.provide('proto.rv.data.TriggerSource.LocationCase');
goog.provide('proto.rv.data.TriggerSource.Playlist');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.rv.data.UUID');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TriggerSource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rv.data.TriggerSource.oneofGroups_);
};
goog.inherits(proto.rv.data.TriggerSource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TriggerSource.displayName = 'proto.rv.data.TriggerSource';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TriggerSource.Library = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.TriggerSource.Library, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TriggerSource.Library.displayName = 'proto.rv.data.TriggerSource.Library';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TriggerSource.Playlist = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.TriggerSource.Playlist, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TriggerSource.Playlist.displayName = 'proto.rv.data.TriggerSource.Playlist';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rv.data.TriggerSource.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.rv.data.TriggerSource.LocationCase = {
  LOCATION_NOT_SET: 0,
  LIBRARY_LOCATION: 1,
  PLAYLIST_LOCATION: 2,
  MEDIA_PLAYLIST_LOCATION: 3,
  AUDIO_PLAYLIST_LOCATION: 4
};

/**
 * @return {proto.rv.data.TriggerSource.LocationCase}
 */
proto.rv.data.TriggerSource.prototype.getLocationCase = function() {
  return /** @type {proto.rv.data.TriggerSource.LocationCase} */(jspb.Message.computeOneofCase(this, proto.rv.data.TriggerSource.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TriggerSource.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TriggerSource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TriggerSource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TriggerSource.toObject = function(includeInstance, msg) {
  var f, obj = {
libraryLocation: (f = msg.getLibraryLocation()) && proto.rv.data.TriggerSource.Library.toObject(includeInstance, f),
playlistLocation: (f = msg.getPlaylistLocation()) && proto.rv.data.TriggerSource.Playlist.toObject(includeInstance, f),
mediaPlaylistLocation: (f = msg.getMediaPlaylistLocation()) && proto.rv.data.TriggerSource.Playlist.toObject(includeInstance, f),
audioPlaylistLocation: (f = msg.getAudioPlaylistLocation()) && proto.rv.data.TriggerSource.Playlist.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TriggerSource}
 */
proto.rv.data.TriggerSource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TriggerSource;
  return proto.rv.data.TriggerSource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TriggerSource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TriggerSource}
 */
proto.rv.data.TriggerSource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.TriggerSource.Library;
      reader.readMessage(value,proto.rv.data.TriggerSource.Library.deserializeBinaryFromReader);
      msg.setLibraryLocation(value);
      break;
    case 2:
      var value = new proto.rv.data.TriggerSource.Playlist;
      reader.readMessage(value,proto.rv.data.TriggerSource.Playlist.deserializeBinaryFromReader);
      msg.setPlaylistLocation(value);
      break;
    case 3:
      var value = new proto.rv.data.TriggerSource.Playlist;
      reader.readMessage(value,proto.rv.data.TriggerSource.Playlist.deserializeBinaryFromReader);
      msg.setMediaPlaylistLocation(value);
      break;
    case 4:
      var value = new proto.rv.data.TriggerSource.Playlist;
      reader.readMessage(value,proto.rv.data.TriggerSource.Playlist.deserializeBinaryFromReader);
      msg.setAudioPlaylistLocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TriggerSource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TriggerSource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TriggerSource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TriggerSource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLibraryLocation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.TriggerSource.Library.serializeBinaryToWriter
    );
  }
  f = message.getPlaylistLocation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rv.data.TriggerSource.Playlist.serializeBinaryToWriter
    );
  }
  f = message.getMediaPlaylistLocation();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rv.data.TriggerSource.Playlist.serializeBinaryToWriter
    );
  }
  f = message.getAudioPlaylistLocation();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rv.data.TriggerSource.Playlist.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TriggerSource.Library.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TriggerSource.Library.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TriggerSource.Library} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TriggerSource.Library.toObject = function(includeInstance, msg) {
  var f, obj = {
path: jspb.Message.getFieldWithDefault(msg, 1, ""),
presentationName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TriggerSource.Library}
 */
proto.rv.data.TriggerSource.Library.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TriggerSource.Library;
  return proto.rv.data.TriggerSource.Library.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TriggerSource.Library} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TriggerSource.Library}
 */
proto.rv.data.TriggerSource.Library.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPresentationName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TriggerSource.Library.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TriggerSource.Library.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TriggerSource.Library} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TriggerSource.Library.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPresentationName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string path = 1;
 * @return {string}
 */
proto.rv.data.TriggerSource.Library.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.TriggerSource.Library} returns this
 */
proto.rv.data.TriggerSource.Library.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string presentation_name = 2;
 * @return {string}
 */
proto.rv.data.TriggerSource.Library.prototype.getPresentationName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.TriggerSource.Library} returns this
 */
proto.rv.data.TriggerSource.Library.prototype.setPresentationName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TriggerSource.Playlist.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TriggerSource.Playlist.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TriggerSource.Playlist} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TriggerSource.Playlist.toObject = function(includeInstance, msg) {
  var f, obj = {
identifier: (f = msg.getIdentifier()) && proto.rv.data.UUID.toObject(includeInstance, f),
itemIdentifier: (f = msg.getItemIdentifier()) && proto.rv.data.UUID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TriggerSource.Playlist}
 */
proto.rv.data.TriggerSource.Playlist.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TriggerSource.Playlist;
  return proto.rv.data.TriggerSource.Playlist.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TriggerSource.Playlist} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TriggerSource.Playlist}
 */
proto.rv.data.TriggerSource.Playlist.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.UUID;
      reader.readMessage(value,proto.rv.data.UUID.deserializeBinaryFromReader);
      msg.setIdentifier(value);
      break;
    case 2:
      var value = new proto.rv.data.UUID;
      reader.readMessage(value,proto.rv.data.UUID.deserializeBinaryFromReader);
      msg.setItemIdentifier(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TriggerSource.Playlist.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TriggerSource.Playlist.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TriggerSource.Playlist} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TriggerSource.Playlist.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdentifier();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.UUID.serializeBinaryToWriter
    );
  }
  f = message.getItemIdentifier();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rv.data.UUID.serializeBinaryToWriter
    );
  }
};


/**
 * optional UUID identifier = 1;
 * @return {?proto.rv.data.UUID}
 */
proto.rv.data.TriggerSource.Playlist.prototype.getIdentifier = function() {
  return /** @type{?proto.rv.data.UUID} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.UUID, 1));
};


/**
 * @param {?proto.rv.data.UUID|undefined} value
 * @return {!proto.rv.data.TriggerSource.Playlist} returns this
*/
proto.rv.data.TriggerSource.Playlist.prototype.setIdentifier = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TriggerSource.Playlist} returns this
 */
proto.rv.data.TriggerSource.Playlist.prototype.clearIdentifier = function() {
  return this.setIdentifier(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TriggerSource.Playlist.prototype.hasIdentifier = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional UUID item_identifier = 2;
 * @return {?proto.rv.data.UUID}
 */
proto.rv.data.TriggerSource.Playlist.prototype.getItemIdentifier = function() {
  return /** @type{?proto.rv.data.UUID} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.UUID, 2));
};


/**
 * @param {?proto.rv.data.UUID|undefined} value
 * @return {!proto.rv.data.TriggerSource.Playlist} returns this
*/
proto.rv.data.TriggerSource.Playlist.prototype.setItemIdentifier = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TriggerSource.Playlist} returns this
 */
proto.rv.data.TriggerSource.Playlist.prototype.clearItemIdentifier = function() {
  return this.setItemIdentifier(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TriggerSource.Playlist.prototype.hasItemIdentifier = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Library library_location = 1;
 * @return {?proto.rv.data.TriggerSource.Library}
 */
proto.rv.data.TriggerSource.prototype.getLibraryLocation = function() {
  return /** @type{?proto.rv.data.TriggerSource.Library} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TriggerSource.Library, 1));
};


/**
 * @param {?proto.rv.data.TriggerSource.Library|undefined} value
 * @return {!proto.rv.data.TriggerSource} returns this
*/
proto.rv.data.TriggerSource.prototype.setLibraryLocation = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.rv.data.TriggerSource.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TriggerSource} returns this
 */
proto.rv.data.TriggerSource.prototype.clearLibraryLocation = function() {
  return this.setLibraryLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TriggerSource.prototype.hasLibraryLocation = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Playlist playlist_location = 2;
 * @return {?proto.rv.data.TriggerSource.Playlist}
 */
proto.rv.data.TriggerSource.prototype.getPlaylistLocation = function() {
  return /** @type{?proto.rv.data.TriggerSource.Playlist} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TriggerSource.Playlist, 2));
};


/**
 * @param {?proto.rv.data.TriggerSource.Playlist|undefined} value
 * @return {!proto.rv.data.TriggerSource} returns this
*/
proto.rv.data.TriggerSource.prototype.setPlaylistLocation = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.rv.data.TriggerSource.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TriggerSource} returns this
 */
proto.rv.data.TriggerSource.prototype.clearPlaylistLocation = function() {
  return this.setPlaylistLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TriggerSource.prototype.hasPlaylistLocation = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Playlist media_playlist_location = 3;
 * @return {?proto.rv.data.TriggerSource.Playlist}
 */
proto.rv.data.TriggerSource.prototype.getMediaPlaylistLocation = function() {
  return /** @type{?proto.rv.data.TriggerSource.Playlist} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TriggerSource.Playlist, 3));
};


/**
 * @param {?proto.rv.data.TriggerSource.Playlist|undefined} value
 * @return {!proto.rv.data.TriggerSource} returns this
*/
proto.rv.data.TriggerSource.prototype.setMediaPlaylistLocation = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.rv.data.TriggerSource.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TriggerSource} returns this
 */
proto.rv.data.TriggerSource.prototype.clearMediaPlaylistLocation = function() {
  return this.setMediaPlaylistLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TriggerSource.prototype.hasMediaPlaylistLocation = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Playlist audio_playlist_location = 4;
 * @return {?proto.rv.data.TriggerSource.Playlist}
 */
proto.rv.data.TriggerSource.prototype.getAudioPlaylistLocation = function() {
  return /** @type{?proto.rv.data.TriggerSource.Playlist} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TriggerSource.Playlist, 4));
};


/**
 * @param {?proto.rv.data.TriggerSource.Playlist|undefined} value
 * @return {!proto.rv.data.TriggerSource} returns this
*/
proto.rv.data.TriggerSource.prototype.setAudioPlaylistLocation = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.rv.data.TriggerSource.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TriggerSource} returns this
 */
proto.rv.data.TriggerSource.prototype.clearAudioPlaylistLocation = function() {
  return this.setAudioPlaylistLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TriggerSource.prototype.hasAudioPlaylistLocation = function() {
  return jspb.Message.getField(this, 4) != null;
};


