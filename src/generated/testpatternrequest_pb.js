// source: proCoreTestPatterns.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.rv.data.TestPatternRequest');
goog.provide('proto.rv.data.TestPatternRequest.GetCurrentState');
goog.provide('proto.rv.data.TestPatternRequest.GetDefinitions');
goog.provide('proto.rv.data.TestPatternRequest.GetThumbnail');
goog.provide('proto.rv.data.TestPatternRequest.RequestCase');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.rv.data.TestPatternDefinition');
goog.require('proto.rv.data.TestPatternState');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TestPatternRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rv.data.TestPatternRequest.oneofGroups_);
};
goog.inherits(proto.rv.data.TestPatternRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TestPatternRequest.displayName = 'proto.rv.data.TestPatternRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TestPatternRequest.GetDefinitions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.TestPatternRequest.GetDefinitions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TestPatternRequest.GetDefinitions.displayName = 'proto.rv.data.TestPatternRequest.GetDefinitions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TestPatternRequest.GetCurrentState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.TestPatternRequest.GetCurrentState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TestPatternRequest.GetCurrentState.displayName = 'proto.rv.data.TestPatternRequest.GetCurrentState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TestPatternRequest.GetThumbnail = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.TestPatternRequest.GetThumbnail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TestPatternRequest.GetThumbnail.displayName = 'proto.rv.data.TestPatternRequest.GetThumbnail';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rv.data.TestPatternRequest.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.rv.data.TestPatternRequest.RequestCase = {
  REQUEST_NOT_SET: 0,
  GET_DEFINITIONS: 1,
  SET_CURRENT_STATE: 2,
  GET_CURRENT_STATE: 3,
  GET_THUMBNAIL: 4
};

/**
 * @return {proto.rv.data.TestPatternRequest.RequestCase}
 */
proto.rv.data.TestPatternRequest.prototype.getRequestCase = function() {
  return /** @type {proto.rv.data.TestPatternRequest.RequestCase} */(jspb.Message.computeOneofCase(this, proto.rv.data.TestPatternRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TestPatternRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TestPatternRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TestPatternRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TestPatternRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
getDefinitions: (f = msg.getGetDefinitions()) && proto.rv.data.TestPatternRequest.GetDefinitions.toObject(includeInstance, f),
setCurrentState: (f = msg.getSetCurrentState()) && proto.rv.data.TestPatternState.toObject(includeInstance, f),
getCurrentState: (f = msg.getGetCurrentState()) && proto.rv.data.TestPatternRequest.GetCurrentState.toObject(includeInstance, f),
getThumbnail: (f = msg.getGetThumbnail()) && proto.rv.data.TestPatternRequest.GetThumbnail.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TestPatternRequest}
 */
proto.rv.data.TestPatternRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TestPatternRequest;
  return proto.rv.data.TestPatternRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TestPatternRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TestPatternRequest}
 */
proto.rv.data.TestPatternRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.TestPatternRequest.GetDefinitions;
      reader.readMessage(value,proto.rv.data.TestPatternRequest.GetDefinitions.deserializeBinaryFromReader);
      msg.setGetDefinitions(value);
      break;
    case 2:
      var value = new proto.rv.data.TestPatternState;
      reader.readMessage(value,proto.rv.data.TestPatternState.deserializeBinaryFromReader);
      msg.setSetCurrentState(value);
      break;
    case 3:
      var value = new proto.rv.data.TestPatternRequest.GetCurrentState;
      reader.readMessage(value,proto.rv.data.TestPatternRequest.GetCurrentState.deserializeBinaryFromReader);
      msg.setGetCurrentState(value);
      break;
    case 4:
      var value = new proto.rv.data.TestPatternRequest.GetThumbnail;
      reader.readMessage(value,proto.rv.data.TestPatternRequest.GetThumbnail.deserializeBinaryFromReader);
      msg.setGetThumbnail(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TestPatternRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TestPatternRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TestPatternRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TestPatternRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGetDefinitions();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.TestPatternRequest.GetDefinitions.serializeBinaryToWriter
    );
  }
  f = message.getSetCurrentState();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rv.data.TestPatternState.serializeBinaryToWriter
    );
  }
  f = message.getGetCurrentState();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rv.data.TestPatternRequest.GetCurrentState.serializeBinaryToWriter
    );
  }
  f = message.getGetThumbnail();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rv.data.TestPatternRequest.GetThumbnail.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TestPatternRequest.GetDefinitions.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TestPatternRequest.GetDefinitions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TestPatternRequest.GetDefinitions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TestPatternRequest.GetDefinitions.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TestPatternRequest.GetDefinitions}
 */
proto.rv.data.TestPatternRequest.GetDefinitions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TestPatternRequest.GetDefinitions;
  return proto.rv.data.TestPatternRequest.GetDefinitions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TestPatternRequest.GetDefinitions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TestPatternRequest.GetDefinitions}
 */
proto.rv.data.TestPatternRequest.GetDefinitions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TestPatternRequest.GetDefinitions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TestPatternRequest.GetDefinitions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TestPatternRequest.GetDefinitions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TestPatternRequest.GetDefinitions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TestPatternRequest.GetCurrentState.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TestPatternRequest.GetCurrentState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TestPatternRequest.GetCurrentState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TestPatternRequest.GetCurrentState.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TestPatternRequest.GetCurrentState}
 */
proto.rv.data.TestPatternRequest.GetCurrentState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TestPatternRequest.GetCurrentState;
  return proto.rv.data.TestPatternRequest.GetCurrentState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TestPatternRequest.GetCurrentState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TestPatternRequest.GetCurrentState}
 */
proto.rv.data.TestPatternRequest.GetCurrentState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TestPatternRequest.GetCurrentState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TestPatternRequest.GetCurrentState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TestPatternRequest.GetCurrentState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TestPatternRequest.GetCurrentState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TestPatternRequest.GetThumbnail.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TestPatternRequest.GetThumbnail.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TestPatternRequest.GetThumbnail} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TestPatternRequest.GetThumbnail.toObject = function(includeInstance, msg) {
  var f, obj = {
pattern: (f = msg.getPattern()) && proto.rv.data.TestPatternDefinition.toObject(includeInstance, f),
width: jspb.Message.getFieldWithDefault(msg, 2, 0),
height: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TestPatternRequest.GetThumbnail}
 */
proto.rv.data.TestPatternRequest.GetThumbnail.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TestPatternRequest.GetThumbnail;
  return proto.rv.data.TestPatternRequest.GetThumbnail.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TestPatternRequest.GetThumbnail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TestPatternRequest.GetThumbnail}
 */
proto.rv.data.TestPatternRequest.GetThumbnail.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.TestPatternDefinition;
      reader.readMessage(value,proto.rv.data.TestPatternDefinition.deserializeBinaryFromReader);
      msg.setPattern(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWidth(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TestPatternRequest.GetThumbnail.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TestPatternRequest.GetThumbnail.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TestPatternRequest.GetThumbnail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TestPatternRequest.GetThumbnail.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPattern();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.TestPatternDefinition.serializeBinaryToWriter
    );
  }
  f = message.getWidth();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional TestPatternDefinition pattern = 1;
 * @return {?proto.rv.data.TestPatternDefinition}
 */
proto.rv.data.TestPatternRequest.GetThumbnail.prototype.getPattern = function() {
  return /** @type{?proto.rv.data.TestPatternDefinition} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TestPatternDefinition, 1));
};


/**
 * @param {?proto.rv.data.TestPatternDefinition|undefined} value
 * @return {!proto.rv.data.TestPatternRequest.GetThumbnail} returns this
*/
proto.rv.data.TestPatternRequest.GetThumbnail.prototype.setPattern = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TestPatternRequest.GetThumbnail} returns this
 */
proto.rv.data.TestPatternRequest.GetThumbnail.prototype.clearPattern = function() {
  return this.setPattern(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TestPatternRequest.GetThumbnail.prototype.hasPattern = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 width = 2;
 * @return {number}
 */
proto.rv.data.TestPatternRequest.GetThumbnail.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.TestPatternRequest.GetThumbnail} returns this
 */
proto.rv.data.TestPatternRequest.GetThumbnail.prototype.setWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 height = 3;
 * @return {number}
 */
proto.rv.data.TestPatternRequest.GetThumbnail.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.TestPatternRequest.GetThumbnail} returns this
 */
proto.rv.data.TestPatternRequest.GetThumbnail.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional GetDefinitions get_definitions = 1;
 * @return {?proto.rv.data.TestPatternRequest.GetDefinitions}
 */
proto.rv.data.TestPatternRequest.prototype.getGetDefinitions = function() {
  return /** @type{?proto.rv.data.TestPatternRequest.GetDefinitions} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TestPatternRequest.GetDefinitions, 1));
};


/**
 * @param {?proto.rv.data.TestPatternRequest.GetDefinitions|undefined} value
 * @return {!proto.rv.data.TestPatternRequest} returns this
*/
proto.rv.data.TestPatternRequest.prototype.setGetDefinitions = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.rv.data.TestPatternRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TestPatternRequest} returns this
 */
proto.rv.data.TestPatternRequest.prototype.clearGetDefinitions = function() {
  return this.setGetDefinitions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TestPatternRequest.prototype.hasGetDefinitions = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TestPatternState set_current_state = 2;
 * @return {?proto.rv.data.TestPatternState}
 */
proto.rv.data.TestPatternRequest.prototype.getSetCurrentState = function() {
  return /** @type{?proto.rv.data.TestPatternState} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TestPatternState, 2));
};


/**
 * @param {?proto.rv.data.TestPatternState|undefined} value
 * @return {!proto.rv.data.TestPatternRequest} returns this
*/
proto.rv.data.TestPatternRequest.prototype.setSetCurrentState = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.rv.data.TestPatternRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TestPatternRequest} returns this
 */
proto.rv.data.TestPatternRequest.prototype.clearSetCurrentState = function() {
  return this.setSetCurrentState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TestPatternRequest.prototype.hasSetCurrentState = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional GetCurrentState get_current_state = 3;
 * @return {?proto.rv.data.TestPatternRequest.GetCurrentState}
 */
proto.rv.data.TestPatternRequest.prototype.getGetCurrentState = function() {
  return /** @type{?proto.rv.data.TestPatternRequest.GetCurrentState} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TestPatternRequest.GetCurrentState, 3));
};


/**
 * @param {?proto.rv.data.TestPatternRequest.GetCurrentState|undefined} value
 * @return {!proto.rv.data.TestPatternRequest} returns this
*/
proto.rv.data.TestPatternRequest.prototype.setGetCurrentState = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.rv.data.TestPatternRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TestPatternRequest} returns this
 */
proto.rv.data.TestPatternRequest.prototype.clearGetCurrentState = function() {
  return this.setGetCurrentState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TestPatternRequest.prototype.hasGetCurrentState = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional GetThumbnail get_thumbnail = 4;
 * @return {?proto.rv.data.TestPatternRequest.GetThumbnail}
 */
proto.rv.data.TestPatternRequest.prototype.getGetThumbnail = function() {
  return /** @type{?proto.rv.data.TestPatternRequest.GetThumbnail} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TestPatternRequest.GetThumbnail, 4));
};


/**
 * @param {?proto.rv.data.TestPatternRequest.GetThumbnail|undefined} value
 * @return {!proto.rv.data.TestPatternRequest} returns this
*/
proto.rv.data.TestPatternRequest.prototype.setGetThumbnail = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.rv.data.TestPatternRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TestPatternRequest} returns this
 */
proto.rv.data.TestPatternRequest.prototype.clearGetThumbnail = function() {
  return this.setGetThumbnail(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TestPatternRequest.prototype.hasGetThumbnail = function() {
  return jspb.Message.getField(this, 4) != null;
};


