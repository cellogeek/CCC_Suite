// source: testPattern.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.rv.data.TestPatternState');
goog.provide('proto.rv.data.TestPatternState.DisplayLocation');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.rv.data.TestPatternDefinition');
goog.require('proto.rv.data.URL');
goog.require('proto.rv.data.UUID');

goog.forwardDeclare('proto.rv.data.LogoType');
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TestPatternState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.TestPatternState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TestPatternState.displayName = 'proto.rv.data.TestPatternState';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TestPatternState.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TestPatternState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TestPatternState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TestPatternState.toObject = function(includeInstance, msg) {
  var f, obj = {
pattern: (f = msg.getPattern()) && proto.rv.data.TestPatternDefinition.toObject(includeInstance, f),
showPattern: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
displayLocation: jspb.Message.getFieldWithDefault(msg, 3, 0),
specificScreen: (f = msg.getSpecificScreen()) && proto.rv.data.UUID.toObject(includeInstance, f),
identifyScreens: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
logoType: jspb.Message.getFieldWithDefault(msg, 6, 0),
userLogoLocation: (f = msg.getUserLogoLocation()) && proto.rv.data.URL.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TestPatternState}
 */
proto.rv.data.TestPatternState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TestPatternState;
  return proto.rv.data.TestPatternState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TestPatternState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TestPatternState}
 */
proto.rv.data.TestPatternState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.TestPatternDefinition;
      reader.readMessage(value,proto.rv.data.TestPatternDefinition.deserializeBinaryFromReader);
      msg.setPattern(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShowPattern(value);
      break;
    case 3:
      var value = /** @type {!proto.rv.data.TestPatternState.DisplayLocation} */ (reader.readEnum());
      msg.setDisplayLocation(value);
      break;
    case 4:
      var value = new proto.rv.data.UUID;
      reader.readMessage(value,proto.rv.data.UUID.deserializeBinaryFromReader);
      msg.setSpecificScreen(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIdentifyScreens(value);
      break;
    case 6:
      var value = /** @type {!proto.rv.data.LogoType} */ (reader.readEnum());
      msg.setLogoType(value);
      break;
    case 7:
      var value = new proto.rv.data.URL;
      reader.readMessage(value,proto.rv.data.URL.deserializeBinaryFromReader);
      msg.setUserLogoLocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TestPatternState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TestPatternState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TestPatternState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TestPatternState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPattern();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.TestPatternDefinition.serializeBinaryToWriter
    );
  }
  f = message.getShowPattern();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getDisplayLocation();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getSpecificScreen();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rv.data.UUID.serializeBinaryToWriter
    );
  }
  f = message.getIdentifyScreens();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getLogoType();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getUserLogoLocation();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.rv.data.URL.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.rv.data.TestPatternState.DisplayLocation = {
  DISPLAY_LOCATION_ALL_SCREENS: 0,
  DISPLAY_LOCATION_AUDIENCE_SCREENS: 1,
  DISPLAY_LOCATION_STAGE_SCREENS: 2,
  DISPLAY_LOCATION_SPECIFIC_SCREEN: 3
};

/**
 * optional TestPatternDefinition pattern = 1;
 * @return {?proto.rv.data.TestPatternDefinition}
 */
proto.rv.data.TestPatternState.prototype.getPattern = function() {
  return /** @type{?proto.rv.data.TestPatternDefinition} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TestPatternDefinition, 1));
};


/**
 * @param {?proto.rv.data.TestPatternDefinition|undefined} value
 * @return {!proto.rv.data.TestPatternState} returns this
*/
proto.rv.data.TestPatternState.prototype.setPattern = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TestPatternState} returns this
 */
proto.rv.data.TestPatternState.prototype.clearPattern = function() {
  return this.setPattern(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TestPatternState.prototype.hasPattern = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool show_pattern = 2;
 * @return {boolean}
 */
proto.rv.data.TestPatternState.prototype.getShowPattern = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.TestPatternState} returns this
 */
proto.rv.data.TestPatternState.prototype.setShowPattern = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional DisplayLocation display_location = 3;
 * @return {!proto.rv.data.TestPatternState.DisplayLocation}
 */
proto.rv.data.TestPatternState.prototype.getDisplayLocation = function() {
  return /** @type {!proto.rv.data.TestPatternState.DisplayLocation} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.rv.data.TestPatternState.DisplayLocation} value
 * @return {!proto.rv.data.TestPatternState} returns this
 */
proto.rv.data.TestPatternState.prototype.setDisplayLocation = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional UUID specific_screen = 4;
 * @return {?proto.rv.data.UUID}
 */
proto.rv.data.TestPatternState.prototype.getSpecificScreen = function() {
  return /** @type{?proto.rv.data.UUID} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.UUID, 4));
};


/**
 * @param {?proto.rv.data.UUID|undefined} value
 * @return {!proto.rv.data.TestPatternState} returns this
*/
proto.rv.data.TestPatternState.prototype.setSpecificScreen = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TestPatternState} returns this
 */
proto.rv.data.TestPatternState.prototype.clearSpecificScreen = function() {
  return this.setSpecificScreen(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TestPatternState.prototype.hasSpecificScreen = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool identify_screens = 5;
 * @return {boolean}
 */
proto.rv.data.TestPatternState.prototype.getIdentifyScreens = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.TestPatternState} returns this
 */
proto.rv.data.TestPatternState.prototype.setIdentifyScreens = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional LogoType logo_type = 6;
 * @return {!proto.rv.data.LogoType}
 */
proto.rv.data.TestPatternState.prototype.getLogoType = function() {
  return /** @type {!proto.rv.data.LogoType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.rv.data.LogoType} value
 * @return {!proto.rv.data.TestPatternState} returns this
 */
proto.rv.data.TestPatternState.prototype.setLogoType = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional URL user_logo_location = 7;
 * @return {?proto.rv.data.URL}
 */
proto.rv.data.TestPatternState.prototype.getUserLogoLocation = function() {
  return /** @type{?proto.rv.data.URL} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.URL, 7));
};


/**
 * @param {?proto.rv.data.URL|undefined} value
 * @return {!proto.rv.data.TestPatternState} returns this
*/
proto.rv.data.TestPatternState.prototype.setUserLogoLocation = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TestPatternState} returns this
 */
proto.rv.data.TestPatternState.prototype.clearUserLogoLocation = function() {
  return this.setUserLogoLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TestPatternState.prototype.hasUserLogoLocation = function() {
  return jspb.Message.getField(this, 7) != null;
};


