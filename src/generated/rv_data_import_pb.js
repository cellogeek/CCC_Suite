// source: analyticsImport.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.rv.analytics.Import');
goog.provide('proto.rv.analytics.Import.ComponentCase');
goog.provide('proto.rv.analytics.Import.SongSelect');
goog.provide('proto.rv.analytics.Import.SongSelect.LineDelimiter');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.rv.analytics.MultiTracks.Import');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.analytics.Import = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rv.analytics.Import.oneofGroups_);
};
goog.inherits(proto.rv.analytics.Import, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.analytics.Import.displayName = 'proto.rv.analytics.Import';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.analytics.Import.SongSelect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.analytics.Import.SongSelect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.analytics.Import.SongSelect.displayName = 'proto.rv.analytics.Import.SongSelect';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rv.analytics.Import.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.rv.analytics.Import.ComponentCase = {
  COMPONENT_NOT_SET: 0,
  SONG_SELECT: 1,
  MULTITRACKS: 2
};

/**
 * @return {proto.rv.analytics.Import.ComponentCase}
 */
proto.rv.analytics.Import.prototype.getComponentCase = function() {
  return /** @type {proto.rv.analytics.Import.ComponentCase} */(jspb.Message.computeOneofCase(this, proto.rv.analytics.Import.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.analytics.Import.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.analytics.Import.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.analytics.Import} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.analytics.Import.toObject = function(includeInstance, msg) {
  var f, obj = {
songSelect: (f = msg.getSongSelect()) && proto.rv.analytics.Import.SongSelect.toObject(includeInstance, f),
multitracks: (f = msg.getMultitracks()) && proto.rv.analytics.MultiTracks.Import.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.analytics.Import}
 */
proto.rv.analytics.Import.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.analytics.Import;
  return proto.rv.analytics.Import.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.analytics.Import} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.analytics.Import}
 */
proto.rv.analytics.Import.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.analytics.Import.SongSelect;
      reader.readMessage(value,proto.rv.analytics.Import.SongSelect.deserializeBinaryFromReader);
      msg.setSongSelect(value);
      break;
    case 2:
      var value = new proto.rv.analytics.MultiTracks.Import;
      reader.readMessage(value,proto.rv.analytics.MultiTracks.Import.deserializeBinaryFromReader);
      msg.setMultitracks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.analytics.Import.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.analytics.Import.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.analytics.Import} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.analytics.Import.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSongSelect();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.analytics.Import.SongSelect.serializeBinaryToWriter
    );
  }
  f = message.getMultitracks();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rv.analytics.MultiTracks.Import.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.analytics.Import.SongSelect.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.analytics.Import.SongSelect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.analytics.Import.SongSelect} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.analytics.Import.SongSelect.toObject = function(includeInstance, msg) {
  var f, obj = {
templateSlideTextElementCount: jspb.Message.getFieldWithDefault(msg, 1, 0),
importIntoPlaylist: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
lineDelimiter: jspb.Message.getFieldWithDefault(msg, 3, 0),
lineDelimiterCount: jspb.Message.getFieldWithDefault(msg, 4, 0),
didOpenEditView: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.analytics.Import.SongSelect}
 */
proto.rv.analytics.Import.SongSelect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.analytics.Import.SongSelect;
  return proto.rv.analytics.Import.SongSelect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.analytics.Import.SongSelect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.analytics.Import.SongSelect}
 */
proto.rv.analytics.Import.SongSelect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTemplateSlideTextElementCount(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setImportIntoPlaylist(value);
      break;
    case 3:
      var value = /** @type {!proto.rv.analytics.Import.SongSelect.LineDelimiter} */ (reader.readEnum());
      msg.setLineDelimiter(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLineDelimiterCount(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDidOpenEditView(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.analytics.Import.SongSelect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.analytics.Import.SongSelect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.analytics.Import.SongSelect} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.analytics.Import.SongSelect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTemplateSlideTextElementCount();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getImportIntoPlaylist();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getLineDelimiter();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getLineDelimiterCount();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getDidOpenEditView();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.rv.analytics.Import.SongSelect.LineDelimiter = {
  LINE_DELIMITER_UNKNOWN: 0,
  LINE_DELIMITER_LINE_BREAK: 1,
  LINE_DELIMITER_PARAGRAPH_BREAK: 2
};

/**
 * optional int32 template_slide_text_element_count = 1;
 * @return {number}
 */
proto.rv.analytics.Import.SongSelect.prototype.getTemplateSlideTextElementCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.analytics.Import.SongSelect} returns this
 */
proto.rv.analytics.Import.SongSelect.prototype.setTemplateSlideTextElementCount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool import_into_playlist = 2;
 * @return {boolean}
 */
proto.rv.analytics.Import.SongSelect.prototype.getImportIntoPlaylist = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.analytics.Import.SongSelect} returns this
 */
proto.rv.analytics.Import.SongSelect.prototype.setImportIntoPlaylist = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional LineDelimiter line_delimiter = 3;
 * @return {!proto.rv.analytics.Import.SongSelect.LineDelimiter}
 */
proto.rv.analytics.Import.SongSelect.prototype.getLineDelimiter = function() {
  return /** @type {!proto.rv.analytics.Import.SongSelect.LineDelimiter} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.rv.analytics.Import.SongSelect.LineDelimiter} value
 * @return {!proto.rv.analytics.Import.SongSelect} returns this
 */
proto.rv.analytics.Import.SongSelect.prototype.setLineDelimiter = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional int32 line_delimiter_count = 4;
 * @return {number}
 */
proto.rv.analytics.Import.SongSelect.prototype.getLineDelimiterCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.analytics.Import.SongSelect} returns this
 */
proto.rv.analytics.Import.SongSelect.prototype.setLineDelimiterCount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool did_open_edit_view = 5;
 * @return {boolean}
 */
proto.rv.analytics.Import.SongSelect.prototype.getDidOpenEditView = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.analytics.Import.SongSelect} returns this
 */
proto.rv.analytics.Import.SongSelect.prototype.setDidOpenEditView = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional SongSelect song_select = 1;
 * @return {?proto.rv.analytics.Import.SongSelect}
 */
proto.rv.analytics.Import.prototype.getSongSelect = function() {
  return /** @type{?proto.rv.analytics.Import.SongSelect} */ (
    jspb.Message.getWrapperField(this, proto.rv.analytics.Import.SongSelect, 1));
};


/**
 * @param {?proto.rv.analytics.Import.SongSelect|undefined} value
 * @return {!proto.rv.analytics.Import} returns this
*/
proto.rv.analytics.Import.prototype.setSongSelect = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.rv.analytics.Import.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.analytics.Import} returns this
 */
proto.rv.analytics.Import.prototype.clearSongSelect = function() {
  return this.setSongSelect(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.analytics.Import.prototype.hasSongSelect = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MultiTracks.Import multitracks = 2;
 * @return {?proto.rv.analytics.MultiTracks.Import}
 */
proto.rv.analytics.Import.prototype.getMultitracks = function() {
  return /** @type{?proto.rv.analytics.MultiTracks.Import} */ (
    jspb.Message.getWrapperField(this, proto.rv.analytics.MultiTracks.Import, 2));
};


/**
 * @param {?proto.rv.analytics.MultiTracks.Import|undefined} value
 * @return {!proto.rv.analytics.Import} returns this
*/
proto.rv.analytics.Import.prototype.setMultitracks = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.rv.analytics.Import.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.analytics.Import} returns this
 */
proto.rv.analytics.Import.prototype.clearMultitracks = function() {
  return this.setMultitracks(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.analytics.Import.prototype.hasMultitracks = function() {
  return jspb.Message.getField(this, 2) != null;
};


