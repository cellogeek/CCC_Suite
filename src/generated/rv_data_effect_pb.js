// source: effects.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.rv.data.Effect');
goog.provide('proto.rv.data.Effect.EffectVariable');
goog.provide('proto.rv.data.Effect.EffectVariable.EffectColor');
goog.provide('proto.rv.data.Effect.EffectVariable.EffectDirection');
goog.provide('proto.rv.data.Effect.EffectVariable.EffectDirection.EffectDirection');
goog.provide('proto.rv.data.Effect.EffectVariable.EffectDouble');
goog.provide('proto.rv.data.Effect.EffectVariable.EffectFloat');
goog.provide('proto.rv.data.Effect.EffectVariable.EffectInt');
goog.provide('proto.rv.data.Effect.EffectVariable.TypeCase');
goog.provide('proto.rv.data.Effect.Preset');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.rv.data.Color');
goog.require('proto.rv.data.UUID');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Effect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rv.data.Effect.repeatedFields_, null);
};
goog.inherits(proto.rv.data.Effect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Effect.displayName = 'proto.rv.data.Effect';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Effect.EffectVariable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rv.data.Effect.EffectVariable.oneofGroups_);
};
goog.inherits(proto.rv.data.Effect.EffectVariable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Effect.EffectVariable.displayName = 'proto.rv.data.Effect.EffectVariable';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Effect.EffectVariable.EffectInt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.Effect.EffectVariable.EffectInt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Effect.EffectVariable.EffectInt.displayName = 'proto.rv.data.Effect.EffectVariable.EffectInt';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Effect.EffectVariable.EffectFloat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.Effect.EffectVariable.EffectFloat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Effect.EffectVariable.EffectFloat.displayName = 'proto.rv.data.Effect.EffectVariable.EffectFloat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Effect.EffectVariable.EffectDouble = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.Effect.EffectVariable.EffectDouble, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Effect.EffectVariable.EffectDouble.displayName = 'proto.rv.data.Effect.EffectVariable.EffectDouble';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Effect.EffectVariable.EffectColor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.Effect.EffectVariable.EffectColor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Effect.EffectVariable.EffectColor.displayName = 'proto.rv.data.Effect.EffectVariable.EffectColor';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Effect.EffectVariable.EffectDirection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.Effect.EffectVariable.EffectDirection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Effect.EffectVariable.EffectDirection.displayName = 'proto.rv.data.Effect.EffectVariable.EffectDirection';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Effect.Preset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rv.data.Effect.Preset.repeatedFields_, null);
};
goog.inherits(proto.rv.data.Effect.Preset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Effect.Preset.displayName = 'proto.rv.data.Effect.Preset';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rv.data.Effect.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Effect.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Effect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Effect} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Effect.toObject = function(includeInstance, msg) {
  var f, obj = {
uuid: (f = msg.getUuid()) && proto.rv.data.UUID.toObject(includeInstance, f),
enabled: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
name: jspb.Message.getFieldWithDefault(msg, 3, ""),
renderId: jspb.Message.getFieldWithDefault(msg, 4, ""),
behaviorDescription: jspb.Message.getFieldWithDefault(msg, 5, ""),
category: jspb.Message.getFieldWithDefault(msg, 6, ""),
variablesList: jspb.Message.toObjectList(msg.getVariablesList(),
    proto.rv.data.Effect.EffectVariable.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Effect}
 */
proto.rv.data.Effect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Effect;
  return proto.rv.data.Effect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Effect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Effect}
 */
proto.rv.data.Effect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.UUID;
      reader.readMessage(value,proto.rv.data.UUID.deserializeBinaryFromReader);
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRenderId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setBehaviorDescription(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCategory(value);
      break;
    case 7:
      var value = new proto.rv.data.Effect.EffectVariable;
      reader.readMessage(value,proto.rv.data.Effect.EffectVariable.deserializeBinaryFromReader);
      msg.addVariables(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Effect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Effect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Effect} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Effect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.UUID.serializeBinaryToWriter
    );
  }
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRenderId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getBehaviorDescription();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCategory();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getVariablesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.rv.data.Effect.EffectVariable.serializeBinaryToWriter
    );
  }
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rv.data.Effect.EffectVariable.oneofGroups_ = [[3,4,5,6,7]];

/**
 * @enum {number}
 */
proto.rv.data.Effect.EffectVariable.TypeCase = {
  TYPE_NOT_SET: 0,
  INT: 3,
  FLOAT: 4,
  COLOR: 5,
  DIRECTION: 6,
  DOUBLE: 7
};

/**
 * @return {proto.rv.data.Effect.EffectVariable.TypeCase}
 */
proto.rv.data.Effect.EffectVariable.prototype.getTypeCase = function() {
  return /** @type {proto.rv.data.Effect.EffectVariable.TypeCase} */(jspb.Message.computeOneofCase(this, proto.rv.data.Effect.EffectVariable.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Effect.EffectVariable.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Effect.EffectVariable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Effect.EffectVariable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Effect.EffectVariable.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, ""),
description: jspb.Message.getFieldWithDefault(msg, 2, ""),
pb_int: (f = msg.getInt()) && proto.rv.data.Effect.EffectVariable.EffectInt.toObject(includeInstance, f),
pb_float: (f = msg.getFloat()) && proto.rv.data.Effect.EffectVariable.EffectFloat.toObject(includeInstance, f),
color: (f = msg.getColor()) && proto.rv.data.Effect.EffectVariable.EffectColor.toObject(includeInstance, f),
direction: (f = msg.getDirection()) && proto.rv.data.Effect.EffectVariable.EffectDirection.toObject(includeInstance, f),
pb_double: (f = msg.getDouble()) && proto.rv.data.Effect.EffectVariable.EffectDouble.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Effect.EffectVariable}
 */
proto.rv.data.Effect.EffectVariable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Effect.EffectVariable;
  return proto.rv.data.Effect.EffectVariable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Effect.EffectVariable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Effect.EffectVariable}
 */
proto.rv.data.Effect.EffectVariable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = new proto.rv.data.Effect.EffectVariable.EffectInt;
      reader.readMessage(value,proto.rv.data.Effect.EffectVariable.EffectInt.deserializeBinaryFromReader);
      msg.setInt(value);
      break;
    case 4:
      var value = new proto.rv.data.Effect.EffectVariable.EffectFloat;
      reader.readMessage(value,proto.rv.data.Effect.EffectVariable.EffectFloat.deserializeBinaryFromReader);
      msg.setFloat(value);
      break;
    case 5:
      var value = new proto.rv.data.Effect.EffectVariable.EffectColor;
      reader.readMessage(value,proto.rv.data.Effect.EffectVariable.EffectColor.deserializeBinaryFromReader);
      msg.setColor(value);
      break;
    case 6:
      var value = new proto.rv.data.Effect.EffectVariable.EffectDirection;
      reader.readMessage(value,proto.rv.data.Effect.EffectVariable.EffectDirection.deserializeBinaryFromReader);
      msg.setDirection(value);
      break;
    case 7:
      var value = new proto.rv.data.Effect.EffectVariable.EffectDouble;
      reader.readMessage(value,proto.rv.data.Effect.EffectVariable.EffectDouble.deserializeBinaryFromReader);
      msg.setDouble(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Effect.EffectVariable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Effect.EffectVariable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Effect.EffectVariable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Effect.EffectVariable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getInt();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rv.data.Effect.EffectVariable.EffectInt.serializeBinaryToWriter
    );
  }
  f = message.getFloat();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rv.data.Effect.EffectVariable.EffectFloat.serializeBinaryToWriter
    );
  }
  f = message.getColor();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.rv.data.Effect.EffectVariable.EffectColor.serializeBinaryToWriter
    );
  }
  f = message.getDirection();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.rv.data.Effect.EffectVariable.EffectDirection.serializeBinaryToWriter
    );
  }
  f = message.getDouble();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.rv.data.Effect.EffectVariable.EffectDouble.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Effect.EffectVariable.EffectInt.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Effect.EffectVariable.EffectInt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Effect.EffectVariable.EffectInt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Effect.EffectVariable.EffectInt.toObject = function(includeInstance, msg) {
  var f, obj = {
value: jspb.Message.getFieldWithDefault(msg, 1, 0),
defaultValue: jspb.Message.getFieldWithDefault(msg, 2, 0),
min: jspb.Message.getFieldWithDefault(msg, 3, 0),
max: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Effect.EffectVariable.EffectInt}
 */
proto.rv.data.Effect.EffectVariable.EffectInt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Effect.EffectVariable.EffectInt;
  return proto.rv.data.Effect.EffectVariable.EffectInt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Effect.EffectVariable.EffectInt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Effect.EffectVariable.EffectInt}
 */
proto.rv.data.Effect.EffectVariable.EffectInt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDefaultValue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMin(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMax(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Effect.EffectVariable.EffectInt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Effect.EffectVariable.EffectInt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Effect.EffectVariable.EffectInt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Effect.EffectVariable.EffectInt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getDefaultValue();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getMin();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getMax();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional int32 value = 1;
 * @return {number}
 */
proto.rv.data.Effect.EffectVariable.EffectInt.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.Effect.EffectVariable.EffectInt} returns this
 */
proto.rv.data.Effect.EffectVariable.EffectInt.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 default_value = 2;
 * @return {number}
 */
proto.rv.data.Effect.EffectVariable.EffectInt.prototype.getDefaultValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.Effect.EffectVariable.EffectInt} returns this
 */
proto.rv.data.Effect.EffectVariable.EffectInt.prototype.setDefaultValue = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 min = 3;
 * @return {number}
 */
proto.rv.data.Effect.EffectVariable.EffectInt.prototype.getMin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.Effect.EffectVariable.EffectInt} returns this
 */
proto.rv.data.Effect.EffectVariable.EffectInt.prototype.setMin = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 max = 4;
 * @return {number}
 */
proto.rv.data.Effect.EffectVariable.EffectInt.prototype.getMax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.Effect.EffectVariable.EffectInt} returns this
 */
proto.rv.data.Effect.EffectVariable.EffectInt.prototype.setMax = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Effect.EffectVariable.EffectFloat.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Effect.EffectVariable.EffectFloat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Effect.EffectVariable.EffectFloat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Effect.EffectVariable.EffectFloat.toObject = function(includeInstance, msg) {
  var f, obj = {
value: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
defaultValue: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
min: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
max: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Effect.EffectVariable.EffectFloat}
 */
proto.rv.data.Effect.EffectVariable.EffectFloat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Effect.EffectVariable.EffectFloat;
  return proto.rv.data.Effect.EffectVariable.EffectFloat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Effect.EffectVariable.EffectFloat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Effect.EffectVariable.EffectFloat}
 */
proto.rv.data.Effect.EffectVariable.EffectFloat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDefaultValue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMin(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMax(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Effect.EffectVariable.EffectFloat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Effect.EffectVariable.EffectFloat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Effect.EffectVariable.EffectFloat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Effect.EffectVariable.EffectFloat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getDefaultValue();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getMin();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getMax();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional float value = 1;
 * @return {number}
 */
proto.rv.data.Effect.EffectVariable.EffectFloat.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.Effect.EffectVariable.EffectFloat} returns this
 */
proto.rv.data.Effect.EffectVariable.EffectFloat.prototype.setValue = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float default_value = 2;
 * @return {number}
 */
proto.rv.data.Effect.EffectVariable.EffectFloat.prototype.getDefaultValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.Effect.EffectVariable.EffectFloat} returns this
 */
proto.rv.data.Effect.EffectVariable.EffectFloat.prototype.setDefaultValue = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float min = 3;
 * @return {number}
 */
proto.rv.data.Effect.EffectVariable.EffectFloat.prototype.getMin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.Effect.EffectVariable.EffectFloat} returns this
 */
proto.rv.data.Effect.EffectVariable.EffectFloat.prototype.setMin = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float max = 4;
 * @return {number}
 */
proto.rv.data.Effect.EffectVariable.EffectFloat.prototype.getMax = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.Effect.EffectVariable.EffectFloat} returns this
 */
proto.rv.data.Effect.EffectVariable.EffectFloat.prototype.setMax = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Effect.EffectVariable.EffectDouble.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Effect.EffectVariable.EffectDouble.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Effect.EffectVariable.EffectDouble} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Effect.EffectVariable.EffectDouble.toObject = function(includeInstance, msg) {
  var f, obj = {
value: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
defaultValue: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
min: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
max: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Effect.EffectVariable.EffectDouble}
 */
proto.rv.data.Effect.EffectVariable.EffectDouble.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Effect.EffectVariable.EffectDouble;
  return proto.rv.data.Effect.EffectVariable.EffectDouble.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Effect.EffectVariable.EffectDouble} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Effect.EffectVariable.EffectDouble}
 */
proto.rv.data.Effect.EffectVariable.EffectDouble.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDefaultValue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMin(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMax(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Effect.EffectVariable.EffectDouble.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Effect.EffectVariable.EffectDouble.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Effect.EffectVariable.EffectDouble} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Effect.EffectVariable.EffectDouble.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getDefaultValue();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getMin();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getMax();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional double value = 1;
 * @return {number}
 */
proto.rv.data.Effect.EffectVariable.EffectDouble.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.Effect.EffectVariable.EffectDouble} returns this
 */
proto.rv.data.Effect.EffectVariable.EffectDouble.prototype.setValue = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double default_value = 2;
 * @return {number}
 */
proto.rv.data.Effect.EffectVariable.EffectDouble.prototype.getDefaultValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.Effect.EffectVariable.EffectDouble} returns this
 */
proto.rv.data.Effect.EffectVariable.EffectDouble.prototype.setDefaultValue = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double min = 3;
 * @return {number}
 */
proto.rv.data.Effect.EffectVariable.EffectDouble.prototype.getMin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.Effect.EffectVariable.EffectDouble} returns this
 */
proto.rv.data.Effect.EffectVariable.EffectDouble.prototype.setMin = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double max = 4;
 * @return {number}
 */
proto.rv.data.Effect.EffectVariable.EffectDouble.prototype.getMax = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.Effect.EffectVariable.EffectDouble} returns this
 */
proto.rv.data.Effect.EffectVariable.EffectDouble.prototype.setMax = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Effect.EffectVariable.EffectColor.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Effect.EffectVariable.EffectColor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Effect.EffectVariable.EffectColor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Effect.EffectVariable.EffectColor.toObject = function(includeInstance, msg) {
  var f, obj = {
color: (f = msg.getColor()) && proto.rv.data.Color.toObject(includeInstance, f),
defaultColor: (f = msg.getDefaultColor()) && proto.rv.data.Color.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Effect.EffectVariable.EffectColor}
 */
proto.rv.data.Effect.EffectVariable.EffectColor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Effect.EffectVariable.EffectColor;
  return proto.rv.data.Effect.EffectVariable.EffectColor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Effect.EffectVariable.EffectColor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Effect.EffectVariable.EffectColor}
 */
proto.rv.data.Effect.EffectVariable.EffectColor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.Color;
      reader.readMessage(value,proto.rv.data.Color.deserializeBinaryFromReader);
      msg.setColor(value);
      break;
    case 2:
      var value = new proto.rv.data.Color;
      reader.readMessage(value,proto.rv.data.Color.deserializeBinaryFromReader);
      msg.setDefaultColor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Effect.EffectVariable.EffectColor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Effect.EffectVariable.EffectColor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Effect.EffectVariable.EffectColor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Effect.EffectVariable.EffectColor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getColor();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.Color.serializeBinaryToWriter
    );
  }
  f = message.getDefaultColor();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rv.data.Color.serializeBinaryToWriter
    );
  }
};


/**
 * optional Color color = 1;
 * @return {?proto.rv.data.Color}
 */
proto.rv.data.Effect.EffectVariable.EffectColor.prototype.getColor = function() {
  return /** @type{?proto.rv.data.Color} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Color, 1));
};


/**
 * @param {?proto.rv.data.Color|undefined} value
 * @return {!proto.rv.data.Effect.EffectVariable.EffectColor} returns this
*/
proto.rv.data.Effect.EffectVariable.EffectColor.prototype.setColor = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Effect.EffectVariable.EffectColor} returns this
 */
proto.rv.data.Effect.EffectVariable.EffectColor.prototype.clearColor = function() {
  return this.setColor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Effect.EffectVariable.EffectColor.prototype.hasColor = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Color default_color = 2;
 * @return {?proto.rv.data.Color}
 */
proto.rv.data.Effect.EffectVariable.EffectColor.prototype.getDefaultColor = function() {
  return /** @type{?proto.rv.data.Color} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Color, 2));
};


/**
 * @param {?proto.rv.data.Color|undefined} value
 * @return {!proto.rv.data.Effect.EffectVariable.EffectColor} returns this
*/
proto.rv.data.Effect.EffectVariable.EffectColor.prototype.setDefaultColor = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Effect.EffectVariable.EffectColor} returns this
 */
proto.rv.data.Effect.EffectVariable.EffectColor.prototype.clearDefaultColor = function() {
  return this.setDefaultColor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Effect.EffectVariable.EffectColor.prototype.hasDefaultColor = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Effect.EffectVariable.EffectDirection.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Effect.EffectVariable.EffectDirection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Effect.EffectVariable.EffectDirection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Effect.EffectVariable.EffectDirection.toObject = function(includeInstance, msg) {
  var f, obj = {
direction: jspb.Message.getFieldWithDefault(msg, 1, 0),
defaultDirection: jspb.Message.getFieldWithDefault(msg, 2, 0),
availableDirections: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Effect.EffectVariable.EffectDirection}
 */
proto.rv.data.Effect.EffectVariable.EffectDirection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Effect.EffectVariable.EffectDirection;
  return proto.rv.data.Effect.EffectVariable.EffectDirection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Effect.EffectVariable.EffectDirection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Effect.EffectVariable.EffectDirection}
 */
proto.rv.data.Effect.EffectVariable.EffectDirection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.rv.data.Effect.EffectVariable.EffectDirection.EffectDirection} */ (reader.readEnum());
      msg.setDirection(value);
      break;
    case 2:
      var value = /** @type {!proto.rv.data.Effect.EffectVariable.EffectDirection.EffectDirection} */ (reader.readEnum());
      msg.setDefaultDirection(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAvailableDirections(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Effect.EffectVariable.EffectDirection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Effect.EffectVariable.EffectDirection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Effect.EffectVariable.EffectDirection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Effect.EffectVariable.EffectDirection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDirection();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDefaultDirection();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getAvailableDirections();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.rv.data.Effect.EffectVariable.EffectDirection.EffectDirection = {
  EFFECT_DIRECTION_NONE: 0,
  EFFECT_DIRECTION_TOP_LEFT: 1,
  EFFECT_DIRECTION_TOP: 2,
  EFFECT_DIRECTION_TOP_RIGHT: 4,
  EFFECT_DIRECTION_LEFT: 8,
  EFFECT_DIRECTION_CENTER: 16,
  EFFECT_DIRECTION_RIGHT: 32,
  EFFECT_DIRECTION_BOTTOM_LEFT: 64,
  EFFECT_DIRECTION_BOTTOM: 128,
  EFFECT_DIRECTION_BOTTOM_RIGHT: 256
};

/**
 * optional EffectDirection direction = 1;
 * @return {!proto.rv.data.Effect.EffectVariable.EffectDirection.EffectDirection}
 */
proto.rv.data.Effect.EffectVariable.EffectDirection.prototype.getDirection = function() {
  return /** @type {!proto.rv.data.Effect.EffectVariable.EffectDirection.EffectDirection} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.rv.data.Effect.EffectVariable.EffectDirection.EffectDirection} value
 * @return {!proto.rv.data.Effect.EffectVariable.EffectDirection} returns this
 */
proto.rv.data.Effect.EffectVariable.EffectDirection.prototype.setDirection = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional EffectDirection default_direction = 2;
 * @return {!proto.rv.data.Effect.EffectVariable.EffectDirection.EffectDirection}
 */
proto.rv.data.Effect.EffectVariable.EffectDirection.prototype.getDefaultDirection = function() {
  return /** @type {!proto.rv.data.Effect.EffectVariable.EffectDirection.EffectDirection} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.rv.data.Effect.EffectVariable.EffectDirection.EffectDirection} value
 * @return {!proto.rv.data.Effect.EffectVariable.EffectDirection} returns this
 */
proto.rv.data.Effect.EffectVariable.EffectDirection.prototype.setDefaultDirection = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional uint32 available_directions = 3;
 * @return {number}
 */
proto.rv.data.Effect.EffectVariable.EffectDirection.prototype.getAvailableDirections = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.Effect.EffectVariable.EffectDirection} returns this
 */
proto.rv.data.Effect.EffectVariable.EffectDirection.prototype.setAvailableDirections = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.rv.data.Effect.EffectVariable.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.Effect.EffectVariable} returns this
 */
proto.rv.data.Effect.EffectVariable.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.rv.data.Effect.EffectVariable.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.Effect.EffectVariable} returns this
 */
proto.rv.data.Effect.EffectVariable.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional EffectInt int = 3;
 * @return {?proto.rv.data.Effect.EffectVariable.EffectInt}
 */
proto.rv.data.Effect.EffectVariable.prototype.getInt = function() {
  return /** @type{?proto.rv.data.Effect.EffectVariable.EffectInt} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Effect.EffectVariable.EffectInt, 3));
};


/**
 * @param {?proto.rv.data.Effect.EffectVariable.EffectInt|undefined} value
 * @return {!proto.rv.data.Effect.EffectVariable} returns this
*/
proto.rv.data.Effect.EffectVariable.prototype.setInt = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.rv.data.Effect.EffectVariable.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Effect.EffectVariable} returns this
 */
proto.rv.data.Effect.EffectVariable.prototype.clearInt = function() {
  return this.setInt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Effect.EffectVariable.prototype.hasInt = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional EffectFloat float = 4;
 * @return {?proto.rv.data.Effect.EffectVariable.EffectFloat}
 */
proto.rv.data.Effect.EffectVariable.prototype.getFloat = function() {
  return /** @type{?proto.rv.data.Effect.EffectVariable.EffectFloat} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Effect.EffectVariable.EffectFloat, 4));
};


/**
 * @param {?proto.rv.data.Effect.EffectVariable.EffectFloat|undefined} value
 * @return {!proto.rv.data.Effect.EffectVariable} returns this
*/
proto.rv.data.Effect.EffectVariable.prototype.setFloat = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.rv.data.Effect.EffectVariable.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Effect.EffectVariable} returns this
 */
proto.rv.data.Effect.EffectVariable.prototype.clearFloat = function() {
  return this.setFloat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Effect.EffectVariable.prototype.hasFloat = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional EffectColor color = 5;
 * @return {?proto.rv.data.Effect.EffectVariable.EffectColor}
 */
proto.rv.data.Effect.EffectVariable.prototype.getColor = function() {
  return /** @type{?proto.rv.data.Effect.EffectVariable.EffectColor} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Effect.EffectVariable.EffectColor, 5));
};


/**
 * @param {?proto.rv.data.Effect.EffectVariable.EffectColor|undefined} value
 * @return {!proto.rv.data.Effect.EffectVariable} returns this
*/
proto.rv.data.Effect.EffectVariable.prototype.setColor = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.rv.data.Effect.EffectVariable.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Effect.EffectVariable} returns this
 */
proto.rv.data.Effect.EffectVariable.prototype.clearColor = function() {
  return this.setColor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Effect.EffectVariable.prototype.hasColor = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional EffectDirection direction = 6;
 * @return {?proto.rv.data.Effect.EffectVariable.EffectDirection}
 */
proto.rv.data.Effect.EffectVariable.prototype.getDirection = function() {
  return /** @type{?proto.rv.data.Effect.EffectVariable.EffectDirection} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Effect.EffectVariable.EffectDirection, 6));
};


/**
 * @param {?proto.rv.data.Effect.EffectVariable.EffectDirection|undefined} value
 * @return {!proto.rv.data.Effect.EffectVariable} returns this
*/
proto.rv.data.Effect.EffectVariable.prototype.setDirection = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.rv.data.Effect.EffectVariable.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Effect.EffectVariable} returns this
 */
proto.rv.data.Effect.EffectVariable.prototype.clearDirection = function() {
  return this.setDirection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Effect.EffectVariable.prototype.hasDirection = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional EffectDouble double = 7;
 * @return {?proto.rv.data.Effect.EffectVariable.EffectDouble}
 */
proto.rv.data.Effect.EffectVariable.prototype.getDouble = function() {
  return /** @type{?proto.rv.data.Effect.EffectVariable.EffectDouble} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Effect.EffectVariable.EffectDouble, 7));
};


/**
 * @param {?proto.rv.data.Effect.EffectVariable.EffectDouble|undefined} value
 * @return {!proto.rv.data.Effect.EffectVariable} returns this
*/
proto.rv.data.Effect.EffectVariable.prototype.setDouble = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.rv.data.Effect.EffectVariable.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Effect.EffectVariable} returns this
 */
proto.rv.data.Effect.EffectVariable.prototype.clearDouble = function() {
  return this.setDouble(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Effect.EffectVariable.prototype.hasDouble = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rv.data.Effect.Preset.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Effect.Preset.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Effect.Preset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Effect.Preset} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Effect.Preset.toObject = function(includeInstance, msg) {
  var f, obj = {
uuid: (f = msg.getUuid()) && proto.rv.data.UUID.toObject(includeInstance, f),
name: jspb.Message.getFieldWithDefault(msg, 2, ""),
effectsList: jspb.Message.toObjectList(msg.getEffectsList(),
    proto.rv.data.Effect.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Effect.Preset}
 */
proto.rv.data.Effect.Preset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Effect.Preset;
  return proto.rv.data.Effect.Preset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Effect.Preset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Effect.Preset}
 */
proto.rv.data.Effect.Preset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.UUID;
      reader.readMessage(value,proto.rv.data.UUID.deserializeBinaryFromReader);
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.rv.data.Effect;
      reader.readMessage(value,proto.rv.data.Effect.deserializeBinaryFromReader);
      msg.addEffects(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Effect.Preset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Effect.Preset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Effect.Preset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Effect.Preset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.UUID.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEffectsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.rv.data.Effect.serializeBinaryToWriter
    );
  }
};


/**
 * optional UUID uuid = 1;
 * @return {?proto.rv.data.UUID}
 */
proto.rv.data.Effect.Preset.prototype.getUuid = function() {
  return /** @type{?proto.rv.data.UUID} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.UUID, 1));
};


/**
 * @param {?proto.rv.data.UUID|undefined} value
 * @return {!proto.rv.data.Effect.Preset} returns this
*/
proto.rv.data.Effect.Preset.prototype.setUuid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Effect.Preset} returns this
 */
proto.rv.data.Effect.Preset.prototype.clearUuid = function() {
  return this.setUuid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Effect.Preset.prototype.hasUuid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.rv.data.Effect.Preset.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.Effect.Preset} returns this
 */
proto.rv.data.Effect.Preset.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Effect effects = 3;
 * @return {!Array<!proto.rv.data.Effect>}
 */
proto.rv.data.Effect.Preset.prototype.getEffectsList = function() {
  return /** @type{!Array<!proto.rv.data.Effect>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rv.data.Effect, 3));
};


/**
 * @param {!Array<!proto.rv.data.Effect>} value
 * @return {!proto.rv.data.Effect.Preset} returns this
*/
proto.rv.data.Effect.Preset.prototype.setEffectsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.rv.data.Effect=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rv.data.Effect}
 */
proto.rv.data.Effect.Preset.prototype.addEffects = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.rv.data.Effect, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.Effect.Preset} returns this
 */
proto.rv.data.Effect.Preset.prototype.clearEffectsList = function() {
  return this.setEffectsList([]);
};


/**
 * optional UUID uuid = 1;
 * @return {?proto.rv.data.UUID}
 */
proto.rv.data.Effect.prototype.getUuid = function() {
  return /** @type{?proto.rv.data.UUID} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.UUID, 1));
};


/**
 * @param {?proto.rv.data.UUID|undefined} value
 * @return {!proto.rv.data.Effect} returns this
*/
proto.rv.data.Effect.prototype.setUuid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Effect} returns this
 */
proto.rv.data.Effect.prototype.clearUuid = function() {
  return this.setUuid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Effect.prototype.hasUuid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool enabled = 2;
 * @return {boolean}
 */
proto.rv.data.Effect.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.Effect} returns this
 */
proto.rv.data.Effect.prototype.setEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.rv.data.Effect.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.Effect} returns this
 */
proto.rv.data.Effect.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string render_id = 4;
 * @return {string}
 */
proto.rv.data.Effect.prototype.getRenderId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.Effect} returns this
 */
proto.rv.data.Effect.prototype.setRenderId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string behavior_description = 5;
 * @return {string}
 */
proto.rv.data.Effect.prototype.getBehaviorDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.Effect} returns this
 */
proto.rv.data.Effect.prototype.setBehaviorDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string category = 6;
 * @return {string}
 */
proto.rv.data.Effect.prototype.getCategory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.Effect} returns this
 */
proto.rv.data.Effect.prototype.setCategory = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * repeated EffectVariable variables = 7;
 * @return {!Array<!proto.rv.data.Effect.EffectVariable>}
 */
proto.rv.data.Effect.prototype.getVariablesList = function() {
  return /** @type{!Array<!proto.rv.data.Effect.EffectVariable>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rv.data.Effect.EffectVariable, 7));
};


/**
 * @param {!Array<!proto.rv.data.Effect.EffectVariable>} value
 * @return {!proto.rv.data.Effect} returns this
*/
proto.rv.data.Effect.prototype.setVariablesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.rv.data.Effect.EffectVariable=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rv.data.Effect.EffectVariable}
 */
proto.rv.data.Effect.prototype.addVariables = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.rv.data.Effect.EffectVariable, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.Effect} returns this
 */
proto.rv.data.Effect.prototype.clearVariablesList = function() {
  return this.setVariablesList([]);
};


