// source: screens.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.rv.data.Screen');
goog.provide('proto.rv.data.Screen.AlphaSettings');
goog.provide('proto.rv.data.Screen.AlphaSettings.AlphaDevice');
goog.provide('proto.rv.data.Screen.AlphaSettings.Mode');
goog.provide('proto.rv.data.Screen.BlendCompensation');
goog.provide('proto.rv.data.Screen.ColorAdjustment');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.rv.data.Color');
goog.require('proto.rv.data.CornerValues');
goog.require('proto.rv.data.Graphics.Rect');
goog.require('proto.rv.data.OutputDisplay');
goog.require('proto.rv.data.UUID');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Screen = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.Screen, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Screen.displayName = 'proto.rv.data.Screen';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Screen.ColorAdjustment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.Screen.ColorAdjustment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Screen.ColorAdjustment.displayName = 'proto.rv.data.Screen.ColorAdjustment';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Screen.BlendCompensation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.Screen.BlendCompensation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Screen.BlendCompensation.displayName = 'proto.rv.data.Screen.BlendCompensation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Screen.AlphaSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.Screen.AlphaSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Screen.AlphaSettings.displayName = 'proto.rv.data.Screen.AlphaSettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Screen.AlphaSettings.AlphaDevice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.Screen.AlphaSettings.AlphaDevice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Screen.AlphaSettings.AlphaDevice.displayName = 'proto.rv.data.Screen.AlphaSettings.AlphaDevice';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Screen.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Screen.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Screen} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Screen.toObject = function(includeInstance, msg) {
  var f, obj = {
uuid: (f = msg.getUuid()) && proto.rv.data.UUID.toObject(includeInstance, f),
name: jspb.Message.getFieldWithDefault(msg, 2, ""),
color: (f = msg.getColor()) && proto.rv.data.Color.toObject(includeInstance, f),
bounds: (f = msg.getBounds()) && proto.rv.data.Graphics.Rect.toObject(includeInstance, f),
aspectRatioLocked: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
outputBoundsAspectRatioLocked: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
cornerPinningEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
subscreenUnitRect: (f = msg.getSubscreenUnitRect()) && proto.rv.data.Graphics.Rect.toObject(includeInstance, f),
rotation: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
gamma: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
blackLevel: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0),
blendedEdges: jspb.Message.getFieldWithDefault(msg, 12, 0),
cornerValues: (f = msg.getCornerValues()) && proto.rv.data.CornerValues.toObject(includeInstance, f),
outputDisplay: (f = msg.getOutputDisplay()) && proto.rv.data.OutputDisplay.toObject(includeInstance, f),
colorEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 15, false),
colorAdjustment: (f = msg.getColorAdjustment()) && proto.rv.data.Screen.ColorAdjustment.toObject(includeInstance, f),
blendCompensation: (f = msg.getBlendCompensation()) && proto.rv.data.Screen.BlendCompensation.toObject(includeInstance, f),
alphaSettings: (f = msg.getAlphaSettings()) && proto.rv.data.Screen.AlphaSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Screen}
 */
proto.rv.data.Screen.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Screen;
  return proto.rv.data.Screen.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Screen} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Screen}
 */
proto.rv.data.Screen.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.UUID;
      reader.readMessage(value,proto.rv.data.UUID.deserializeBinaryFromReader);
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.rv.data.Color;
      reader.readMessage(value,proto.rv.data.Color.deserializeBinaryFromReader);
      msg.setColor(value);
      break;
    case 4:
      var value = new proto.rv.data.Graphics.Rect;
      reader.readMessage(value,proto.rv.data.Graphics.Rect.deserializeBinaryFromReader);
      msg.setBounds(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAspectRatioLocked(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOutputBoundsAspectRatioLocked(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCornerPinningEnabled(value);
      break;
    case 8:
      var value = new proto.rv.data.Graphics.Rect;
      reader.readMessage(value,proto.rv.data.Graphics.Rect.deserializeBinaryFromReader);
      msg.setSubscreenUnitRect(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRotation(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setGamma(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBlackLevel(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBlendedEdges(value);
      break;
    case 13:
      var value = new proto.rv.data.CornerValues;
      reader.readMessage(value,proto.rv.data.CornerValues.deserializeBinaryFromReader);
      msg.setCornerValues(value);
      break;
    case 14:
      var value = new proto.rv.data.OutputDisplay;
      reader.readMessage(value,proto.rv.data.OutputDisplay.deserializeBinaryFromReader);
      msg.setOutputDisplay(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setColorEnabled(value);
      break;
    case 16:
      var value = new proto.rv.data.Screen.ColorAdjustment;
      reader.readMessage(value,proto.rv.data.Screen.ColorAdjustment.deserializeBinaryFromReader);
      msg.setColorAdjustment(value);
      break;
    case 17:
      var value = new proto.rv.data.Screen.BlendCompensation;
      reader.readMessage(value,proto.rv.data.Screen.BlendCompensation.deserializeBinaryFromReader);
      msg.setBlendCompensation(value);
      break;
    case 18:
      var value = new proto.rv.data.Screen.AlphaSettings;
      reader.readMessage(value,proto.rv.data.Screen.AlphaSettings.deserializeBinaryFromReader);
      msg.setAlphaSettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Screen.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Screen.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Screen} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Screen.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.UUID.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getColor();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rv.data.Color.serializeBinaryToWriter
    );
  }
  f = message.getBounds();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rv.data.Graphics.Rect.serializeBinaryToWriter
    );
  }
  f = message.getAspectRatioLocked();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getOutputBoundsAspectRatioLocked();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getCornerPinningEnabled();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getSubscreenUnitRect();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.rv.data.Graphics.Rect.serializeBinaryToWriter
    );
  }
  f = message.getRotation();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getGamma();
  if (f !== 0.0) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = message.getBlackLevel();
  if (f !== 0.0) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = message.getBlendedEdges();
  if (f !== 0) {
    writer.writeUint32(
      12,
      f
    );
  }
  f = message.getCornerValues();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.rv.data.CornerValues.serializeBinaryToWriter
    );
  }
  f = message.getOutputDisplay();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.rv.data.OutputDisplay.serializeBinaryToWriter
    );
  }
  f = message.getColorEnabled();
  if (f) {
    writer.writeBool(
      15,
      f
    );
  }
  f = message.getColorAdjustment();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.rv.data.Screen.ColorAdjustment.serializeBinaryToWriter
    );
  }
  f = message.getBlendCompensation();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.rv.data.Screen.BlendCompensation.serializeBinaryToWriter
    );
  }
  f = message.getAlphaSettings();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.rv.data.Screen.AlphaSettings.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Screen.ColorAdjustment.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Screen.ColorAdjustment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Screen.ColorAdjustment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Screen.ColorAdjustment.toObject = function(includeInstance, msg) {
  var f, obj = {
gamma: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
blackLevel: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
redLevel: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
greenLevel: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
blueLevel: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
brightness: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
contrast: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Screen.ColorAdjustment}
 */
proto.rv.data.Screen.ColorAdjustment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Screen.ColorAdjustment;
  return proto.rv.data.Screen.ColorAdjustment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Screen.ColorAdjustment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Screen.ColorAdjustment}
 */
proto.rv.data.Screen.ColorAdjustment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setGamma(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBlackLevel(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRedLevel(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setGreenLevel(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBlueLevel(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBrightness(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setContrast(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Screen.ColorAdjustment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Screen.ColorAdjustment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Screen.ColorAdjustment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Screen.ColorAdjustment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGamma();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getBlackLevel();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getRedLevel();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getGreenLevel();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getBlueLevel();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getBrightness();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getContrast();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
};


/**
 * optional double gamma = 1;
 * @return {number}
 */
proto.rv.data.Screen.ColorAdjustment.prototype.getGamma = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.Screen.ColorAdjustment} returns this
 */
proto.rv.data.Screen.ColorAdjustment.prototype.setGamma = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double black_level = 2;
 * @return {number}
 */
proto.rv.data.Screen.ColorAdjustment.prototype.getBlackLevel = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.Screen.ColorAdjustment} returns this
 */
proto.rv.data.Screen.ColorAdjustment.prototype.setBlackLevel = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double red_level = 3;
 * @return {number}
 */
proto.rv.data.Screen.ColorAdjustment.prototype.getRedLevel = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.Screen.ColorAdjustment} returns this
 */
proto.rv.data.Screen.ColorAdjustment.prototype.setRedLevel = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double green_level = 4;
 * @return {number}
 */
proto.rv.data.Screen.ColorAdjustment.prototype.getGreenLevel = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.Screen.ColorAdjustment} returns this
 */
proto.rv.data.Screen.ColorAdjustment.prototype.setGreenLevel = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double blue_level = 5;
 * @return {number}
 */
proto.rv.data.Screen.ColorAdjustment.prototype.getBlueLevel = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.Screen.ColorAdjustment} returns this
 */
proto.rv.data.Screen.ColorAdjustment.prototype.setBlueLevel = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double brightness = 6;
 * @return {number}
 */
proto.rv.data.Screen.ColorAdjustment.prototype.getBrightness = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.Screen.ColorAdjustment} returns this
 */
proto.rv.data.Screen.ColorAdjustment.prototype.setBrightness = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double contrast = 7;
 * @return {number}
 */
proto.rv.data.Screen.ColorAdjustment.prototype.getContrast = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.Screen.ColorAdjustment} returns this
 */
proto.rv.data.Screen.ColorAdjustment.prototype.setContrast = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Screen.BlendCompensation.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Screen.BlendCompensation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Screen.BlendCompensation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Screen.BlendCompensation.toObject = function(includeInstance, msg) {
  var f, obj = {
blackLevel: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Screen.BlendCompensation}
 */
proto.rv.data.Screen.BlendCompensation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Screen.BlendCompensation;
  return proto.rv.data.Screen.BlendCompensation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Screen.BlendCompensation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Screen.BlendCompensation}
 */
proto.rv.data.Screen.BlendCompensation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBlackLevel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Screen.BlendCompensation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Screen.BlendCompensation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Screen.BlendCompensation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Screen.BlendCompensation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlackLevel();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
};


/**
 * optional double black_level = 1;
 * @return {number}
 */
proto.rv.data.Screen.BlendCompensation.prototype.getBlackLevel = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.Screen.BlendCompensation} returns this
 */
proto.rv.data.Screen.BlendCompensation.prototype.setBlackLevel = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Screen.AlphaSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Screen.AlphaSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Screen.AlphaSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Screen.AlphaSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
mode: jspb.Message.getFieldWithDefault(msg, 1, 0),
alphaDevice: (f = msg.getAlphaDevice()) && proto.rv.data.Screen.AlphaSettings.AlphaDevice.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Screen.AlphaSettings}
 */
proto.rv.data.Screen.AlphaSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Screen.AlphaSettings;
  return proto.rv.data.Screen.AlphaSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Screen.AlphaSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Screen.AlphaSettings}
 */
proto.rv.data.Screen.AlphaSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.rv.data.Screen.AlphaSettings.Mode} */ (reader.readEnum());
      msg.setMode(value);
      break;
    case 2:
      var value = new proto.rv.data.Screen.AlphaSettings.AlphaDevice;
      reader.readMessage(value,proto.rv.data.Screen.AlphaSettings.AlphaDevice.deserializeBinaryFromReader);
      msg.setAlphaDevice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Screen.AlphaSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Screen.AlphaSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Screen.AlphaSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Screen.AlphaSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getAlphaDevice();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rv.data.Screen.AlphaSettings.AlphaDevice.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.rv.data.Screen.AlphaSettings.Mode = {
  MODE_UNKNOWN: 0,
  MODE_DISABLED: 1,
  MODE_PREMULTIPLIED: 2,
  MODE_STRAIGHT: 3
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Screen.AlphaSettings.AlphaDevice.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Screen.AlphaSettings.AlphaDevice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Screen.AlphaSettings.AlphaDevice} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Screen.AlphaSettings.AlphaDevice.toObject = function(includeInstance, msg) {
  var f, obj = {
display: (f = msg.getDisplay()) && proto.rv.data.OutputDisplay.toObject(includeInstance, f),
subscreenUnitRect: (f = msg.getSubscreenUnitRect()) && proto.rv.data.Graphics.Rect.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Screen.AlphaSettings.AlphaDevice}
 */
proto.rv.data.Screen.AlphaSettings.AlphaDevice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Screen.AlphaSettings.AlphaDevice;
  return proto.rv.data.Screen.AlphaSettings.AlphaDevice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Screen.AlphaSettings.AlphaDevice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Screen.AlphaSettings.AlphaDevice}
 */
proto.rv.data.Screen.AlphaSettings.AlphaDevice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.OutputDisplay;
      reader.readMessage(value,proto.rv.data.OutputDisplay.deserializeBinaryFromReader);
      msg.setDisplay(value);
      break;
    case 2:
      var value = new proto.rv.data.Graphics.Rect;
      reader.readMessage(value,proto.rv.data.Graphics.Rect.deserializeBinaryFromReader);
      msg.setSubscreenUnitRect(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Screen.AlphaSettings.AlphaDevice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Screen.AlphaSettings.AlphaDevice.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Screen.AlphaSettings.AlphaDevice} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Screen.AlphaSettings.AlphaDevice.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDisplay();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.OutputDisplay.serializeBinaryToWriter
    );
  }
  f = message.getSubscreenUnitRect();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rv.data.Graphics.Rect.serializeBinaryToWriter
    );
  }
};


/**
 * optional OutputDisplay display = 1;
 * @return {?proto.rv.data.OutputDisplay}
 */
proto.rv.data.Screen.AlphaSettings.AlphaDevice.prototype.getDisplay = function() {
  return /** @type{?proto.rv.data.OutputDisplay} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.OutputDisplay, 1));
};


/**
 * @param {?proto.rv.data.OutputDisplay|undefined} value
 * @return {!proto.rv.data.Screen.AlphaSettings.AlphaDevice} returns this
*/
proto.rv.data.Screen.AlphaSettings.AlphaDevice.prototype.setDisplay = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Screen.AlphaSettings.AlphaDevice} returns this
 */
proto.rv.data.Screen.AlphaSettings.AlphaDevice.prototype.clearDisplay = function() {
  return this.setDisplay(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Screen.AlphaSettings.AlphaDevice.prototype.hasDisplay = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Graphics.Rect subscreen_unit_rect = 2;
 * @return {?proto.rv.data.Graphics.Rect}
 */
proto.rv.data.Screen.AlphaSettings.AlphaDevice.prototype.getSubscreenUnitRect = function() {
  return /** @type{?proto.rv.data.Graphics.Rect} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Graphics.Rect, 2));
};


/**
 * @param {?proto.rv.data.Graphics.Rect|undefined} value
 * @return {!proto.rv.data.Screen.AlphaSettings.AlphaDevice} returns this
*/
proto.rv.data.Screen.AlphaSettings.AlphaDevice.prototype.setSubscreenUnitRect = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Screen.AlphaSettings.AlphaDevice} returns this
 */
proto.rv.data.Screen.AlphaSettings.AlphaDevice.prototype.clearSubscreenUnitRect = function() {
  return this.setSubscreenUnitRect(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Screen.AlphaSettings.AlphaDevice.prototype.hasSubscreenUnitRect = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Mode mode = 1;
 * @return {!proto.rv.data.Screen.AlphaSettings.Mode}
 */
proto.rv.data.Screen.AlphaSettings.prototype.getMode = function() {
  return /** @type {!proto.rv.data.Screen.AlphaSettings.Mode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.rv.data.Screen.AlphaSettings.Mode} value
 * @return {!proto.rv.data.Screen.AlphaSettings} returns this
 */
proto.rv.data.Screen.AlphaSettings.prototype.setMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional AlphaDevice alpha_device = 2;
 * @return {?proto.rv.data.Screen.AlphaSettings.AlphaDevice}
 */
proto.rv.data.Screen.AlphaSettings.prototype.getAlphaDevice = function() {
  return /** @type{?proto.rv.data.Screen.AlphaSettings.AlphaDevice} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Screen.AlphaSettings.AlphaDevice, 2));
};


/**
 * @param {?proto.rv.data.Screen.AlphaSettings.AlphaDevice|undefined} value
 * @return {!proto.rv.data.Screen.AlphaSettings} returns this
*/
proto.rv.data.Screen.AlphaSettings.prototype.setAlphaDevice = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Screen.AlphaSettings} returns this
 */
proto.rv.data.Screen.AlphaSettings.prototype.clearAlphaDevice = function() {
  return this.setAlphaDevice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Screen.AlphaSettings.prototype.hasAlphaDevice = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional UUID uuid = 1;
 * @return {?proto.rv.data.UUID}
 */
proto.rv.data.Screen.prototype.getUuid = function() {
  return /** @type{?proto.rv.data.UUID} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.UUID, 1));
};


/**
 * @param {?proto.rv.data.UUID|undefined} value
 * @return {!proto.rv.data.Screen} returns this
*/
proto.rv.data.Screen.prototype.setUuid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Screen} returns this
 */
proto.rv.data.Screen.prototype.clearUuid = function() {
  return this.setUuid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Screen.prototype.hasUuid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.rv.data.Screen.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.Screen} returns this
 */
proto.rv.data.Screen.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Color color = 3;
 * @return {?proto.rv.data.Color}
 */
proto.rv.data.Screen.prototype.getColor = function() {
  return /** @type{?proto.rv.data.Color} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Color, 3));
};


/**
 * @param {?proto.rv.data.Color|undefined} value
 * @return {!proto.rv.data.Screen} returns this
*/
proto.rv.data.Screen.prototype.setColor = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Screen} returns this
 */
proto.rv.data.Screen.prototype.clearColor = function() {
  return this.setColor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Screen.prototype.hasColor = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Graphics.Rect bounds = 4;
 * @return {?proto.rv.data.Graphics.Rect}
 */
proto.rv.data.Screen.prototype.getBounds = function() {
  return /** @type{?proto.rv.data.Graphics.Rect} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Graphics.Rect, 4));
};


/**
 * @param {?proto.rv.data.Graphics.Rect|undefined} value
 * @return {!proto.rv.data.Screen} returns this
*/
proto.rv.data.Screen.prototype.setBounds = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Screen} returns this
 */
proto.rv.data.Screen.prototype.clearBounds = function() {
  return this.setBounds(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Screen.prototype.hasBounds = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool aspect_ratio_locked = 5;
 * @return {boolean}
 */
proto.rv.data.Screen.prototype.getAspectRatioLocked = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.Screen} returns this
 */
proto.rv.data.Screen.prototype.setAspectRatioLocked = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool output_bounds_aspect_ratio_locked = 6;
 * @return {boolean}
 */
proto.rv.data.Screen.prototype.getOutputBoundsAspectRatioLocked = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.Screen} returns this
 */
proto.rv.data.Screen.prototype.setOutputBoundsAspectRatioLocked = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool corner_pinning_enabled = 7;
 * @return {boolean}
 */
proto.rv.data.Screen.prototype.getCornerPinningEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.Screen} returns this
 */
proto.rv.data.Screen.prototype.setCornerPinningEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional Graphics.Rect subscreen_unit_rect = 8;
 * @return {?proto.rv.data.Graphics.Rect}
 */
proto.rv.data.Screen.prototype.getSubscreenUnitRect = function() {
  return /** @type{?proto.rv.data.Graphics.Rect} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Graphics.Rect, 8));
};


/**
 * @param {?proto.rv.data.Graphics.Rect|undefined} value
 * @return {!proto.rv.data.Screen} returns this
*/
proto.rv.data.Screen.prototype.setSubscreenUnitRect = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Screen} returns this
 */
proto.rv.data.Screen.prototype.clearSubscreenUnitRect = function() {
  return this.setSubscreenUnitRect(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Screen.prototype.hasSubscreenUnitRect = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional double rotation = 9;
 * @return {number}
 */
proto.rv.data.Screen.prototype.getRotation = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.Screen} returns this
 */
proto.rv.data.Screen.prototype.setRotation = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional double gamma = 10;
 * @return {number}
 */
proto.rv.data.Screen.prototype.getGamma = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.Screen} returns this
 */
proto.rv.data.Screen.prototype.setGamma = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional double black_level = 11;
 * @return {number}
 */
proto.rv.data.Screen.prototype.getBlackLevel = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.Screen} returns this
 */
proto.rv.data.Screen.prototype.setBlackLevel = function(value) {
  return jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional uint32 blended_edges = 12;
 * @return {number}
 */
proto.rv.data.Screen.prototype.getBlendedEdges = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.Screen} returns this
 */
proto.rv.data.Screen.prototype.setBlendedEdges = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional CornerValues corner_values = 13;
 * @return {?proto.rv.data.CornerValues}
 */
proto.rv.data.Screen.prototype.getCornerValues = function() {
  return /** @type{?proto.rv.data.CornerValues} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.CornerValues, 13));
};


/**
 * @param {?proto.rv.data.CornerValues|undefined} value
 * @return {!proto.rv.data.Screen} returns this
*/
proto.rv.data.Screen.prototype.setCornerValues = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Screen} returns this
 */
proto.rv.data.Screen.prototype.clearCornerValues = function() {
  return this.setCornerValues(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Screen.prototype.hasCornerValues = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional OutputDisplay output_display = 14;
 * @return {?proto.rv.data.OutputDisplay}
 */
proto.rv.data.Screen.prototype.getOutputDisplay = function() {
  return /** @type{?proto.rv.data.OutputDisplay} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.OutputDisplay, 14));
};


/**
 * @param {?proto.rv.data.OutputDisplay|undefined} value
 * @return {!proto.rv.data.Screen} returns this
*/
proto.rv.data.Screen.prototype.setOutputDisplay = function(value) {
  return jspb.Message.setWrapperField(this, 14, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Screen} returns this
 */
proto.rv.data.Screen.prototype.clearOutputDisplay = function() {
  return this.setOutputDisplay(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Screen.prototype.hasOutputDisplay = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional bool color_enabled = 15;
 * @return {boolean}
 */
proto.rv.data.Screen.prototype.getColorEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.Screen} returns this
 */
proto.rv.data.Screen.prototype.setColorEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 15, value);
};


/**
 * optional ColorAdjustment color_adjustment = 16;
 * @return {?proto.rv.data.Screen.ColorAdjustment}
 */
proto.rv.data.Screen.prototype.getColorAdjustment = function() {
  return /** @type{?proto.rv.data.Screen.ColorAdjustment} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Screen.ColorAdjustment, 16));
};


/**
 * @param {?proto.rv.data.Screen.ColorAdjustment|undefined} value
 * @return {!proto.rv.data.Screen} returns this
*/
proto.rv.data.Screen.prototype.setColorAdjustment = function(value) {
  return jspb.Message.setWrapperField(this, 16, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Screen} returns this
 */
proto.rv.data.Screen.prototype.clearColorAdjustment = function() {
  return this.setColorAdjustment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Screen.prototype.hasColorAdjustment = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional BlendCompensation blend_compensation = 17;
 * @return {?proto.rv.data.Screen.BlendCompensation}
 */
proto.rv.data.Screen.prototype.getBlendCompensation = function() {
  return /** @type{?proto.rv.data.Screen.BlendCompensation} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Screen.BlendCompensation, 17));
};


/**
 * @param {?proto.rv.data.Screen.BlendCompensation|undefined} value
 * @return {!proto.rv.data.Screen} returns this
*/
proto.rv.data.Screen.prototype.setBlendCompensation = function(value) {
  return jspb.Message.setWrapperField(this, 17, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Screen} returns this
 */
proto.rv.data.Screen.prototype.clearBlendCompensation = function() {
  return this.setBlendCompensation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Screen.prototype.hasBlendCompensation = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional AlphaSettings alpha_settings = 18;
 * @return {?proto.rv.data.Screen.AlphaSettings}
 */
proto.rv.data.Screen.prototype.getAlphaSettings = function() {
  return /** @type{?proto.rv.data.Screen.AlphaSettings} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Screen.AlphaSettings, 18));
};


/**
 * @param {?proto.rv.data.Screen.AlphaSettings|undefined} value
 * @return {!proto.rv.data.Screen} returns this
*/
proto.rv.data.Screen.prototype.setAlphaSettings = function(value) {
  return jspb.Message.setWrapperField(this, 18, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Screen} returns this
 */
proto.rv.data.Screen.prototype.clearAlphaSettings = function() {
  return this.setAlphaSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Screen.prototype.hasAlphaSettings = function() {
  return jspb.Message.getField(this, 18) != null;
};


