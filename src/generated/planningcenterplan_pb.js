// source: planningCenter.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.rv.data.PlanningCenterPlan');
goog.provide('proto.rv.data.PlanningCenterPlan.PlanItem');
goog.provide('proto.rv.data.PlanningCenterPlan.PlanItem.Attachment');
goog.provide('proto.rv.data.PlanningCenterPlan.PlanItem.PlanItemType');
goog.provide('proto.rv.data.PlanningCenterPlan.PlanItem.SongItem');
goog.provide('proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.Sequence');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.rv.data.Presentation.CCLI');
goog.require('proto.rv.data.Timestamp');
goog.require('proto.rv.data.URL');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.PlanningCenterPlan = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.PlanningCenterPlan, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.PlanningCenterPlan.displayName = 'proto.rv.data.PlanningCenterPlan';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.PlanningCenterPlan.PlanItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rv.data.PlanningCenterPlan.PlanItem.repeatedFields_, null);
};
goog.inherits(proto.rv.data.PlanningCenterPlan.PlanItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.PlanningCenterPlan.PlanItem.displayName = 'proto.rv.data.PlanningCenterPlan.PlanItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.PlanningCenterPlan.PlanItem.Attachment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.PlanningCenterPlan.PlanItem.Attachment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.PlanningCenterPlan.PlanItem.Attachment.displayName = 'proto.rv.data.PlanningCenterPlan.PlanItem.Attachment';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.PlanningCenterPlan.PlanItem.SongItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.PlanningCenterPlan.PlanItem.SongItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.displayName = 'proto.rv.data.PlanningCenterPlan.PlanItem.SongItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.Sequence = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.Sequence.repeatedFields_, null);
};
goog.inherits(proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.Sequence, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.Sequence.displayName = 'proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.Sequence';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.PlanningCenterPlan.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.PlanningCenterPlan.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.PlanningCenterPlan} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.PlanningCenterPlan.toObject = function(includeInstance, msg) {
  var f, obj = {
planIdNum: jspb.Message.getFieldWithDefault(msg, 1, 0),
parentIdNum: jspb.Message.getFieldWithDefault(msg, 2, 0),
seriesTitle: jspb.Message.getFieldWithDefault(msg, 3, ""),
planTitle: jspb.Message.getFieldWithDefault(msg, 4, ""),
dateList: jspb.Message.getFieldWithDefault(msg, 5, ""),
createdDate: (f = msg.getCreatedDate()) && proto.rv.data.Timestamp.toObject(includeInstance, f),
updateDate: (f = msg.getUpdateDate()) && proto.rv.data.Timestamp.toObject(includeInstance, f),
lastUpdateCheckDate: (f = msg.getLastUpdateCheckDate()) && proto.rv.data.Timestamp.toObject(includeInstance, f),
planIdStr: jspb.Message.getFieldWithDefault(msg, 9, ""),
parentIdStr: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.PlanningCenterPlan}
 */
proto.rv.data.PlanningCenterPlan.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.PlanningCenterPlan;
  return proto.rv.data.PlanningCenterPlan.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.PlanningCenterPlan} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.PlanningCenterPlan}
 */
proto.rv.data.PlanningCenterPlan.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPlanIdNum(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setParentIdNum(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeriesTitle(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlanTitle(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDateList(value);
      break;
    case 6:
      var value = new proto.rv.data.Timestamp;
      reader.readMessage(value,proto.rv.data.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedDate(value);
      break;
    case 7:
      var value = new proto.rv.data.Timestamp;
      reader.readMessage(value,proto.rv.data.Timestamp.deserializeBinaryFromReader);
      msg.setUpdateDate(value);
      break;
    case 8:
      var value = new proto.rv.data.Timestamp;
      reader.readMessage(value,proto.rv.data.Timestamp.deserializeBinaryFromReader);
      msg.setLastUpdateCheckDate(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlanIdStr(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setParentIdStr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.PlanningCenterPlan.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.PlanningCenterPlan.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.PlanningCenterPlan} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.PlanningCenterPlan.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlanIdNum();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getParentIdNum();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getSeriesTitle();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPlanTitle();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDateList();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCreatedDate();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.rv.data.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getUpdateDate();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.rv.data.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getLastUpdateCheckDate();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.rv.data.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getPlanIdStr();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getParentIdStr();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rv.data.PlanningCenterPlan.PlanItem.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.PlanningCenterPlan.PlanItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.PlanningCenterPlan.PlanItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.PlanningCenterPlan.PlanItem.toObject = function(includeInstance, msg) {
  var f, obj = {
itemType: jspb.Message.getFieldWithDefault(msg, 1, 0),
pcoIdNum: jspb.Message.getFieldWithDefault(msg, 2, 0),
serviceIdNum: jspb.Message.getFieldWithDefault(msg, 3, 0),
parentIdNum: jspb.Message.getFieldWithDefault(msg, 4, 0),
name: jspb.Message.getFieldWithDefault(msg, 5, ""),
attachmentsList: jspb.Message.toObjectList(msg.getAttachmentsList(),
    proto.rv.data.PlanningCenterPlan.PlanItem.Attachment.toObject, includeInstance),
updateDate: (f = msg.getUpdateDate()) && proto.rv.data.Timestamp.toObject(includeInstance, f),
linkedSong: (f = msg.getLinkedSong()) && proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.toObject(includeInstance, f),
pcoIdStr: jspb.Message.getFieldWithDefault(msg, 9, ""),
serviceIdStr: jspb.Message.getFieldWithDefault(msg, 10, ""),
parentIdStr: jspb.Message.getFieldWithDefault(msg, 11, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.PlanningCenterPlan.PlanItem}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.PlanningCenterPlan.PlanItem;
  return proto.rv.data.PlanningCenterPlan.PlanItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.PlanningCenterPlan.PlanItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.PlanningCenterPlan.PlanItem}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.rv.data.PlanningCenterPlan.PlanItem.PlanItemType} */ (reader.readEnum());
      msg.setItemType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPcoIdNum(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setServiceIdNum(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setParentIdNum(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 6:
      var value = new proto.rv.data.PlanningCenterPlan.PlanItem.Attachment;
      reader.readMessage(value,proto.rv.data.PlanningCenterPlan.PlanItem.Attachment.deserializeBinaryFromReader);
      msg.addAttachments(value);
      break;
    case 7:
      var value = new proto.rv.data.Timestamp;
      reader.readMessage(value,proto.rv.data.Timestamp.deserializeBinaryFromReader);
      msg.setUpdateDate(value);
      break;
    case 8:
      var value = new proto.rv.data.PlanningCenterPlan.PlanItem.SongItem;
      reader.readMessage(value,proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.deserializeBinaryFromReader);
      msg.setLinkedSong(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setPcoIdStr(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setServiceIdStr(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setParentIdStr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.PlanningCenterPlan.PlanItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.PlanningCenterPlan.PlanItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.PlanningCenterPlan.PlanItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPcoIdNum();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getServiceIdNum();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getParentIdNum();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAttachmentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.rv.data.PlanningCenterPlan.PlanItem.Attachment.serializeBinaryToWriter
    );
  }
  f = message.getUpdateDate();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.rv.data.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getLinkedSong();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.serializeBinaryToWriter
    );
  }
  f = message.getPcoIdStr();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getServiceIdStr();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getParentIdStr();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.PlanItemType = {
  PLAN_ITEM_TYPE_ITEM: 0,
  PLAN_ITEM_TYPE_SONG: 1,
  PLAN_ITEM_TYPE_MEDIA: 2,
  PLAN_ITEM_TYPE_HEADER: 3
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.Attachment.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.PlanningCenterPlan.PlanItem.Attachment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.PlanningCenterPlan.PlanItem.Attachment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.PlanningCenterPlan.PlanItem.Attachment.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, ""),
url: (f = msg.getUrl()) && proto.rv.data.URL.toObject(includeInstance, f),
createdDate: (f = msg.getCreatedDate()) && proto.rv.data.Timestamp.toObject(includeInstance, f),
linkedPath: (f = msg.getLinkedPath()) && proto.rv.data.URL.toObject(includeInstance, f),
pcoIdNum: jspb.Message.getFieldWithDefault(msg, 5, 0),
needsUpdate: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
updateDate: (f = msg.getUpdateDate()) && proto.rv.data.Timestamp.toObject(includeInstance, f),
pcoIdStr: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.PlanningCenterPlan.PlanItem.Attachment}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.Attachment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.PlanningCenterPlan.PlanItem.Attachment;
  return proto.rv.data.PlanningCenterPlan.PlanItem.Attachment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.PlanningCenterPlan.PlanItem.Attachment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.PlanningCenterPlan.PlanItem.Attachment}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.Attachment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.rv.data.URL;
      reader.readMessage(value,proto.rv.data.URL.deserializeBinaryFromReader);
      msg.setUrl(value);
      break;
    case 3:
      var value = new proto.rv.data.Timestamp;
      reader.readMessage(value,proto.rv.data.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedDate(value);
      break;
    case 4:
      var value = new proto.rv.data.URL;
      reader.readMessage(value,proto.rv.data.URL.deserializeBinaryFromReader);
      msg.setLinkedPath(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPcoIdNum(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNeedsUpdate(value);
      break;
    case 7:
      var value = new proto.rv.data.Timestamp;
      reader.readMessage(value,proto.rv.data.Timestamp.deserializeBinaryFromReader);
      msg.setUpdateDate(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setPcoIdStr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.Attachment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.PlanningCenterPlan.PlanItem.Attachment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.PlanningCenterPlan.PlanItem.Attachment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.PlanningCenterPlan.PlanItem.Attachment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUrl();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rv.data.URL.serializeBinaryToWriter
    );
  }
  f = message.getCreatedDate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rv.data.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getLinkedPath();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rv.data.URL.serializeBinaryToWriter
    );
  }
  f = message.getPcoIdNum();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getNeedsUpdate();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getUpdateDate();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.rv.data.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getPcoIdStr();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.Attachment.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.PlanningCenterPlan.PlanItem.Attachment} returns this
 */
proto.rv.data.PlanningCenterPlan.PlanItem.Attachment.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional URL url = 2;
 * @return {?proto.rv.data.URL}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.Attachment.prototype.getUrl = function() {
  return /** @type{?proto.rv.data.URL} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.URL, 2));
};


/**
 * @param {?proto.rv.data.URL|undefined} value
 * @return {!proto.rv.data.PlanningCenterPlan.PlanItem.Attachment} returns this
*/
proto.rv.data.PlanningCenterPlan.PlanItem.Attachment.prototype.setUrl = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.PlanningCenterPlan.PlanItem.Attachment} returns this
 */
proto.rv.data.PlanningCenterPlan.PlanItem.Attachment.prototype.clearUrl = function() {
  return this.setUrl(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.Attachment.prototype.hasUrl = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Timestamp created_date = 3;
 * @return {?proto.rv.data.Timestamp}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.Attachment.prototype.getCreatedDate = function() {
  return /** @type{?proto.rv.data.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Timestamp, 3));
};


/**
 * @param {?proto.rv.data.Timestamp|undefined} value
 * @return {!proto.rv.data.PlanningCenterPlan.PlanItem.Attachment} returns this
*/
proto.rv.data.PlanningCenterPlan.PlanItem.Attachment.prototype.setCreatedDate = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.PlanningCenterPlan.PlanItem.Attachment} returns this
 */
proto.rv.data.PlanningCenterPlan.PlanItem.Attachment.prototype.clearCreatedDate = function() {
  return this.setCreatedDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.Attachment.prototype.hasCreatedDate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional URL linked_path = 4;
 * @return {?proto.rv.data.URL}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.Attachment.prototype.getLinkedPath = function() {
  return /** @type{?proto.rv.data.URL} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.URL, 4));
};


/**
 * @param {?proto.rv.data.URL|undefined} value
 * @return {!proto.rv.data.PlanningCenterPlan.PlanItem.Attachment} returns this
*/
proto.rv.data.PlanningCenterPlan.PlanItem.Attachment.prototype.setLinkedPath = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.PlanningCenterPlan.PlanItem.Attachment} returns this
 */
proto.rv.data.PlanningCenterPlan.PlanItem.Attachment.prototype.clearLinkedPath = function() {
  return this.setLinkedPath(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.Attachment.prototype.hasLinkedPath = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 pco_id_num = 5;
 * @return {number}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.Attachment.prototype.getPcoIdNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.PlanningCenterPlan.PlanItem.Attachment} returns this
 */
proto.rv.data.PlanningCenterPlan.PlanItem.Attachment.prototype.setPcoIdNum = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bool needs_update = 6;
 * @return {boolean}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.Attachment.prototype.getNeedsUpdate = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.PlanningCenterPlan.PlanItem.Attachment} returns this
 */
proto.rv.data.PlanningCenterPlan.PlanItem.Attachment.prototype.setNeedsUpdate = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional Timestamp update_date = 7;
 * @return {?proto.rv.data.Timestamp}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.Attachment.prototype.getUpdateDate = function() {
  return /** @type{?proto.rv.data.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Timestamp, 7));
};


/**
 * @param {?proto.rv.data.Timestamp|undefined} value
 * @return {!proto.rv.data.PlanningCenterPlan.PlanItem.Attachment} returns this
*/
proto.rv.data.PlanningCenterPlan.PlanItem.Attachment.prototype.setUpdateDate = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.PlanningCenterPlan.PlanItem.Attachment} returns this
 */
proto.rv.data.PlanningCenterPlan.PlanItem.Attachment.prototype.clearUpdateDate = function() {
  return this.setUpdateDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.Attachment.prototype.hasUpdateDate = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string pco_id_str = 8;
 * @return {string}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.Attachment.prototype.getPcoIdStr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.PlanningCenterPlan.PlanItem.Attachment} returns this
 */
proto.rv.data.PlanningCenterPlan.PlanItem.Attachment.prototype.setPcoIdStr = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.PlanningCenterPlan.PlanItem.SongItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.toObject = function(includeInstance, msg) {
  var f, obj = {
pcoIdNum: jspb.Message.getFieldWithDefault(msg, 1, 0),
arrangementIdNum: jspb.Message.getFieldWithDefault(msg, 2, 0),
ccli: (f = msg.getCcli()) && proto.rv.data.Presentation.CCLI.toObject(includeInstance, f),
sequence: (f = msg.getSequence()) && proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.Sequence.toObject(includeInstance, f),
pcoIdStr: jspb.Message.getFieldWithDefault(msg, 5, ""),
arrangementIdStr: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.PlanningCenterPlan.PlanItem.SongItem}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.PlanningCenterPlan.PlanItem.SongItem;
  return proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.PlanningCenterPlan.PlanItem.SongItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.PlanningCenterPlan.PlanItem.SongItem}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPcoIdNum(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setArrangementIdNum(value);
      break;
    case 3:
      var value = new proto.rv.data.Presentation.CCLI;
      reader.readMessage(value,proto.rv.data.Presentation.CCLI.deserializeBinaryFromReader);
      msg.setCcli(value);
      break;
    case 4:
      var value = new proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.Sequence;
      reader.readMessage(value,proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.Sequence.deserializeBinaryFromReader);
      msg.setSequence(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPcoIdStr(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setArrangementIdStr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.PlanningCenterPlan.PlanItem.SongItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPcoIdNum();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getArrangementIdNum();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getCcli();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rv.data.Presentation.CCLI.serializeBinaryToWriter
    );
  }
  f = message.getSequence();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.Sequence.serializeBinaryToWriter
    );
  }
  f = message.getPcoIdStr();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getArrangementIdStr();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.Sequence.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.Sequence.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.Sequence.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.Sequence} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.Sequence.toObject = function(includeInstance, msg) {
  var f, obj = {
pcoIdNum: jspb.Message.getFieldWithDefault(msg, 1, 0),
name: jspb.Message.getFieldWithDefault(msg, 2, ""),
groupNamesList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
pcoIdStr: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.Sequence}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.Sequence.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.Sequence;
  return proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.Sequence.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.Sequence} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.Sequence}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.Sequence.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPcoIdNum(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addGroupNames(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPcoIdStr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.Sequence.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.Sequence.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.Sequence} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.Sequence.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPcoIdNum();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGroupNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getPcoIdStr();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional uint32 pco_id_num = 1;
 * @return {number}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.Sequence.prototype.getPcoIdNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.Sequence} returns this
 */
proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.Sequence.prototype.setPcoIdNum = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.Sequence.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.Sequence} returns this
 */
proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.Sequence.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string group_names = 3;
 * @return {!Array<string>}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.Sequence.prototype.getGroupNamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.Sequence} returns this
 */
proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.Sequence.prototype.setGroupNamesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.Sequence} returns this
 */
proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.Sequence.prototype.addGroupNames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.Sequence} returns this
 */
proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.Sequence.prototype.clearGroupNamesList = function() {
  return this.setGroupNamesList([]);
};


/**
 * optional string pco_id_str = 4;
 * @return {string}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.Sequence.prototype.getPcoIdStr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.Sequence} returns this
 */
proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.Sequence.prototype.setPcoIdStr = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint32 pco_id_num = 1;
 * @return {number}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.prototype.getPcoIdNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.PlanningCenterPlan.PlanItem.SongItem} returns this
 */
proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.prototype.setPcoIdNum = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 arrangement_id_num = 2;
 * @return {number}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.prototype.getArrangementIdNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.PlanningCenterPlan.PlanItem.SongItem} returns this
 */
proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.prototype.setArrangementIdNum = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Presentation.CCLI ccli = 3;
 * @return {?proto.rv.data.Presentation.CCLI}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.prototype.getCcli = function() {
  return /** @type{?proto.rv.data.Presentation.CCLI} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Presentation.CCLI, 3));
};


/**
 * @param {?proto.rv.data.Presentation.CCLI|undefined} value
 * @return {!proto.rv.data.PlanningCenterPlan.PlanItem.SongItem} returns this
*/
proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.prototype.setCcli = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.PlanningCenterPlan.PlanItem.SongItem} returns this
 */
proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.prototype.clearCcli = function() {
  return this.setCcli(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.prototype.hasCcli = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Sequence sequence = 4;
 * @return {?proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.Sequence}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.prototype.getSequence = function() {
  return /** @type{?proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.Sequence} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.Sequence, 4));
};


/**
 * @param {?proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.Sequence|undefined} value
 * @return {!proto.rv.data.PlanningCenterPlan.PlanItem.SongItem} returns this
*/
proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.prototype.setSequence = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.PlanningCenterPlan.PlanItem.SongItem} returns this
 */
proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.prototype.clearSequence = function() {
  return this.setSequence(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.prototype.hasSequence = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string pco_id_str = 5;
 * @return {string}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.prototype.getPcoIdStr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.PlanningCenterPlan.PlanItem.SongItem} returns this
 */
proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.prototype.setPcoIdStr = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string arrangement_id_str = 6;
 * @return {string}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.prototype.getArrangementIdStr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.PlanningCenterPlan.PlanItem.SongItem} returns this
 */
proto.rv.data.PlanningCenterPlan.PlanItem.SongItem.prototype.setArrangementIdStr = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional PlanItemType item_type = 1;
 * @return {!proto.rv.data.PlanningCenterPlan.PlanItem.PlanItemType}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.prototype.getItemType = function() {
  return /** @type {!proto.rv.data.PlanningCenterPlan.PlanItem.PlanItemType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.rv.data.PlanningCenterPlan.PlanItem.PlanItemType} value
 * @return {!proto.rv.data.PlanningCenterPlan.PlanItem} returns this
 */
proto.rv.data.PlanningCenterPlan.PlanItem.prototype.setItemType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint32 pco_id_num = 2;
 * @return {number}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.prototype.getPcoIdNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.PlanningCenterPlan.PlanItem} returns this
 */
proto.rv.data.PlanningCenterPlan.PlanItem.prototype.setPcoIdNum = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 service_id_num = 3;
 * @return {number}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.prototype.getServiceIdNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.PlanningCenterPlan.PlanItem} returns this
 */
proto.rv.data.PlanningCenterPlan.PlanItem.prototype.setServiceIdNum = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 parent_id_num = 4;
 * @return {number}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.prototype.getParentIdNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.PlanningCenterPlan.PlanItem} returns this
 */
proto.rv.data.PlanningCenterPlan.PlanItem.prototype.setParentIdNum = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string name = 5;
 * @return {string}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.PlanningCenterPlan.PlanItem} returns this
 */
proto.rv.data.PlanningCenterPlan.PlanItem.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated Attachment attachments = 6;
 * @return {!Array<!proto.rv.data.PlanningCenterPlan.PlanItem.Attachment>}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.prototype.getAttachmentsList = function() {
  return /** @type{!Array<!proto.rv.data.PlanningCenterPlan.PlanItem.Attachment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rv.data.PlanningCenterPlan.PlanItem.Attachment, 6));
};


/**
 * @param {!Array<!proto.rv.data.PlanningCenterPlan.PlanItem.Attachment>} value
 * @return {!proto.rv.data.PlanningCenterPlan.PlanItem} returns this
*/
proto.rv.data.PlanningCenterPlan.PlanItem.prototype.setAttachmentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.rv.data.PlanningCenterPlan.PlanItem.Attachment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rv.data.PlanningCenterPlan.PlanItem.Attachment}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.prototype.addAttachments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.rv.data.PlanningCenterPlan.PlanItem.Attachment, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.PlanningCenterPlan.PlanItem} returns this
 */
proto.rv.data.PlanningCenterPlan.PlanItem.prototype.clearAttachmentsList = function() {
  return this.setAttachmentsList([]);
};


/**
 * optional Timestamp update_date = 7;
 * @return {?proto.rv.data.Timestamp}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.prototype.getUpdateDate = function() {
  return /** @type{?proto.rv.data.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Timestamp, 7));
};


/**
 * @param {?proto.rv.data.Timestamp|undefined} value
 * @return {!proto.rv.data.PlanningCenterPlan.PlanItem} returns this
*/
proto.rv.data.PlanningCenterPlan.PlanItem.prototype.setUpdateDate = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.PlanningCenterPlan.PlanItem} returns this
 */
proto.rv.data.PlanningCenterPlan.PlanItem.prototype.clearUpdateDate = function() {
  return this.setUpdateDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.prototype.hasUpdateDate = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional SongItem linked_song = 8;
 * @return {?proto.rv.data.PlanningCenterPlan.PlanItem.SongItem}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.prototype.getLinkedSong = function() {
  return /** @type{?proto.rv.data.PlanningCenterPlan.PlanItem.SongItem} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.PlanningCenterPlan.PlanItem.SongItem, 8));
};


/**
 * @param {?proto.rv.data.PlanningCenterPlan.PlanItem.SongItem|undefined} value
 * @return {!proto.rv.data.PlanningCenterPlan.PlanItem} returns this
*/
proto.rv.data.PlanningCenterPlan.PlanItem.prototype.setLinkedSong = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.PlanningCenterPlan.PlanItem} returns this
 */
proto.rv.data.PlanningCenterPlan.PlanItem.prototype.clearLinkedSong = function() {
  return this.setLinkedSong(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.prototype.hasLinkedSong = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string pco_id_str = 9;
 * @return {string}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.prototype.getPcoIdStr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.PlanningCenterPlan.PlanItem} returns this
 */
proto.rv.data.PlanningCenterPlan.PlanItem.prototype.setPcoIdStr = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string service_id_str = 10;
 * @return {string}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.prototype.getServiceIdStr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.PlanningCenterPlan.PlanItem} returns this
 */
proto.rv.data.PlanningCenterPlan.PlanItem.prototype.setServiceIdStr = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string parent_id_str = 11;
 * @return {string}
 */
proto.rv.data.PlanningCenterPlan.PlanItem.prototype.getParentIdStr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.PlanningCenterPlan.PlanItem} returns this
 */
proto.rv.data.PlanningCenterPlan.PlanItem.prototype.setParentIdStr = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional uint32 plan_id_num = 1;
 * @return {number}
 */
proto.rv.data.PlanningCenterPlan.prototype.getPlanIdNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.PlanningCenterPlan} returns this
 */
proto.rv.data.PlanningCenterPlan.prototype.setPlanIdNum = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 parent_id_num = 2;
 * @return {number}
 */
proto.rv.data.PlanningCenterPlan.prototype.getParentIdNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.PlanningCenterPlan} returns this
 */
proto.rv.data.PlanningCenterPlan.prototype.setParentIdNum = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string series_title = 3;
 * @return {string}
 */
proto.rv.data.PlanningCenterPlan.prototype.getSeriesTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.PlanningCenterPlan} returns this
 */
proto.rv.data.PlanningCenterPlan.prototype.setSeriesTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string plan_title = 4;
 * @return {string}
 */
proto.rv.data.PlanningCenterPlan.prototype.getPlanTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.PlanningCenterPlan} returns this
 */
proto.rv.data.PlanningCenterPlan.prototype.setPlanTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string date_list = 5;
 * @return {string}
 */
proto.rv.data.PlanningCenterPlan.prototype.getDateList = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.PlanningCenterPlan} returns this
 */
proto.rv.data.PlanningCenterPlan.prototype.setDateList = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional Timestamp created_date = 6;
 * @return {?proto.rv.data.Timestamp}
 */
proto.rv.data.PlanningCenterPlan.prototype.getCreatedDate = function() {
  return /** @type{?proto.rv.data.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Timestamp, 6));
};


/**
 * @param {?proto.rv.data.Timestamp|undefined} value
 * @return {!proto.rv.data.PlanningCenterPlan} returns this
*/
proto.rv.data.PlanningCenterPlan.prototype.setCreatedDate = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.PlanningCenterPlan} returns this
 */
proto.rv.data.PlanningCenterPlan.prototype.clearCreatedDate = function() {
  return this.setCreatedDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.PlanningCenterPlan.prototype.hasCreatedDate = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Timestamp update_date = 7;
 * @return {?proto.rv.data.Timestamp}
 */
proto.rv.data.PlanningCenterPlan.prototype.getUpdateDate = function() {
  return /** @type{?proto.rv.data.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Timestamp, 7));
};


/**
 * @param {?proto.rv.data.Timestamp|undefined} value
 * @return {!proto.rv.data.PlanningCenterPlan} returns this
*/
proto.rv.data.PlanningCenterPlan.prototype.setUpdateDate = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.PlanningCenterPlan} returns this
 */
proto.rv.data.PlanningCenterPlan.prototype.clearUpdateDate = function() {
  return this.setUpdateDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.PlanningCenterPlan.prototype.hasUpdateDate = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Timestamp last_update_check_date = 8;
 * @return {?proto.rv.data.Timestamp}
 */
proto.rv.data.PlanningCenterPlan.prototype.getLastUpdateCheckDate = function() {
  return /** @type{?proto.rv.data.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Timestamp, 8));
};


/**
 * @param {?proto.rv.data.Timestamp|undefined} value
 * @return {!proto.rv.data.PlanningCenterPlan} returns this
*/
proto.rv.data.PlanningCenterPlan.prototype.setLastUpdateCheckDate = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.PlanningCenterPlan} returns this
 */
proto.rv.data.PlanningCenterPlan.prototype.clearLastUpdateCheckDate = function() {
  return this.setLastUpdateCheckDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.PlanningCenterPlan.prototype.hasLastUpdateCheckDate = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string plan_id_str = 9;
 * @return {string}
 */
proto.rv.data.PlanningCenterPlan.prototype.getPlanIdStr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.PlanningCenterPlan} returns this
 */
proto.rv.data.PlanningCenterPlan.prototype.setPlanIdStr = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string parent_id_str = 10;
 * @return {string}
 */
proto.rv.data.PlanningCenterPlan.prototype.getParentIdStr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.PlanningCenterPlan} returns this
 */
proto.rv.data.PlanningCenterPlan.prototype.setParentIdStr = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


