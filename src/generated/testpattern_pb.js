// source: testPattern.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.rv.data.TestPattern');
goog.provide('proto.rv.data.TestPattern.BlendGrid');
goog.provide('proto.rv.data.TestPattern.CustomColor');
goog.provide('proto.rv.data.TestPattern.IntensityColor');
goog.provide('proto.rv.data.TestPattern.PatternpropertiesCase');
goog.provide('proto.rv.data.TestPattern.Type');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.rv.data.Color');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TestPattern = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rv.data.TestPattern.oneofGroups_);
};
goog.inherits(proto.rv.data.TestPattern, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TestPattern.displayName = 'proto.rv.data.TestPattern';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TestPattern.BlendGrid = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.TestPattern.BlendGrid, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TestPattern.BlendGrid.displayName = 'proto.rv.data.TestPattern.BlendGrid';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TestPattern.CustomColor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.TestPattern.CustomColor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TestPattern.CustomColor.displayName = 'proto.rv.data.TestPattern.CustomColor';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TestPattern.IntensityColor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.TestPattern.IntensityColor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TestPattern.IntensityColor.displayName = 'proto.rv.data.TestPattern.IntensityColor';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rv.data.TestPattern.oneofGroups_ = [[2,3,4]];

/**
 * @enum {number}
 */
proto.rv.data.TestPattern.PatternpropertiesCase = {
  PATTERNPROPERTIES_NOT_SET: 0,
  BLEND_GRID: 2,
  CUSTOM_COLOR: 3,
  INTENSITY: 4
};

/**
 * @return {proto.rv.data.TestPattern.PatternpropertiesCase}
 */
proto.rv.data.TestPattern.prototype.getPatternpropertiesCase = function() {
  return /** @type {proto.rv.data.TestPattern.PatternpropertiesCase} */(jspb.Message.computeOneofCase(this, proto.rv.data.TestPattern.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TestPattern.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TestPattern.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TestPattern} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TestPattern.toObject = function(includeInstance, msg) {
  var f, obj = {
type: jspb.Message.getFieldWithDefault(msg, 1, 0),
blendGrid: (f = msg.getBlendGrid()) && proto.rv.data.TestPattern.BlendGrid.toObject(includeInstance, f),
customColor: (f = msg.getCustomColor()) && proto.rv.data.TestPattern.CustomColor.toObject(includeInstance, f),
intensity: (f = msg.getIntensity()) && proto.rv.data.TestPattern.IntensityColor.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TestPattern}
 */
proto.rv.data.TestPattern.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TestPattern;
  return proto.rv.data.TestPattern.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TestPattern} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TestPattern}
 */
proto.rv.data.TestPattern.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.rv.data.TestPattern.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.rv.data.TestPattern.BlendGrid;
      reader.readMessage(value,proto.rv.data.TestPattern.BlendGrid.deserializeBinaryFromReader);
      msg.setBlendGrid(value);
      break;
    case 3:
      var value = new proto.rv.data.TestPattern.CustomColor;
      reader.readMessage(value,proto.rv.data.TestPattern.CustomColor.deserializeBinaryFromReader);
      msg.setCustomColor(value);
      break;
    case 4:
      var value = new proto.rv.data.TestPattern.IntensityColor;
      reader.readMessage(value,proto.rv.data.TestPattern.IntensityColor.deserializeBinaryFromReader);
      msg.setIntensity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TestPattern.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TestPattern.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TestPattern} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TestPattern.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getBlendGrid();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rv.data.TestPattern.BlendGrid.serializeBinaryToWriter
    );
  }
  f = message.getCustomColor();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rv.data.TestPattern.CustomColor.serializeBinaryToWriter
    );
  }
  f = message.getIntensity();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rv.data.TestPattern.IntensityColor.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.rv.data.TestPattern.Type = {
  TYPE_UNKNOWN: 0,
  TYPE_BLEND_GRID: 1,
  TYPE_COLOR_BARS: 2,
  TYPE_FOCUS: 3,
  TYPE_GRAY_SCALE: 4,
  TYPE_BLACK_COLOR: 5,
  TYPE_WHITE_COLOR: 6,
  TYPE_CUSTOM_COLOR: 7,
  TYPE_TEXT: 8,
  TYPE_VIDEO_SYNC: 9
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TestPattern.BlendGrid.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TestPattern.BlendGrid.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TestPattern.BlendGrid} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TestPattern.BlendGrid.toObject = function(includeInstance, msg) {
  var f, obj = {
drawGrid: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
drawCircles: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
drawLines: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
invertColors: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
gridSpacing: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TestPattern.BlendGrid}
 */
proto.rv.data.TestPattern.BlendGrid.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TestPattern.BlendGrid;
  return proto.rv.data.TestPattern.BlendGrid.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TestPattern.BlendGrid} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TestPattern.BlendGrid}
 */
proto.rv.data.TestPattern.BlendGrid.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDrawGrid(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDrawCircles(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDrawLines(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInvertColors(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setGridSpacing(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TestPattern.BlendGrid.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TestPattern.BlendGrid.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TestPattern.BlendGrid} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TestPattern.BlendGrid.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDrawGrid();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getDrawCircles();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getDrawLines();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getInvertColors();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getGridSpacing();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
};


/**
 * optional bool draw_grid = 1;
 * @return {boolean}
 */
proto.rv.data.TestPattern.BlendGrid.prototype.getDrawGrid = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.TestPattern.BlendGrid} returns this
 */
proto.rv.data.TestPattern.BlendGrid.prototype.setDrawGrid = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool draw_circles = 2;
 * @return {boolean}
 */
proto.rv.data.TestPattern.BlendGrid.prototype.getDrawCircles = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.TestPattern.BlendGrid} returns this
 */
proto.rv.data.TestPattern.BlendGrid.prototype.setDrawCircles = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool draw_lines = 3;
 * @return {boolean}
 */
proto.rv.data.TestPattern.BlendGrid.prototype.getDrawLines = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.TestPattern.BlendGrid} returns this
 */
proto.rv.data.TestPattern.BlendGrid.prototype.setDrawLines = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool invert_colors = 4;
 * @return {boolean}
 */
proto.rv.data.TestPattern.BlendGrid.prototype.getInvertColors = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.TestPattern.BlendGrid} returns this
 */
proto.rv.data.TestPattern.BlendGrid.prototype.setInvertColors = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional double grid_spacing = 5;
 * @return {number}
 */
proto.rv.data.TestPattern.BlendGrid.prototype.getGridSpacing = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.TestPattern.BlendGrid} returns this
 */
proto.rv.data.TestPattern.BlendGrid.prototype.setGridSpacing = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TestPattern.CustomColor.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TestPattern.CustomColor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TestPattern.CustomColor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TestPattern.CustomColor.toObject = function(includeInstance, msg) {
  var f, obj = {
color: (f = msg.getColor()) && proto.rv.data.Color.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TestPattern.CustomColor}
 */
proto.rv.data.TestPattern.CustomColor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TestPattern.CustomColor;
  return proto.rv.data.TestPattern.CustomColor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TestPattern.CustomColor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TestPattern.CustomColor}
 */
proto.rv.data.TestPattern.CustomColor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.Color;
      reader.readMessage(value,proto.rv.data.Color.deserializeBinaryFromReader);
      msg.setColor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TestPattern.CustomColor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TestPattern.CustomColor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TestPattern.CustomColor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TestPattern.CustomColor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getColor();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.Color.serializeBinaryToWriter
    );
  }
};


/**
 * optional Color color = 1;
 * @return {?proto.rv.data.Color}
 */
proto.rv.data.TestPattern.CustomColor.prototype.getColor = function() {
  return /** @type{?proto.rv.data.Color} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Color, 1));
};


/**
 * @param {?proto.rv.data.Color|undefined} value
 * @return {!proto.rv.data.TestPattern.CustomColor} returns this
*/
proto.rv.data.TestPattern.CustomColor.prototype.setColor = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TestPattern.CustomColor} returns this
 */
proto.rv.data.TestPattern.CustomColor.prototype.clearColor = function() {
  return this.setColor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TestPattern.CustomColor.prototype.hasColor = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TestPattern.IntensityColor.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TestPattern.IntensityColor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TestPattern.IntensityColor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TestPattern.IntensityColor.toObject = function(includeInstance, msg) {
  var f, obj = {
intensity: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TestPattern.IntensityColor}
 */
proto.rv.data.TestPattern.IntensityColor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TestPattern.IntensityColor;
  return proto.rv.data.TestPattern.IntensityColor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TestPattern.IntensityColor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TestPattern.IntensityColor}
 */
proto.rv.data.TestPattern.IntensityColor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setIntensity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TestPattern.IntensityColor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TestPattern.IntensityColor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TestPattern.IntensityColor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TestPattern.IntensityColor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIntensity();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
};


/**
 * optional double intensity = 1;
 * @return {number}
 */
proto.rv.data.TestPattern.IntensityColor.prototype.getIntensity = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.TestPattern.IntensityColor} returns this
 */
proto.rv.data.TestPattern.IntensityColor.prototype.setIntensity = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional Type type = 1;
 * @return {!proto.rv.data.TestPattern.Type}
 */
proto.rv.data.TestPattern.prototype.getType = function() {
  return /** @type {!proto.rv.data.TestPattern.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.rv.data.TestPattern.Type} value
 * @return {!proto.rv.data.TestPattern} returns this
 */
proto.rv.data.TestPattern.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional BlendGrid blend_grid = 2;
 * @return {?proto.rv.data.TestPattern.BlendGrid}
 */
proto.rv.data.TestPattern.prototype.getBlendGrid = function() {
  return /** @type{?proto.rv.data.TestPattern.BlendGrid} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TestPattern.BlendGrid, 2));
};


/**
 * @param {?proto.rv.data.TestPattern.BlendGrid|undefined} value
 * @return {!proto.rv.data.TestPattern} returns this
*/
proto.rv.data.TestPattern.prototype.setBlendGrid = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.rv.data.TestPattern.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TestPattern} returns this
 */
proto.rv.data.TestPattern.prototype.clearBlendGrid = function() {
  return this.setBlendGrid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TestPattern.prototype.hasBlendGrid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CustomColor custom_color = 3;
 * @return {?proto.rv.data.TestPattern.CustomColor}
 */
proto.rv.data.TestPattern.prototype.getCustomColor = function() {
  return /** @type{?proto.rv.data.TestPattern.CustomColor} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TestPattern.CustomColor, 3));
};


/**
 * @param {?proto.rv.data.TestPattern.CustomColor|undefined} value
 * @return {!proto.rv.data.TestPattern} returns this
*/
proto.rv.data.TestPattern.prototype.setCustomColor = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.rv.data.TestPattern.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TestPattern} returns this
 */
proto.rv.data.TestPattern.prototype.clearCustomColor = function() {
  return this.setCustomColor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TestPattern.prototype.hasCustomColor = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional IntensityColor intensity = 4;
 * @return {?proto.rv.data.TestPattern.IntensityColor}
 */
proto.rv.data.TestPattern.prototype.getIntensity = function() {
  return /** @type{?proto.rv.data.TestPattern.IntensityColor} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TestPattern.IntensityColor, 4));
};


/**
 * @param {?proto.rv.data.TestPattern.IntensityColor|undefined} value
 * @return {!proto.rv.data.TestPattern} returns this
*/
proto.rv.data.TestPattern.prototype.setIntensity = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.rv.data.TestPattern.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TestPattern} returns this
 */
proto.rv.data.TestPattern.prototype.clearIntensity = function() {
  return this.setIntensity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TestPattern.prototype.hasIntensity = function() {
  return jspb.Message.getField(this, 4) != null;
};


