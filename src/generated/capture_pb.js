// source: analyticsCapture.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.rv.analytics.Capture');
goog.provide('proto.rv.analytics.Capture.Codec');
goog.provide('proto.rv.analytics.Capture.EventCase');
goog.provide('proto.rv.analytics.Capture.FrameRate');
goog.provide('proto.rv.analytics.Capture.Resolution');
goog.provide('proto.rv.analytics.Capture.Start');
goog.provide('proto.rv.analytics.Capture.Start.ComponentCase');
goog.provide('proto.rv.analytics.Capture.Start.Disk');
goog.provide('proto.rv.analytics.Capture.Start.RTMP');
goog.provide('proto.rv.analytics.Capture.Start.Resi');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.analytics.Capture = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rv.analytics.Capture.oneofGroups_);
};
goog.inherits(proto.rv.analytics.Capture, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.analytics.Capture.displayName = 'proto.rv.analytics.Capture';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.analytics.Capture.Resolution = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.analytics.Capture.Resolution, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.analytics.Capture.Resolution.displayName = 'proto.rv.analytics.Capture.Resolution';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.analytics.Capture.Start = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rv.analytics.Capture.Start.oneofGroups_);
};
goog.inherits(proto.rv.analytics.Capture.Start, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.analytics.Capture.Start.displayName = 'proto.rv.analytics.Capture.Start';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.analytics.Capture.Start.RTMP = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.analytics.Capture.Start.RTMP, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.analytics.Capture.Start.RTMP.displayName = 'proto.rv.analytics.Capture.Start.RTMP';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.analytics.Capture.Start.Disk = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.analytics.Capture.Start.Disk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.analytics.Capture.Start.Disk.displayName = 'proto.rv.analytics.Capture.Start.Disk';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.analytics.Capture.Start.Resi = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.analytics.Capture.Start.Resi, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.analytics.Capture.Start.Resi.displayName = 'proto.rv.analytics.Capture.Start.Resi';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rv.analytics.Capture.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.rv.analytics.Capture.EventCase = {
  EVENT_NOT_SET: 0,
  START: 1
};

/**
 * @return {proto.rv.analytics.Capture.EventCase}
 */
proto.rv.analytics.Capture.prototype.getEventCase = function() {
  return /** @type {proto.rv.analytics.Capture.EventCase} */(jspb.Message.computeOneofCase(this, proto.rv.analytics.Capture.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.analytics.Capture.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.analytics.Capture.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.analytics.Capture} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.analytics.Capture.toObject = function(includeInstance, msg) {
  var f, obj = {
start: (f = msg.getStart()) && proto.rv.analytics.Capture.Start.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.analytics.Capture}
 */
proto.rv.analytics.Capture.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.analytics.Capture;
  return proto.rv.analytics.Capture.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.analytics.Capture} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.analytics.Capture}
 */
proto.rv.analytics.Capture.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.analytics.Capture.Start;
      reader.readMessage(value,proto.rv.analytics.Capture.Start.deserializeBinaryFromReader);
      msg.setStart(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.analytics.Capture.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.analytics.Capture.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.analytics.Capture} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.analytics.Capture.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStart();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.analytics.Capture.Start.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.rv.analytics.Capture.Codec = {
  CODEC_UNKNOWN: 0,
  CODEC_AUTOMATIC: 1,
  CODEC_H264: 2,
  CODEC_H264_SOFTWARE: 3,
  CODEC_H265: 4,
  CODEC_H265_SOFTWARE: 5,
  CODEC_PRORES_422_PROXY: 6,
  CODEC_PRORES_422_LT: 7,
  CODEC_PRORES_422: 8,
  CODEC_PRORES_422_HQ: 9,
  CODEC_PRORES_4444: 10,
  CODEC_PRORES_4444_XQ: 11,
  CODEC_HAP: 12,
  CODEC_HAP_ALPHA: 13,
  CODEC_HAP_Q: 14,
  CODEC_HAP_Q_ALPHA: 15,
  CODEC_NOTCH: 16
};

/**
 * @enum {number}
 */
proto.rv.analytics.Capture.FrameRate = {
  FRAME_RATE_UNKNOWN: 0,
  FRAME_RATE_24: 1,
  FRAME_RATE_25: 2,
  FRAME_RATE_29_97: 3,
  FRAME_RATE_30: 4,
  FRAME_RATE_50: 5,
  FRAME_RATE_59_94: 6,
  FRAME_RATE_60: 7
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.analytics.Capture.Resolution.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.analytics.Capture.Resolution.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.analytics.Capture.Resolution} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.analytics.Capture.Resolution.toObject = function(includeInstance, msg) {
  var f, obj = {
width: jspb.Message.getFieldWithDefault(msg, 1, 0),
height: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.analytics.Capture.Resolution}
 */
proto.rv.analytics.Capture.Resolution.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.analytics.Capture.Resolution;
  return proto.rv.analytics.Capture.Resolution.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.analytics.Capture.Resolution} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.analytics.Capture.Resolution}
 */
proto.rv.analytics.Capture.Resolution.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWidth(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.analytics.Capture.Resolution.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.analytics.Capture.Resolution.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.analytics.Capture.Resolution} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.analytics.Capture.Resolution.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWidth();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 width = 1;
 * @return {number}
 */
proto.rv.analytics.Capture.Resolution.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.analytics.Capture.Resolution} returns this
 */
proto.rv.analytics.Capture.Resolution.prototype.setWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 height = 2;
 * @return {number}
 */
proto.rv.analytics.Capture.Resolution.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.analytics.Capture.Resolution} returns this
 */
proto.rv.analytics.Capture.Resolution.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rv.analytics.Capture.Start.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.rv.analytics.Capture.Start.ComponentCase = {
  COMPONENT_NOT_SET: 0,
  RTMP: 1,
  DISK: 2,
  RESI: 3
};

/**
 * @return {proto.rv.analytics.Capture.Start.ComponentCase}
 */
proto.rv.analytics.Capture.Start.prototype.getComponentCase = function() {
  return /** @type {proto.rv.analytics.Capture.Start.ComponentCase} */(jspb.Message.computeOneofCase(this, proto.rv.analytics.Capture.Start.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.analytics.Capture.Start.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.analytics.Capture.Start.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.analytics.Capture.Start} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.analytics.Capture.Start.toObject = function(includeInstance, msg) {
  var f, obj = {
rtmp: (f = msg.getRtmp()) && proto.rv.analytics.Capture.Start.RTMP.toObject(includeInstance, f),
disk: (f = msg.getDisk()) && proto.rv.analytics.Capture.Start.Disk.toObject(includeInstance, f),
resi: (f = msg.getResi()) && proto.rv.analytics.Capture.Start.Resi.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.analytics.Capture.Start}
 */
proto.rv.analytics.Capture.Start.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.analytics.Capture.Start;
  return proto.rv.analytics.Capture.Start.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.analytics.Capture.Start} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.analytics.Capture.Start}
 */
proto.rv.analytics.Capture.Start.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.analytics.Capture.Start.RTMP;
      reader.readMessage(value,proto.rv.analytics.Capture.Start.RTMP.deserializeBinaryFromReader);
      msg.setRtmp(value);
      break;
    case 2:
      var value = new proto.rv.analytics.Capture.Start.Disk;
      reader.readMessage(value,proto.rv.analytics.Capture.Start.Disk.deserializeBinaryFromReader);
      msg.setDisk(value);
      break;
    case 3:
      var value = new proto.rv.analytics.Capture.Start.Resi;
      reader.readMessage(value,proto.rv.analytics.Capture.Start.Resi.deserializeBinaryFromReader);
      msg.setResi(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.analytics.Capture.Start.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.analytics.Capture.Start.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.analytics.Capture.Start} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.analytics.Capture.Start.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRtmp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.analytics.Capture.Start.RTMP.serializeBinaryToWriter
    );
  }
  f = message.getDisk();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rv.analytics.Capture.Start.Disk.serializeBinaryToWriter
    );
  }
  f = message.getResi();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rv.analytics.Capture.Start.Resi.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.analytics.Capture.Start.RTMP.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.analytics.Capture.Start.RTMP.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.analytics.Capture.Start.RTMP} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.analytics.Capture.Start.RTMP.toObject = function(includeInstance, msg) {
  var f, obj = {
codec: jspb.Message.getFieldWithDefault(msg, 1, 0),
frameRate: jspb.Message.getFieldWithDefault(msg, 2, 0),
host: jspb.Message.getFieldWithDefault(msg, 3, ""),
resolution: (f = msg.getResolution()) && proto.rv.analytics.Capture.Resolution.toObject(includeInstance, f),
streamStarted: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
videoBitrate: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.analytics.Capture.Start.RTMP}
 */
proto.rv.analytics.Capture.Start.RTMP.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.analytics.Capture.Start.RTMP;
  return proto.rv.analytics.Capture.Start.RTMP.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.analytics.Capture.Start.RTMP} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.analytics.Capture.Start.RTMP}
 */
proto.rv.analytics.Capture.Start.RTMP.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.rv.analytics.Capture.Codec} */ (reader.readEnum());
      msg.setCodec(value);
      break;
    case 2:
      var value = /** @type {!proto.rv.analytics.Capture.FrameRate} */ (reader.readEnum());
      msg.setFrameRate(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost(value);
      break;
    case 4:
      var value = new proto.rv.analytics.Capture.Resolution;
      reader.readMessage(value,proto.rv.analytics.Capture.Resolution.deserializeBinaryFromReader);
      msg.setResolution(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStreamStarted(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVideoBitrate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.analytics.Capture.Start.RTMP.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.analytics.Capture.Start.RTMP.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.analytics.Capture.Start.RTMP} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.analytics.Capture.Start.RTMP.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCodec();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getFrameRate();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getHost();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getResolution();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rv.analytics.Capture.Resolution.serializeBinaryToWriter
    );
  }
  f = message.getStreamStarted();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getVideoBitrate();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * optional Codec codec = 1;
 * @return {!proto.rv.analytics.Capture.Codec}
 */
proto.rv.analytics.Capture.Start.RTMP.prototype.getCodec = function() {
  return /** @type {!proto.rv.analytics.Capture.Codec} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.rv.analytics.Capture.Codec} value
 * @return {!proto.rv.analytics.Capture.Start.RTMP} returns this
 */
proto.rv.analytics.Capture.Start.RTMP.prototype.setCodec = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional FrameRate frame_rate = 2;
 * @return {!proto.rv.analytics.Capture.FrameRate}
 */
proto.rv.analytics.Capture.Start.RTMP.prototype.getFrameRate = function() {
  return /** @type {!proto.rv.analytics.Capture.FrameRate} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.rv.analytics.Capture.FrameRate} value
 * @return {!proto.rv.analytics.Capture.Start.RTMP} returns this
 */
proto.rv.analytics.Capture.Start.RTMP.prototype.setFrameRate = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string host = 3;
 * @return {string}
 */
proto.rv.analytics.Capture.Start.RTMP.prototype.getHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.analytics.Capture.Start.RTMP} returns this
 */
proto.rv.analytics.Capture.Start.RTMP.prototype.setHost = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Resolution resolution = 4;
 * @return {?proto.rv.analytics.Capture.Resolution}
 */
proto.rv.analytics.Capture.Start.RTMP.prototype.getResolution = function() {
  return /** @type{?proto.rv.analytics.Capture.Resolution} */ (
    jspb.Message.getWrapperField(this, proto.rv.analytics.Capture.Resolution, 4));
};


/**
 * @param {?proto.rv.analytics.Capture.Resolution|undefined} value
 * @return {!proto.rv.analytics.Capture.Start.RTMP} returns this
*/
proto.rv.analytics.Capture.Start.RTMP.prototype.setResolution = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.analytics.Capture.Start.RTMP} returns this
 */
proto.rv.analytics.Capture.Start.RTMP.prototype.clearResolution = function() {
  return this.setResolution(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.analytics.Capture.Start.RTMP.prototype.hasResolution = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool stream_started = 5;
 * @return {boolean}
 */
proto.rv.analytics.Capture.Start.RTMP.prototype.getStreamStarted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.analytics.Capture.Start.RTMP} returns this
 */
proto.rv.analytics.Capture.Start.RTMP.prototype.setStreamStarted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional int32 video_bitrate = 6;
 * @return {number}
 */
proto.rv.analytics.Capture.Start.RTMP.prototype.getVideoBitrate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.analytics.Capture.Start.RTMP} returns this
 */
proto.rv.analytics.Capture.Start.RTMP.prototype.setVideoBitrate = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.analytics.Capture.Start.Disk.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.analytics.Capture.Start.Disk.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.analytics.Capture.Start.Disk} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.analytics.Capture.Start.Disk.toObject = function(includeInstance, msg) {
  var f, obj = {
codec: jspb.Message.getFieldWithDefault(msg, 1, 0),
frameRate: jspb.Message.getFieldWithDefault(msg, 2, 0),
resolution: (f = msg.getResolution()) && proto.rv.analytics.Capture.Resolution.toObject(includeInstance, f),
streamStarted: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
videoBitrate: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.analytics.Capture.Start.Disk}
 */
proto.rv.analytics.Capture.Start.Disk.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.analytics.Capture.Start.Disk;
  return proto.rv.analytics.Capture.Start.Disk.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.analytics.Capture.Start.Disk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.analytics.Capture.Start.Disk}
 */
proto.rv.analytics.Capture.Start.Disk.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.rv.analytics.Capture.Codec} */ (reader.readEnum());
      msg.setCodec(value);
      break;
    case 2:
      var value = /** @type {!proto.rv.analytics.Capture.FrameRate} */ (reader.readEnum());
      msg.setFrameRate(value);
      break;
    case 3:
      var value = new proto.rv.analytics.Capture.Resolution;
      reader.readMessage(value,proto.rv.analytics.Capture.Resolution.deserializeBinaryFromReader);
      msg.setResolution(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStreamStarted(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVideoBitrate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.analytics.Capture.Start.Disk.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.analytics.Capture.Start.Disk.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.analytics.Capture.Start.Disk} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.analytics.Capture.Start.Disk.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCodec();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getFrameRate();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getResolution();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rv.analytics.Capture.Resolution.serializeBinaryToWriter
    );
  }
  f = message.getStreamStarted();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getVideoBitrate();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional Codec codec = 1;
 * @return {!proto.rv.analytics.Capture.Codec}
 */
proto.rv.analytics.Capture.Start.Disk.prototype.getCodec = function() {
  return /** @type {!proto.rv.analytics.Capture.Codec} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.rv.analytics.Capture.Codec} value
 * @return {!proto.rv.analytics.Capture.Start.Disk} returns this
 */
proto.rv.analytics.Capture.Start.Disk.prototype.setCodec = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional FrameRate frame_rate = 2;
 * @return {!proto.rv.analytics.Capture.FrameRate}
 */
proto.rv.analytics.Capture.Start.Disk.prototype.getFrameRate = function() {
  return /** @type {!proto.rv.analytics.Capture.FrameRate} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.rv.analytics.Capture.FrameRate} value
 * @return {!proto.rv.analytics.Capture.Start.Disk} returns this
 */
proto.rv.analytics.Capture.Start.Disk.prototype.setFrameRate = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Resolution resolution = 3;
 * @return {?proto.rv.analytics.Capture.Resolution}
 */
proto.rv.analytics.Capture.Start.Disk.prototype.getResolution = function() {
  return /** @type{?proto.rv.analytics.Capture.Resolution} */ (
    jspb.Message.getWrapperField(this, proto.rv.analytics.Capture.Resolution, 3));
};


/**
 * @param {?proto.rv.analytics.Capture.Resolution|undefined} value
 * @return {!proto.rv.analytics.Capture.Start.Disk} returns this
*/
proto.rv.analytics.Capture.Start.Disk.prototype.setResolution = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.analytics.Capture.Start.Disk} returns this
 */
proto.rv.analytics.Capture.Start.Disk.prototype.clearResolution = function() {
  return this.setResolution(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.analytics.Capture.Start.Disk.prototype.hasResolution = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool stream_started = 4;
 * @return {boolean}
 */
proto.rv.analytics.Capture.Start.Disk.prototype.getStreamStarted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.analytics.Capture.Start.Disk} returns this
 */
proto.rv.analytics.Capture.Start.Disk.prototype.setStreamStarted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional int32 video_bitrate = 5;
 * @return {number}
 */
proto.rv.analytics.Capture.Start.Disk.prototype.getVideoBitrate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.analytics.Capture.Start.Disk} returns this
 */
proto.rv.analytics.Capture.Start.Disk.prototype.setVideoBitrate = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.analytics.Capture.Start.Resi.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.analytics.Capture.Start.Resi.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.analytics.Capture.Start.Resi} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.analytics.Capture.Start.Resi.toObject = function(includeInstance, msg) {
  var f, obj = {
codec: jspb.Message.getFieldWithDefault(msg, 1, 0),
frameRate: jspb.Message.getFieldWithDefault(msg, 2, 0),
resolution: (f = msg.getResolution()) && proto.rv.analytics.Capture.Resolution.toObject(includeInstance, f),
streamStarted: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
videoBitrate: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.analytics.Capture.Start.Resi}
 */
proto.rv.analytics.Capture.Start.Resi.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.analytics.Capture.Start.Resi;
  return proto.rv.analytics.Capture.Start.Resi.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.analytics.Capture.Start.Resi} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.analytics.Capture.Start.Resi}
 */
proto.rv.analytics.Capture.Start.Resi.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.rv.analytics.Capture.Codec} */ (reader.readEnum());
      msg.setCodec(value);
      break;
    case 2:
      var value = /** @type {!proto.rv.analytics.Capture.FrameRate} */ (reader.readEnum());
      msg.setFrameRate(value);
      break;
    case 3:
      var value = new proto.rv.analytics.Capture.Resolution;
      reader.readMessage(value,proto.rv.analytics.Capture.Resolution.deserializeBinaryFromReader);
      msg.setResolution(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStreamStarted(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVideoBitrate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.analytics.Capture.Start.Resi.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.analytics.Capture.Start.Resi.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.analytics.Capture.Start.Resi} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.analytics.Capture.Start.Resi.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCodec();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getFrameRate();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getResolution();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rv.analytics.Capture.Resolution.serializeBinaryToWriter
    );
  }
  f = message.getStreamStarted();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getVideoBitrate();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional Codec codec = 1;
 * @return {!proto.rv.analytics.Capture.Codec}
 */
proto.rv.analytics.Capture.Start.Resi.prototype.getCodec = function() {
  return /** @type {!proto.rv.analytics.Capture.Codec} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.rv.analytics.Capture.Codec} value
 * @return {!proto.rv.analytics.Capture.Start.Resi} returns this
 */
proto.rv.analytics.Capture.Start.Resi.prototype.setCodec = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional FrameRate frame_rate = 2;
 * @return {!proto.rv.analytics.Capture.FrameRate}
 */
proto.rv.analytics.Capture.Start.Resi.prototype.getFrameRate = function() {
  return /** @type {!proto.rv.analytics.Capture.FrameRate} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.rv.analytics.Capture.FrameRate} value
 * @return {!proto.rv.analytics.Capture.Start.Resi} returns this
 */
proto.rv.analytics.Capture.Start.Resi.prototype.setFrameRate = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Resolution resolution = 3;
 * @return {?proto.rv.analytics.Capture.Resolution}
 */
proto.rv.analytics.Capture.Start.Resi.prototype.getResolution = function() {
  return /** @type{?proto.rv.analytics.Capture.Resolution} */ (
    jspb.Message.getWrapperField(this, proto.rv.analytics.Capture.Resolution, 3));
};


/**
 * @param {?proto.rv.analytics.Capture.Resolution|undefined} value
 * @return {!proto.rv.analytics.Capture.Start.Resi} returns this
*/
proto.rv.analytics.Capture.Start.Resi.prototype.setResolution = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.analytics.Capture.Start.Resi} returns this
 */
proto.rv.analytics.Capture.Start.Resi.prototype.clearResolution = function() {
  return this.setResolution(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.analytics.Capture.Start.Resi.prototype.hasResolution = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool stream_started = 4;
 * @return {boolean}
 */
proto.rv.analytics.Capture.Start.Resi.prototype.getStreamStarted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.analytics.Capture.Start.Resi} returns this
 */
proto.rv.analytics.Capture.Start.Resi.prototype.setStreamStarted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional int32 video_bitrate = 5;
 * @return {number}
 */
proto.rv.analytics.Capture.Start.Resi.prototype.getVideoBitrate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.analytics.Capture.Start.Resi} returns this
 */
proto.rv.analytics.Capture.Start.Resi.prototype.setVideoBitrate = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional RTMP rtmp = 1;
 * @return {?proto.rv.analytics.Capture.Start.RTMP}
 */
proto.rv.analytics.Capture.Start.prototype.getRtmp = function() {
  return /** @type{?proto.rv.analytics.Capture.Start.RTMP} */ (
    jspb.Message.getWrapperField(this, proto.rv.analytics.Capture.Start.RTMP, 1));
};


/**
 * @param {?proto.rv.analytics.Capture.Start.RTMP|undefined} value
 * @return {!proto.rv.analytics.Capture.Start} returns this
*/
proto.rv.analytics.Capture.Start.prototype.setRtmp = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.rv.analytics.Capture.Start.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.analytics.Capture.Start} returns this
 */
proto.rv.analytics.Capture.Start.prototype.clearRtmp = function() {
  return this.setRtmp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.analytics.Capture.Start.prototype.hasRtmp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Disk disk = 2;
 * @return {?proto.rv.analytics.Capture.Start.Disk}
 */
proto.rv.analytics.Capture.Start.prototype.getDisk = function() {
  return /** @type{?proto.rv.analytics.Capture.Start.Disk} */ (
    jspb.Message.getWrapperField(this, proto.rv.analytics.Capture.Start.Disk, 2));
};


/**
 * @param {?proto.rv.analytics.Capture.Start.Disk|undefined} value
 * @return {!proto.rv.analytics.Capture.Start} returns this
*/
proto.rv.analytics.Capture.Start.prototype.setDisk = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.rv.analytics.Capture.Start.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.analytics.Capture.Start} returns this
 */
proto.rv.analytics.Capture.Start.prototype.clearDisk = function() {
  return this.setDisk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.analytics.Capture.Start.prototype.hasDisk = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Resi resi = 3;
 * @return {?proto.rv.analytics.Capture.Start.Resi}
 */
proto.rv.analytics.Capture.Start.prototype.getResi = function() {
  return /** @type{?proto.rv.analytics.Capture.Start.Resi} */ (
    jspb.Message.getWrapperField(this, proto.rv.analytics.Capture.Start.Resi, 3));
};


/**
 * @param {?proto.rv.analytics.Capture.Start.Resi|undefined} value
 * @return {!proto.rv.analytics.Capture.Start} returns this
*/
proto.rv.analytics.Capture.Start.prototype.setResi = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.rv.analytics.Capture.Start.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.analytics.Capture.Start} returns this
 */
proto.rv.analytics.Capture.Start.prototype.clearResi = function() {
  return this.setResi(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.analytics.Capture.Start.prototype.hasResi = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Start start = 1;
 * @return {?proto.rv.analytics.Capture.Start}
 */
proto.rv.analytics.Capture.prototype.getStart = function() {
  return /** @type{?proto.rv.analytics.Capture.Start} */ (
    jspb.Message.getWrapperField(this, proto.rv.analytics.Capture.Start, 1));
};


/**
 * @param {?proto.rv.analytics.Capture.Start|undefined} value
 * @return {!proto.rv.analytics.Capture} returns this
*/
proto.rv.analytics.Capture.prototype.setStart = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.rv.analytics.Capture.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.analytics.Capture} returns this
 */
proto.rv.analytics.Capture.prototype.clearStart = function() {
  return this.setStart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.analytics.Capture.prototype.hasStart = function() {
  return jspb.Message.getField(this, 1) != null;
};


