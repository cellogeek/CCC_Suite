// source: timedPlayback.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.rv.data.TimedPlayback');
goog.provide('proto.rv.data.TimedPlayback.Sequence');
goog.provide('proto.rv.data.TimedPlayback.Sequence.SequenceItem');
goog.provide('proto.rv.data.TimedPlayback.Sequence.SequenceItem.ItemCase');
goog.provide('proto.rv.data.TimedPlayback.Timing');
goog.provide('proto.rv.data.TimedPlayback.Timing.Internal');
goog.provide('proto.rv.data.TimedPlayback.Timing.LayerTransport');
goog.provide('proto.rv.data.TimedPlayback.Timing.SMPTETimecode');
goog.provide('proto.rv.data.TimedPlayback.Timing.SMPTETimecode.Format');
goog.provide('proto.rv.data.TimedPlayback.Timing.SourceCase');
goog.provide('proto.rv.data.TimedPlayback.Update');
goog.provide('proto.rv.data.TimedPlayback.Update.ActiontypeCase');
goog.provide('proto.rv.data.TimedPlayback.Update.Duration');
goog.provide('proto.rv.data.TimedPlayback.Update.EndScrub');
goog.provide('proto.rv.data.TimedPlayback.Update.JumpToTime');
goog.provide('proto.rv.data.TimedPlayback.Update.Loop');
goog.provide('proto.rv.data.TimedPlayback.Update.MonitorSource');
goog.provide('proto.rv.data.TimedPlayback.Update.Pause');
goog.provide('proto.rv.data.TimedPlayback.Update.Play');
goog.provide('proto.rv.data.TimedPlayback.Update.Record');
goog.provide('proto.rv.data.TimedPlayback.Update.Reset');
goog.provide('proto.rv.data.TimedPlayback.Update.StartScrub');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.rv.data.Action');
goog.require('proto.rv.data.Cue');
goog.require('proto.rv.data.Presentation');
goog.require('proto.rv.data.TriggerSource');
goog.require('proto.rv.data.UUID');

goog.forwardDeclare('proto.rv.data.Action.ContentDestination');
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TimedPlayback = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.TimedPlayback, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TimedPlayback.displayName = 'proto.rv.data.TimedPlayback';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TimedPlayback.Sequence = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rv.data.TimedPlayback.Sequence.repeatedFields_, null);
};
goog.inherits(proto.rv.data.TimedPlayback.Sequence, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TimedPlayback.Sequence.displayName = 'proto.rv.data.TimedPlayback.Sequence';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TimedPlayback.Sequence.SequenceItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rv.data.TimedPlayback.Sequence.SequenceItem.oneofGroups_);
};
goog.inherits(proto.rv.data.TimedPlayback.Sequence.SequenceItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TimedPlayback.Sequence.SequenceItem.displayName = 'proto.rv.data.TimedPlayback.Sequence.SequenceItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TimedPlayback.Timing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rv.data.TimedPlayback.Timing.oneofGroups_);
};
goog.inherits(proto.rv.data.TimedPlayback.Timing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TimedPlayback.Timing.displayName = 'proto.rv.data.TimedPlayback.Timing';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TimedPlayback.Timing.LayerTransport = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.TimedPlayback.Timing.LayerTransport, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TimedPlayback.Timing.LayerTransport.displayName = 'proto.rv.data.TimedPlayback.Timing.LayerTransport';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TimedPlayback.Timing.SMPTETimecode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.TimedPlayback.Timing.SMPTETimecode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TimedPlayback.Timing.SMPTETimecode.displayName = 'proto.rv.data.TimedPlayback.Timing.SMPTETimecode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TimedPlayback.Timing.Internal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.TimedPlayback.Timing.Internal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TimedPlayback.Timing.Internal.displayName = 'proto.rv.data.TimedPlayback.Timing.Internal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TimedPlayback.Update = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rv.data.TimedPlayback.Update.oneofGroups_);
};
goog.inherits(proto.rv.data.TimedPlayback.Update, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TimedPlayback.Update.displayName = 'proto.rv.data.TimedPlayback.Update';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TimedPlayback.Update.Play = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.TimedPlayback.Update.Play, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TimedPlayback.Update.Play.displayName = 'proto.rv.data.TimedPlayback.Update.Play';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TimedPlayback.Update.Record = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.TimedPlayback.Update.Record, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TimedPlayback.Update.Record.displayName = 'proto.rv.data.TimedPlayback.Update.Record';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TimedPlayback.Update.Pause = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.TimedPlayback.Update.Pause, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TimedPlayback.Update.Pause.displayName = 'proto.rv.data.TimedPlayback.Update.Pause';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TimedPlayback.Update.Reset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.TimedPlayback.Update.Reset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TimedPlayback.Update.Reset.displayName = 'proto.rv.data.TimedPlayback.Update.Reset';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TimedPlayback.Update.JumpToTime = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.TimedPlayback.Update.JumpToTime, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TimedPlayback.Update.JumpToTime.displayName = 'proto.rv.data.TimedPlayback.Update.JumpToTime';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TimedPlayback.Update.StartScrub = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.TimedPlayback.Update.StartScrub, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TimedPlayback.Update.StartScrub.displayName = 'proto.rv.data.TimedPlayback.Update.StartScrub';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TimedPlayback.Update.EndScrub = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.TimedPlayback.Update.EndScrub, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TimedPlayback.Update.EndScrub.displayName = 'proto.rv.data.TimedPlayback.Update.EndScrub';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TimedPlayback.Update.Duration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.TimedPlayback.Update.Duration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TimedPlayback.Update.Duration.displayName = 'proto.rv.data.TimedPlayback.Update.Duration';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TimedPlayback.Update.Loop = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.TimedPlayback.Update.Loop, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TimedPlayback.Update.Loop.displayName = 'proto.rv.data.TimedPlayback.Update.Loop';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.TimedPlayback.Update.MonitorSource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.TimedPlayback.Update.MonitorSource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.TimedPlayback.Update.MonitorSource.displayName = 'proto.rv.data.TimedPlayback.Update.MonitorSource';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TimedPlayback.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TimedPlayback.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TimedPlayback} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TimedPlayback.toObject = function(includeInstance, msg) {
  var f, obj = {
sequence: (f = msg.getSequence()) && proto.rv.data.TimedPlayback.Sequence.toObject(includeInstance, f),
timing: (f = msg.getTiming()) && proto.rv.data.TimedPlayback.Timing.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TimedPlayback}
 */
proto.rv.data.TimedPlayback.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TimedPlayback;
  return proto.rv.data.TimedPlayback.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TimedPlayback} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TimedPlayback}
 */
proto.rv.data.TimedPlayback.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.TimedPlayback.Sequence;
      reader.readMessage(value,proto.rv.data.TimedPlayback.Sequence.deserializeBinaryFromReader);
      msg.setSequence(value);
      break;
    case 2:
      var value = new proto.rv.data.TimedPlayback.Timing;
      reader.readMessage(value,proto.rv.data.TimedPlayback.Timing.deserializeBinaryFromReader);
      msg.setTiming(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TimedPlayback.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TimedPlayback.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TimedPlayback} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TimedPlayback.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSequence();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.TimedPlayback.Sequence.serializeBinaryToWriter
    );
  }
  f = message.getTiming();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rv.data.TimedPlayback.Timing.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rv.data.TimedPlayback.Sequence.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TimedPlayback.Sequence.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TimedPlayback.Sequence.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TimedPlayback.Sequence} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TimedPlayback.Sequence.toObject = function(includeInstance, msg) {
  var f, obj = {
sequenceList: jspb.Message.toObjectList(msg.getSequenceList(),
    proto.rv.data.TimedPlayback.Sequence.SequenceItem.toObject, includeInstance),
contentDestination: jspb.Message.getFieldWithDefault(msg, 2, 0),
presentation: (f = msg.getPresentation()) && proto.rv.data.Presentation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TimedPlayback.Sequence}
 */
proto.rv.data.TimedPlayback.Sequence.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TimedPlayback.Sequence;
  return proto.rv.data.TimedPlayback.Sequence.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TimedPlayback.Sequence} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TimedPlayback.Sequence}
 */
proto.rv.data.TimedPlayback.Sequence.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.TimedPlayback.Sequence.SequenceItem;
      reader.readMessage(value,proto.rv.data.TimedPlayback.Sequence.SequenceItem.deserializeBinaryFromReader);
      msg.addSequence(value);
      break;
    case 2:
      var value = /** @type {!proto.rv.data.Action.ContentDestination} */ (reader.readEnum());
      msg.setContentDestination(value);
      break;
    case 3:
      var value = new proto.rv.data.Presentation;
      reader.readMessage(value,proto.rv.data.Presentation.deserializeBinaryFromReader);
      msg.setPresentation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TimedPlayback.Sequence.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TimedPlayback.Sequence.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TimedPlayback.Sequence} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TimedPlayback.Sequence.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSequenceList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rv.data.TimedPlayback.Sequence.SequenceItem.serializeBinaryToWriter
    );
  }
  f = message.getContentDestination();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getPresentation();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rv.data.Presentation.serializeBinaryToWriter
    );
  }
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rv.data.TimedPlayback.Sequence.SequenceItem.oneofGroups_ = [[5,6]];

/**
 * @enum {number}
 */
proto.rv.data.TimedPlayback.Sequence.SequenceItem.ItemCase = {
  ITEM_NOT_SET: 0,
  CUE: 5,
  ACTION: 6
};

/**
 * @return {proto.rv.data.TimedPlayback.Sequence.SequenceItem.ItemCase}
 */
proto.rv.data.TimedPlayback.Sequence.SequenceItem.prototype.getItemCase = function() {
  return /** @type {proto.rv.data.TimedPlayback.Sequence.SequenceItem.ItemCase} */(jspb.Message.computeOneofCase(this, proto.rv.data.TimedPlayback.Sequence.SequenceItem.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TimedPlayback.Sequence.SequenceItem.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TimedPlayback.Sequence.SequenceItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TimedPlayback.Sequence.SequenceItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TimedPlayback.Sequence.SequenceItem.toObject = function(includeInstance, msg) {
  var f, obj = {
identifier: (f = msg.getIdentifier()) && proto.rv.data.UUID.toObject(includeInstance, f),
time: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
triggerSource: (f = msg.getTriggerSource()) && proto.rv.data.TriggerSource.toObject(includeInstance, f),
contentDestination: jspb.Message.getFieldWithDefault(msg, 4, 0),
endTime: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
cue: (f = msg.getCue()) && proto.rv.data.Cue.toObject(includeInstance, f),
action: (f = msg.getAction()) && proto.rv.data.Action.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TimedPlayback.Sequence.SequenceItem}
 */
proto.rv.data.TimedPlayback.Sequence.SequenceItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TimedPlayback.Sequence.SequenceItem;
  return proto.rv.data.TimedPlayback.Sequence.SequenceItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TimedPlayback.Sequence.SequenceItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TimedPlayback.Sequence.SequenceItem}
 */
proto.rv.data.TimedPlayback.Sequence.SequenceItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.UUID;
      reader.readMessage(value,proto.rv.data.UUID.deserializeBinaryFromReader);
      msg.setIdentifier(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTime(value);
      break;
    case 3:
      var value = new proto.rv.data.TriggerSource;
      reader.readMessage(value,proto.rv.data.TriggerSource.deserializeBinaryFromReader);
      msg.setTriggerSource(value);
      break;
    case 4:
      var value = /** @type {!proto.rv.data.Action.ContentDestination} */ (reader.readEnum());
      msg.setContentDestination(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEndTime(value);
      break;
    case 5:
      var value = new proto.rv.data.Cue;
      reader.readMessage(value,proto.rv.data.Cue.deserializeBinaryFromReader);
      msg.setCue(value);
      break;
    case 6:
      var value = new proto.rv.data.Action;
      reader.readMessage(value,proto.rv.data.Action.deserializeBinaryFromReader);
      msg.setAction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TimedPlayback.Sequence.SequenceItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TimedPlayback.Sequence.SequenceItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TimedPlayback.Sequence.SequenceItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TimedPlayback.Sequence.SequenceItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdentifier();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.UUID.serializeBinaryToWriter
    );
  }
  f = message.getTime();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getTriggerSource();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rv.data.TriggerSource.serializeBinaryToWriter
    );
  }
  f = message.getContentDestination();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getEndTime();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getCue();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.rv.data.Cue.serializeBinaryToWriter
    );
  }
  f = message.getAction();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.rv.data.Action.serializeBinaryToWriter
    );
  }
};


/**
 * optional UUID identifier = 1;
 * @return {?proto.rv.data.UUID}
 */
proto.rv.data.TimedPlayback.Sequence.SequenceItem.prototype.getIdentifier = function() {
  return /** @type{?proto.rv.data.UUID} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.UUID, 1));
};


/**
 * @param {?proto.rv.data.UUID|undefined} value
 * @return {!proto.rv.data.TimedPlayback.Sequence.SequenceItem} returns this
*/
proto.rv.data.TimedPlayback.Sequence.SequenceItem.prototype.setIdentifier = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TimedPlayback.Sequence.SequenceItem} returns this
 */
proto.rv.data.TimedPlayback.Sequence.SequenceItem.prototype.clearIdentifier = function() {
  return this.setIdentifier(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TimedPlayback.Sequence.SequenceItem.prototype.hasIdentifier = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double time = 2;
 * @return {number}
 */
proto.rv.data.TimedPlayback.Sequence.SequenceItem.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.TimedPlayback.Sequence.SequenceItem} returns this
 */
proto.rv.data.TimedPlayback.Sequence.SequenceItem.prototype.setTime = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional TriggerSource trigger_source = 3;
 * @return {?proto.rv.data.TriggerSource}
 */
proto.rv.data.TimedPlayback.Sequence.SequenceItem.prototype.getTriggerSource = function() {
  return /** @type{?proto.rv.data.TriggerSource} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TriggerSource, 3));
};


/**
 * @param {?proto.rv.data.TriggerSource|undefined} value
 * @return {!proto.rv.data.TimedPlayback.Sequence.SequenceItem} returns this
*/
proto.rv.data.TimedPlayback.Sequence.SequenceItem.prototype.setTriggerSource = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TimedPlayback.Sequence.SequenceItem} returns this
 */
proto.rv.data.TimedPlayback.Sequence.SequenceItem.prototype.clearTriggerSource = function() {
  return this.setTriggerSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TimedPlayback.Sequence.SequenceItem.prototype.hasTriggerSource = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Action.ContentDestination content_destination = 4;
 * @return {!proto.rv.data.Action.ContentDestination}
 */
proto.rv.data.TimedPlayback.Sequence.SequenceItem.prototype.getContentDestination = function() {
  return /** @type {!proto.rv.data.Action.ContentDestination} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.rv.data.Action.ContentDestination} value
 * @return {!proto.rv.data.TimedPlayback.Sequence.SequenceItem} returns this
 */
proto.rv.data.TimedPlayback.Sequence.SequenceItem.prototype.setContentDestination = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional double end_time = 7;
 * @return {number}
 */
proto.rv.data.TimedPlayback.Sequence.SequenceItem.prototype.getEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.TimedPlayback.Sequence.SequenceItem} returns this
 */
proto.rv.data.TimedPlayback.Sequence.SequenceItem.prototype.setEndTime = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional Cue cue = 5;
 * @return {?proto.rv.data.Cue}
 */
proto.rv.data.TimedPlayback.Sequence.SequenceItem.prototype.getCue = function() {
  return /** @type{?proto.rv.data.Cue} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Cue, 5));
};


/**
 * @param {?proto.rv.data.Cue|undefined} value
 * @return {!proto.rv.data.TimedPlayback.Sequence.SequenceItem} returns this
*/
proto.rv.data.TimedPlayback.Sequence.SequenceItem.prototype.setCue = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.rv.data.TimedPlayback.Sequence.SequenceItem.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TimedPlayback.Sequence.SequenceItem} returns this
 */
proto.rv.data.TimedPlayback.Sequence.SequenceItem.prototype.clearCue = function() {
  return this.setCue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TimedPlayback.Sequence.SequenceItem.prototype.hasCue = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Action action = 6;
 * @return {?proto.rv.data.Action}
 */
proto.rv.data.TimedPlayback.Sequence.SequenceItem.prototype.getAction = function() {
  return /** @type{?proto.rv.data.Action} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Action, 6));
};


/**
 * @param {?proto.rv.data.Action|undefined} value
 * @return {!proto.rv.data.TimedPlayback.Sequence.SequenceItem} returns this
*/
proto.rv.data.TimedPlayback.Sequence.SequenceItem.prototype.setAction = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.rv.data.TimedPlayback.Sequence.SequenceItem.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TimedPlayback.Sequence.SequenceItem} returns this
 */
proto.rv.data.TimedPlayback.Sequence.SequenceItem.prototype.clearAction = function() {
  return this.setAction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TimedPlayback.Sequence.SequenceItem.prototype.hasAction = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated SequenceItem sequence = 1;
 * @return {!Array<!proto.rv.data.TimedPlayback.Sequence.SequenceItem>}
 */
proto.rv.data.TimedPlayback.Sequence.prototype.getSequenceList = function() {
  return /** @type{!Array<!proto.rv.data.TimedPlayback.Sequence.SequenceItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rv.data.TimedPlayback.Sequence.SequenceItem, 1));
};


/**
 * @param {!Array<!proto.rv.data.TimedPlayback.Sequence.SequenceItem>} value
 * @return {!proto.rv.data.TimedPlayback.Sequence} returns this
*/
proto.rv.data.TimedPlayback.Sequence.prototype.setSequenceList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.rv.data.TimedPlayback.Sequence.SequenceItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rv.data.TimedPlayback.Sequence.SequenceItem}
 */
proto.rv.data.TimedPlayback.Sequence.prototype.addSequence = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rv.data.TimedPlayback.Sequence.SequenceItem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.TimedPlayback.Sequence} returns this
 */
proto.rv.data.TimedPlayback.Sequence.prototype.clearSequenceList = function() {
  return this.setSequenceList([]);
};


/**
 * optional Action.ContentDestination content_destination = 2;
 * @return {!proto.rv.data.Action.ContentDestination}
 */
proto.rv.data.TimedPlayback.Sequence.prototype.getContentDestination = function() {
  return /** @type {!proto.rv.data.Action.ContentDestination} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.rv.data.Action.ContentDestination} value
 * @return {!proto.rv.data.TimedPlayback.Sequence} returns this
 */
proto.rv.data.TimedPlayback.Sequence.prototype.setContentDestination = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Presentation presentation = 3;
 * @return {?proto.rv.data.Presentation}
 */
proto.rv.data.TimedPlayback.Sequence.prototype.getPresentation = function() {
  return /** @type{?proto.rv.data.Presentation} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Presentation, 3));
};


/**
 * @param {?proto.rv.data.Presentation|undefined} value
 * @return {!proto.rv.data.TimedPlayback.Sequence} returns this
*/
proto.rv.data.TimedPlayback.Sequence.prototype.setPresentation = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TimedPlayback.Sequence} returns this
 */
proto.rv.data.TimedPlayback.Sequence.prototype.clearPresentation = function() {
  return this.setPresentation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TimedPlayback.Sequence.prototype.hasPresentation = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rv.data.TimedPlayback.Timing.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.rv.data.TimedPlayback.Timing.SourceCase = {
  SOURCE_NOT_SET: 0,
  LAYER_TRANSPORT: 1,
  SMPTE_TIMECODE: 2,
  INTERNAL: 3
};

/**
 * @return {proto.rv.data.TimedPlayback.Timing.SourceCase}
 */
proto.rv.data.TimedPlayback.Timing.prototype.getSourceCase = function() {
  return /** @type {proto.rv.data.TimedPlayback.Timing.SourceCase} */(jspb.Message.computeOneofCase(this, proto.rv.data.TimedPlayback.Timing.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TimedPlayback.Timing.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TimedPlayback.Timing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TimedPlayback.Timing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TimedPlayback.Timing.toObject = function(includeInstance, msg) {
  var f, obj = {
layerTransport: (f = msg.getLayerTransport()) && proto.rv.data.TimedPlayback.Timing.LayerTransport.toObject(includeInstance, f),
smpteTimecode: (f = msg.getSmpteTimecode()) && proto.rv.data.TimedPlayback.Timing.SMPTETimecode.toObject(includeInstance, f),
internal: (f = msg.getInternal()) && proto.rv.data.TimedPlayback.Timing.Internal.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TimedPlayback.Timing}
 */
proto.rv.data.TimedPlayback.Timing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TimedPlayback.Timing;
  return proto.rv.data.TimedPlayback.Timing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TimedPlayback.Timing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TimedPlayback.Timing}
 */
proto.rv.data.TimedPlayback.Timing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.TimedPlayback.Timing.LayerTransport;
      reader.readMessage(value,proto.rv.data.TimedPlayback.Timing.LayerTransport.deserializeBinaryFromReader);
      msg.setLayerTransport(value);
      break;
    case 2:
      var value = new proto.rv.data.TimedPlayback.Timing.SMPTETimecode;
      reader.readMessage(value,proto.rv.data.TimedPlayback.Timing.SMPTETimecode.deserializeBinaryFromReader);
      msg.setSmpteTimecode(value);
      break;
    case 3:
      var value = new proto.rv.data.TimedPlayback.Timing.Internal;
      reader.readMessage(value,proto.rv.data.TimedPlayback.Timing.Internal.deserializeBinaryFromReader);
      msg.setInternal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TimedPlayback.Timing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TimedPlayback.Timing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TimedPlayback.Timing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TimedPlayback.Timing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLayerTransport();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.TimedPlayback.Timing.LayerTransport.serializeBinaryToWriter
    );
  }
  f = message.getSmpteTimecode();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rv.data.TimedPlayback.Timing.SMPTETimecode.serializeBinaryToWriter
    );
  }
  f = message.getInternal();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rv.data.TimedPlayback.Timing.Internal.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TimedPlayback.Timing.LayerTransport.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TimedPlayback.Timing.LayerTransport.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TimedPlayback.Timing.LayerTransport} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TimedPlayback.Timing.LayerTransport.toObject = function(includeInstance, msg) {
  var f, obj = {
layer: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TimedPlayback.Timing.LayerTransport}
 */
proto.rv.data.TimedPlayback.Timing.LayerTransport.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TimedPlayback.Timing.LayerTransport;
  return proto.rv.data.TimedPlayback.Timing.LayerTransport.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TimedPlayback.Timing.LayerTransport} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TimedPlayback.Timing.LayerTransport}
 */
proto.rv.data.TimedPlayback.Timing.LayerTransport.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLayer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TimedPlayback.Timing.LayerTransport.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TimedPlayback.Timing.LayerTransport.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TimedPlayback.Timing.LayerTransport} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TimedPlayback.Timing.LayerTransport.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLayer();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 layer = 1;
 * @return {number}
 */
proto.rv.data.TimedPlayback.Timing.LayerTransport.prototype.getLayer = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.TimedPlayback.Timing.LayerTransport} returns this
 */
proto.rv.data.TimedPlayback.Timing.LayerTransport.prototype.setLayer = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TimedPlayback.Timing.SMPTETimecode.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TimedPlayback.Timing.SMPTETimecode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TimedPlayback.Timing.SMPTETimecode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TimedPlayback.Timing.SMPTETimecode.toObject = function(includeInstance, msg) {
  var f, obj = {
deviceIdentifier: jspb.Message.getFieldWithDefault(msg, 1, ""),
channel: jspb.Message.getFieldWithDefault(msg, 2, 0),
format: jspb.Message.getFieldWithDefault(msg, 3, 0),
offset: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TimedPlayback.Timing.SMPTETimecode}
 */
proto.rv.data.TimedPlayback.Timing.SMPTETimecode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TimedPlayback.Timing.SMPTETimecode;
  return proto.rv.data.TimedPlayback.Timing.SMPTETimecode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TimedPlayback.Timing.SMPTETimecode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TimedPlayback.Timing.SMPTETimecode}
 */
proto.rv.data.TimedPlayback.Timing.SMPTETimecode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceIdentifier(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChannel(value);
      break;
    case 3:
      var value = /** @type {!proto.rv.data.TimedPlayback.Timing.SMPTETimecode.Format} */ (reader.readEnum());
      msg.setFormat(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TimedPlayback.Timing.SMPTETimecode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TimedPlayback.Timing.SMPTETimecode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TimedPlayback.Timing.SMPTETimecode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TimedPlayback.Timing.SMPTETimecode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceIdentifier();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChannel();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getFormat();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.rv.data.TimedPlayback.Timing.SMPTETimecode.Format = {
  FORMAT_24_FPS: 0,
  FORMAT_25_FPS: 1,
  FORMAT_29_97_FPS: 2,
  FORMAT_30_FPS: 3
};

/**
 * optional string device_identifier = 1;
 * @return {string}
 */
proto.rv.data.TimedPlayback.Timing.SMPTETimecode.prototype.getDeviceIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.TimedPlayback.Timing.SMPTETimecode} returns this
 */
proto.rv.data.TimedPlayback.Timing.SMPTETimecode.prototype.setDeviceIdentifier = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 channel = 2;
 * @return {number}
 */
proto.rv.data.TimedPlayback.Timing.SMPTETimecode.prototype.getChannel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.TimedPlayback.Timing.SMPTETimecode} returns this
 */
proto.rv.data.TimedPlayback.Timing.SMPTETimecode.prototype.setChannel = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Format format = 3;
 * @return {!proto.rv.data.TimedPlayback.Timing.SMPTETimecode.Format}
 */
proto.rv.data.TimedPlayback.Timing.SMPTETimecode.prototype.getFormat = function() {
  return /** @type {!proto.rv.data.TimedPlayback.Timing.SMPTETimecode.Format} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.rv.data.TimedPlayback.Timing.SMPTETimecode.Format} value
 * @return {!proto.rv.data.TimedPlayback.Timing.SMPTETimecode} returns this
 */
proto.rv.data.TimedPlayback.Timing.SMPTETimecode.prototype.setFormat = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional double offset = 4;
 * @return {number}
 */
proto.rv.data.TimedPlayback.Timing.SMPTETimecode.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.TimedPlayback.Timing.SMPTETimecode} returns this
 */
proto.rv.data.TimedPlayback.Timing.SMPTETimecode.prototype.setOffset = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TimedPlayback.Timing.Internal.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TimedPlayback.Timing.Internal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TimedPlayback.Timing.Internal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TimedPlayback.Timing.Internal.toObject = function(includeInstance, msg) {
  var f, obj = {
duration: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
shouldLoop: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TimedPlayback.Timing.Internal}
 */
proto.rv.data.TimedPlayback.Timing.Internal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TimedPlayback.Timing.Internal;
  return proto.rv.data.TimedPlayback.Timing.Internal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TimedPlayback.Timing.Internal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TimedPlayback.Timing.Internal}
 */
proto.rv.data.TimedPlayback.Timing.Internal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDuration(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShouldLoop(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TimedPlayback.Timing.Internal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TimedPlayback.Timing.Internal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TimedPlayback.Timing.Internal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TimedPlayback.Timing.Internal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDuration();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getShouldLoop();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional double duration = 1;
 * @return {number}
 */
proto.rv.data.TimedPlayback.Timing.Internal.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.TimedPlayback.Timing.Internal} returns this
 */
proto.rv.data.TimedPlayback.Timing.Internal.prototype.setDuration = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional bool should_loop = 2;
 * @return {boolean}
 */
proto.rv.data.TimedPlayback.Timing.Internal.prototype.getShouldLoop = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.TimedPlayback.Timing.Internal} returns this
 */
proto.rv.data.TimedPlayback.Timing.Internal.prototype.setShouldLoop = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional LayerTransport layer_transport = 1;
 * @return {?proto.rv.data.TimedPlayback.Timing.LayerTransport}
 */
proto.rv.data.TimedPlayback.Timing.prototype.getLayerTransport = function() {
  return /** @type{?proto.rv.data.TimedPlayback.Timing.LayerTransport} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TimedPlayback.Timing.LayerTransport, 1));
};


/**
 * @param {?proto.rv.data.TimedPlayback.Timing.LayerTransport|undefined} value
 * @return {!proto.rv.data.TimedPlayback.Timing} returns this
*/
proto.rv.data.TimedPlayback.Timing.prototype.setLayerTransport = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.rv.data.TimedPlayback.Timing.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TimedPlayback.Timing} returns this
 */
proto.rv.data.TimedPlayback.Timing.prototype.clearLayerTransport = function() {
  return this.setLayerTransport(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TimedPlayback.Timing.prototype.hasLayerTransport = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SMPTETimecode smpte_timecode = 2;
 * @return {?proto.rv.data.TimedPlayback.Timing.SMPTETimecode}
 */
proto.rv.data.TimedPlayback.Timing.prototype.getSmpteTimecode = function() {
  return /** @type{?proto.rv.data.TimedPlayback.Timing.SMPTETimecode} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TimedPlayback.Timing.SMPTETimecode, 2));
};


/**
 * @param {?proto.rv.data.TimedPlayback.Timing.SMPTETimecode|undefined} value
 * @return {!proto.rv.data.TimedPlayback.Timing} returns this
*/
proto.rv.data.TimedPlayback.Timing.prototype.setSmpteTimecode = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.rv.data.TimedPlayback.Timing.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TimedPlayback.Timing} returns this
 */
proto.rv.data.TimedPlayback.Timing.prototype.clearSmpteTimecode = function() {
  return this.setSmpteTimecode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TimedPlayback.Timing.prototype.hasSmpteTimecode = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Internal internal = 3;
 * @return {?proto.rv.data.TimedPlayback.Timing.Internal}
 */
proto.rv.data.TimedPlayback.Timing.prototype.getInternal = function() {
  return /** @type{?proto.rv.data.TimedPlayback.Timing.Internal} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TimedPlayback.Timing.Internal, 3));
};


/**
 * @param {?proto.rv.data.TimedPlayback.Timing.Internal|undefined} value
 * @return {!proto.rv.data.TimedPlayback.Timing} returns this
*/
proto.rv.data.TimedPlayback.Timing.prototype.setInternal = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.rv.data.TimedPlayback.Timing.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TimedPlayback.Timing} returns this
 */
proto.rv.data.TimedPlayback.Timing.prototype.clearInternal = function() {
  return this.setInternal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TimedPlayback.Timing.prototype.hasInternal = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rv.data.TimedPlayback.Update.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10,11]];

/**
 * @enum {number}
 */
proto.rv.data.TimedPlayback.Update.ActiontypeCase = {
  ACTIONTYPE_NOT_SET: 0,
  PLAY: 1,
  RECORD: 2,
  PAUSE: 3,
  RESET: 4,
  JUMP_TO_TIME: 5,
  START_SCRUB: 6,
  END_SCRUB: 7,
  DURATION: 8,
  LOOP: 9,
  UPDATE_SEQUENCE: 10,
  MONITOR_SOURCE: 11
};

/**
 * @return {proto.rv.data.TimedPlayback.Update.ActiontypeCase}
 */
proto.rv.data.TimedPlayback.Update.prototype.getActiontypeCase = function() {
  return /** @type {proto.rv.data.TimedPlayback.Update.ActiontypeCase} */(jspb.Message.computeOneofCase(this, proto.rv.data.TimedPlayback.Update.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TimedPlayback.Update.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TimedPlayback.Update.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TimedPlayback.Update} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TimedPlayback.Update.toObject = function(includeInstance, msg) {
  var f, obj = {
play: (f = msg.getPlay()) && proto.rv.data.TimedPlayback.Update.Play.toObject(includeInstance, f),
record: (f = msg.getRecord()) && proto.rv.data.TimedPlayback.Update.Record.toObject(includeInstance, f),
pause: (f = msg.getPause()) && proto.rv.data.TimedPlayback.Update.Pause.toObject(includeInstance, f),
reset: (f = msg.getReset()) && proto.rv.data.TimedPlayback.Update.Reset.toObject(includeInstance, f),
jumpToTime: (f = msg.getJumpToTime()) && proto.rv.data.TimedPlayback.Update.JumpToTime.toObject(includeInstance, f),
startScrub: (f = msg.getStartScrub()) && proto.rv.data.TimedPlayback.Update.StartScrub.toObject(includeInstance, f),
endScrub: (f = msg.getEndScrub()) && proto.rv.data.TimedPlayback.Update.EndScrub.toObject(includeInstance, f),
duration: (f = msg.getDuration()) && proto.rv.data.TimedPlayback.Update.Duration.toObject(includeInstance, f),
loop: (f = msg.getLoop()) && proto.rv.data.TimedPlayback.Update.Loop.toObject(includeInstance, f),
updateSequence: (f = msg.getUpdateSequence()) && proto.rv.data.TimedPlayback.Sequence.toObject(includeInstance, f),
monitorSource: (f = msg.getMonitorSource()) && proto.rv.data.TimedPlayback.Update.MonitorSource.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TimedPlayback.Update}
 */
proto.rv.data.TimedPlayback.Update.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TimedPlayback.Update;
  return proto.rv.data.TimedPlayback.Update.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TimedPlayback.Update} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TimedPlayback.Update}
 */
proto.rv.data.TimedPlayback.Update.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.TimedPlayback.Update.Play;
      reader.readMessage(value,proto.rv.data.TimedPlayback.Update.Play.deserializeBinaryFromReader);
      msg.setPlay(value);
      break;
    case 2:
      var value = new proto.rv.data.TimedPlayback.Update.Record;
      reader.readMessage(value,proto.rv.data.TimedPlayback.Update.Record.deserializeBinaryFromReader);
      msg.setRecord(value);
      break;
    case 3:
      var value = new proto.rv.data.TimedPlayback.Update.Pause;
      reader.readMessage(value,proto.rv.data.TimedPlayback.Update.Pause.deserializeBinaryFromReader);
      msg.setPause(value);
      break;
    case 4:
      var value = new proto.rv.data.TimedPlayback.Update.Reset;
      reader.readMessage(value,proto.rv.data.TimedPlayback.Update.Reset.deserializeBinaryFromReader);
      msg.setReset(value);
      break;
    case 5:
      var value = new proto.rv.data.TimedPlayback.Update.JumpToTime;
      reader.readMessage(value,proto.rv.data.TimedPlayback.Update.JumpToTime.deserializeBinaryFromReader);
      msg.setJumpToTime(value);
      break;
    case 6:
      var value = new proto.rv.data.TimedPlayback.Update.StartScrub;
      reader.readMessage(value,proto.rv.data.TimedPlayback.Update.StartScrub.deserializeBinaryFromReader);
      msg.setStartScrub(value);
      break;
    case 7:
      var value = new proto.rv.data.TimedPlayback.Update.EndScrub;
      reader.readMessage(value,proto.rv.data.TimedPlayback.Update.EndScrub.deserializeBinaryFromReader);
      msg.setEndScrub(value);
      break;
    case 8:
      var value = new proto.rv.data.TimedPlayback.Update.Duration;
      reader.readMessage(value,proto.rv.data.TimedPlayback.Update.Duration.deserializeBinaryFromReader);
      msg.setDuration(value);
      break;
    case 9:
      var value = new proto.rv.data.TimedPlayback.Update.Loop;
      reader.readMessage(value,proto.rv.data.TimedPlayback.Update.Loop.deserializeBinaryFromReader);
      msg.setLoop(value);
      break;
    case 10:
      var value = new proto.rv.data.TimedPlayback.Sequence;
      reader.readMessage(value,proto.rv.data.TimedPlayback.Sequence.deserializeBinaryFromReader);
      msg.setUpdateSequence(value);
      break;
    case 11:
      var value = new proto.rv.data.TimedPlayback.Update.MonitorSource;
      reader.readMessage(value,proto.rv.data.TimedPlayback.Update.MonitorSource.deserializeBinaryFromReader);
      msg.setMonitorSource(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TimedPlayback.Update.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TimedPlayback.Update.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TimedPlayback.Update} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TimedPlayback.Update.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlay();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.TimedPlayback.Update.Play.serializeBinaryToWriter
    );
  }
  f = message.getRecord();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rv.data.TimedPlayback.Update.Record.serializeBinaryToWriter
    );
  }
  f = message.getPause();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rv.data.TimedPlayback.Update.Pause.serializeBinaryToWriter
    );
  }
  f = message.getReset();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rv.data.TimedPlayback.Update.Reset.serializeBinaryToWriter
    );
  }
  f = message.getJumpToTime();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.rv.data.TimedPlayback.Update.JumpToTime.serializeBinaryToWriter
    );
  }
  f = message.getStartScrub();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.rv.data.TimedPlayback.Update.StartScrub.serializeBinaryToWriter
    );
  }
  f = message.getEndScrub();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.rv.data.TimedPlayback.Update.EndScrub.serializeBinaryToWriter
    );
  }
  f = message.getDuration();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.rv.data.TimedPlayback.Update.Duration.serializeBinaryToWriter
    );
  }
  f = message.getLoop();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.rv.data.TimedPlayback.Update.Loop.serializeBinaryToWriter
    );
  }
  f = message.getUpdateSequence();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.rv.data.TimedPlayback.Sequence.serializeBinaryToWriter
    );
  }
  f = message.getMonitorSource();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.rv.data.TimedPlayback.Update.MonitorSource.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TimedPlayback.Update.Play.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TimedPlayback.Update.Play.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TimedPlayback.Update.Play} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TimedPlayback.Update.Play.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TimedPlayback.Update.Play}
 */
proto.rv.data.TimedPlayback.Update.Play.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TimedPlayback.Update.Play;
  return proto.rv.data.TimedPlayback.Update.Play.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TimedPlayback.Update.Play} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TimedPlayback.Update.Play}
 */
proto.rv.data.TimedPlayback.Update.Play.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TimedPlayback.Update.Play.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TimedPlayback.Update.Play.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TimedPlayback.Update.Play} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TimedPlayback.Update.Play.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TimedPlayback.Update.Record.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TimedPlayback.Update.Record.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TimedPlayback.Update.Record} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TimedPlayback.Update.Record.toObject = function(includeInstance, msg) {
  var f, obj = {
isRecording: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TimedPlayback.Update.Record}
 */
proto.rv.data.TimedPlayback.Update.Record.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TimedPlayback.Update.Record;
  return proto.rv.data.TimedPlayback.Update.Record.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TimedPlayback.Update.Record} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TimedPlayback.Update.Record}
 */
proto.rv.data.TimedPlayback.Update.Record.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsRecording(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TimedPlayback.Update.Record.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TimedPlayback.Update.Record.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TimedPlayback.Update.Record} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TimedPlayback.Update.Record.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsRecording();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool is_recording = 1;
 * @return {boolean}
 */
proto.rv.data.TimedPlayback.Update.Record.prototype.getIsRecording = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.TimedPlayback.Update.Record} returns this
 */
proto.rv.data.TimedPlayback.Update.Record.prototype.setIsRecording = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TimedPlayback.Update.Pause.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TimedPlayback.Update.Pause.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TimedPlayback.Update.Pause} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TimedPlayback.Update.Pause.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TimedPlayback.Update.Pause}
 */
proto.rv.data.TimedPlayback.Update.Pause.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TimedPlayback.Update.Pause;
  return proto.rv.data.TimedPlayback.Update.Pause.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TimedPlayback.Update.Pause} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TimedPlayback.Update.Pause}
 */
proto.rv.data.TimedPlayback.Update.Pause.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TimedPlayback.Update.Pause.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TimedPlayback.Update.Pause.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TimedPlayback.Update.Pause} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TimedPlayback.Update.Pause.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TimedPlayback.Update.Reset.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TimedPlayback.Update.Reset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TimedPlayback.Update.Reset} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TimedPlayback.Update.Reset.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TimedPlayback.Update.Reset}
 */
proto.rv.data.TimedPlayback.Update.Reset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TimedPlayback.Update.Reset;
  return proto.rv.data.TimedPlayback.Update.Reset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TimedPlayback.Update.Reset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TimedPlayback.Update.Reset}
 */
proto.rv.data.TimedPlayback.Update.Reset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TimedPlayback.Update.Reset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TimedPlayback.Update.Reset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TimedPlayback.Update.Reset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TimedPlayback.Update.Reset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TimedPlayback.Update.JumpToTime.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TimedPlayback.Update.JumpToTime.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TimedPlayback.Update.JumpToTime} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TimedPlayback.Update.JumpToTime.toObject = function(includeInstance, msg) {
  var f, obj = {
time: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TimedPlayback.Update.JumpToTime}
 */
proto.rv.data.TimedPlayback.Update.JumpToTime.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TimedPlayback.Update.JumpToTime;
  return proto.rv.data.TimedPlayback.Update.JumpToTime.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TimedPlayback.Update.JumpToTime} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TimedPlayback.Update.JumpToTime}
 */
proto.rv.data.TimedPlayback.Update.JumpToTime.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TimedPlayback.Update.JumpToTime.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TimedPlayback.Update.JumpToTime.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TimedPlayback.Update.JumpToTime} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TimedPlayback.Update.JumpToTime.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
};


/**
 * optional double time = 1;
 * @return {number}
 */
proto.rv.data.TimedPlayback.Update.JumpToTime.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.TimedPlayback.Update.JumpToTime} returns this
 */
proto.rv.data.TimedPlayback.Update.JumpToTime.prototype.setTime = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TimedPlayback.Update.StartScrub.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TimedPlayback.Update.StartScrub.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TimedPlayback.Update.StartScrub} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TimedPlayback.Update.StartScrub.toObject = function(includeInstance, msg) {
  var f, obj = {
time: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TimedPlayback.Update.StartScrub}
 */
proto.rv.data.TimedPlayback.Update.StartScrub.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TimedPlayback.Update.StartScrub;
  return proto.rv.data.TimedPlayback.Update.StartScrub.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TimedPlayback.Update.StartScrub} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TimedPlayback.Update.StartScrub}
 */
proto.rv.data.TimedPlayback.Update.StartScrub.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TimedPlayback.Update.StartScrub.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TimedPlayback.Update.StartScrub.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TimedPlayback.Update.StartScrub} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TimedPlayback.Update.StartScrub.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
};


/**
 * optional double time = 1;
 * @return {number}
 */
proto.rv.data.TimedPlayback.Update.StartScrub.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.TimedPlayback.Update.StartScrub} returns this
 */
proto.rv.data.TimedPlayback.Update.StartScrub.prototype.setTime = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TimedPlayback.Update.EndScrub.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TimedPlayback.Update.EndScrub.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TimedPlayback.Update.EndScrub} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TimedPlayback.Update.EndScrub.toObject = function(includeInstance, msg) {
  var f, obj = {
time: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TimedPlayback.Update.EndScrub}
 */
proto.rv.data.TimedPlayback.Update.EndScrub.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TimedPlayback.Update.EndScrub;
  return proto.rv.data.TimedPlayback.Update.EndScrub.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TimedPlayback.Update.EndScrub} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TimedPlayback.Update.EndScrub}
 */
proto.rv.data.TimedPlayback.Update.EndScrub.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TimedPlayback.Update.EndScrub.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TimedPlayback.Update.EndScrub.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TimedPlayback.Update.EndScrub} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TimedPlayback.Update.EndScrub.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double time = 2;
 * @return {number}
 */
proto.rv.data.TimedPlayback.Update.EndScrub.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.TimedPlayback.Update.EndScrub} returns this
 */
proto.rv.data.TimedPlayback.Update.EndScrub.prototype.setTime = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TimedPlayback.Update.Duration.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TimedPlayback.Update.Duration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TimedPlayback.Update.Duration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TimedPlayback.Update.Duration.toObject = function(includeInstance, msg) {
  var f, obj = {
duration: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TimedPlayback.Update.Duration}
 */
proto.rv.data.TimedPlayback.Update.Duration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TimedPlayback.Update.Duration;
  return proto.rv.data.TimedPlayback.Update.Duration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TimedPlayback.Update.Duration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TimedPlayback.Update.Duration}
 */
proto.rv.data.TimedPlayback.Update.Duration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDuration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TimedPlayback.Update.Duration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TimedPlayback.Update.Duration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TimedPlayback.Update.Duration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TimedPlayback.Update.Duration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDuration();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
};


/**
 * optional double duration = 1;
 * @return {number}
 */
proto.rv.data.TimedPlayback.Update.Duration.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.TimedPlayback.Update.Duration} returns this
 */
proto.rv.data.TimedPlayback.Update.Duration.prototype.setDuration = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TimedPlayback.Update.Loop.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TimedPlayback.Update.Loop.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TimedPlayback.Update.Loop} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TimedPlayback.Update.Loop.toObject = function(includeInstance, msg) {
  var f, obj = {
loop: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TimedPlayback.Update.Loop}
 */
proto.rv.data.TimedPlayback.Update.Loop.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TimedPlayback.Update.Loop;
  return proto.rv.data.TimedPlayback.Update.Loop.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TimedPlayback.Update.Loop} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TimedPlayback.Update.Loop}
 */
proto.rv.data.TimedPlayback.Update.Loop.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLoop(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TimedPlayback.Update.Loop.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TimedPlayback.Update.Loop.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TimedPlayback.Update.Loop} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TimedPlayback.Update.Loop.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLoop();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool loop = 1;
 * @return {boolean}
 */
proto.rv.data.TimedPlayback.Update.Loop.prototype.getLoop = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.TimedPlayback.Update.Loop} returns this
 */
proto.rv.data.TimedPlayback.Update.Loop.prototype.setLoop = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.TimedPlayback.Update.MonitorSource.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.TimedPlayback.Update.MonitorSource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.TimedPlayback.Update.MonitorSource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TimedPlayback.Update.MonitorSource.toObject = function(includeInstance, msg) {
  var f, obj = {
enable: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.TimedPlayback.Update.MonitorSource}
 */
proto.rv.data.TimedPlayback.Update.MonitorSource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.TimedPlayback.Update.MonitorSource;
  return proto.rv.data.TimedPlayback.Update.MonitorSource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.TimedPlayback.Update.MonitorSource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.TimedPlayback.Update.MonitorSource}
 */
proto.rv.data.TimedPlayback.Update.MonitorSource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.TimedPlayback.Update.MonitorSource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.TimedPlayback.Update.MonitorSource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.TimedPlayback.Update.MonitorSource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.TimedPlayback.Update.MonitorSource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnable();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool enable = 1;
 * @return {boolean}
 */
proto.rv.data.TimedPlayback.Update.MonitorSource.prototype.getEnable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.TimedPlayback.Update.MonitorSource} returns this
 */
proto.rv.data.TimedPlayback.Update.MonitorSource.prototype.setEnable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional Play play = 1;
 * @return {?proto.rv.data.TimedPlayback.Update.Play}
 */
proto.rv.data.TimedPlayback.Update.prototype.getPlay = function() {
  return /** @type{?proto.rv.data.TimedPlayback.Update.Play} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TimedPlayback.Update.Play, 1));
};


/**
 * @param {?proto.rv.data.TimedPlayback.Update.Play|undefined} value
 * @return {!proto.rv.data.TimedPlayback.Update} returns this
*/
proto.rv.data.TimedPlayback.Update.prototype.setPlay = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.rv.data.TimedPlayback.Update.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TimedPlayback.Update} returns this
 */
proto.rv.data.TimedPlayback.Update.prototype.clearPlay = function() {
  return this.setPlay(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TimedPlayback.Update.prototype.hasPlay = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Record record = 2;
 * @return {?proto.rv.data.TimedPlayback.Update.Record}
 */
proto.rv.data.TimedPlayback.Update.prototype.getRecord = function() {
  return /** @type{?proto.rv.data.TimedPlayback.Update.Record} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TimedPlayback.Update.Record, 2));
};


/**
 * @param {?proto.rv.data.TimedPlayback.Update.Record|undefined} value
 * @return {!proto.rv.data.TimedPlayback.Update} returns this
*/
proto.rv.data.TimedPlayback.Update.prototype.setRecord = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.rv.data.TimedPlayback.Update.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TimedPlayback.Update} returns this
 */
proto.rv.data.TimedPlayback.Update.prototype.clearRecord = function() {
  return this.setRecord(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TimedPlayback.Update.prototype.hasRecord = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Pause pause = 3;
 * @return {?proto.rv.data.TimedPlayback.Update.Pause}
 */
proto.rv.data.TimedPlayback.Update.prototype.getPause = function() {
  return /** @type{?proto.rv.data.TimedPlayback.Update.Pause} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TimedPlayback.Update.Pause, 3));
};


/**
 * @param {?proto.rv.data.TimedPlayback.Update.Pause|undefined} value
 * @return {!proto.rv.data.TimedPlayback.Update} returns this
*/
proto.rv.data.TimedPlayback.Update.prototype.setPause = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.rv.data.TimedPlayback.Update.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TimedPlayback.Update} returns this
 */
proto.rv.data.TimedPlayback.Update.prototype.clearPause = function() {
  return this.setPause(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TimedPlayback.Update.prototype.hasPause = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Reset reset = 4;
 * @return {?proto.rv.data.TimedPlayback.Update.Reset}
 */
proto.rv.data.TimedPlayback.Update.prototype.getReset = function() {
  return /** @type{?proto.rv.data.TimedPlayback.Update.Reset} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TimedPlayback.Update.Reset, 4));
};


/**
 * @param {?proto.rv.data.TimedPlayback.Update.Reset|undefined} value
 * @return {!proto.rv.data.TimedPlayback.Update} returns this
*/
proto.rv.data.TimedPlayback.Update.prototype.setReset = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.rv.data.TimedPlayback.Update.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TimedPlayback.Update} returns this
 */
proto.rv.data.TimedPlayback.Update.prototype.clearReset = function() {
  return this.setReset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TimedPlayback.Update.prototype.hasReset = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional JumpToTime jump_to_time = 5;
 * @return {?proto.rv.data.TimedPlayback.Update.JumpToTime}
 */
proto.rv.data.TimedPlayback.Update.prototype.getJumpToTime = function() {
  return /** @type{?proto.rv.data.TimedPlayback.Update.JumpToTime} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TimedPlayback.Update.JumpToTime, 5));
};


/**
 * @param {?proto.rv.data.TimedPlayback.Update.JumpToTime|undefined} value
 * @return {!proto.rv.data.TimedPlayback.Update} returns this
*/
proto.rv.data.TimedPlayback.Update.prototype.setJumpToTime = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.rv.data.TimedPlayback.Update.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TimedPlayback.Update} returns this
 */
proto.rv.data.TimedPlayback.Update.prototype.clearJumpToTime = function() {
  return this.setJumpToTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TimedPlayback.Update.prototype.hasJumpToTime = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional StartScrub start_scrub = 6;
 * @return {?proto.rv.data.TimedPlayback.Update.StartScrub}
 */
proto.rv.data.TimedPlayback.Update.prototype.getStartScrub = function() {
  return /** @type{?proto.rv.data.TimedPlayback.Update.StartScrub} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TimedPlayback.Update.StartScrub, 6));
};


/**
 * @param {?proto.rv.data.TimedPlayback.Update.StartScrub|undefined} value
 * @return {!proto.rv.data.TimedPlayback.Update} returns this
*/
proto.rv.data.TimedPlayback.Update.prototype.setStartScrub = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.rv.data.TimedPlayback.Update.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TimedPlayback.Update} returns this
 */
proto.rv.data.TimedPlayback.Update.prototype.clearStartScrub = function() {
  return this.setStartScrub(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TimedPlayback.Update.prototype.hasStartScrub = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional EndScrub end_scrub = 7;
 * @return {?proto.rv.data.TimedPlayback.Update.EndScrub}
 */
proto.rv.data.TimedPlayback.Update.prototype.getEndScrub = function() {
  return /** @type{?proto.rv.data.TimedPlayback.Update.EndScrub} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TimedPlayback.Update.EndScrub, 7));
};


/**
 * @param {?proto.rv.data.TimedPlayback.Update.EndScrub|undefined} value
 * @return {!proto.rv.data.TimedPlayback.Update} returns this
*/
proto.rv.data.TimedPlayback.Update.prototype.setEndScrub = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.rv.data.TimedPlayback.Update.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TimedPlayback.Update} returns this
 */
proto.rv.data.TimedPlayback.Update.prototype.clearEndScrub = function() {
  return this.setEndScrub(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TimedPlayback.Update.prototype.hasEndScrub = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Duration duration = 8;
 * @return {?proto.rv.data.TimedPlayback.Update.Duration}
 */
proto.rv.data.TimedPlayback.Update.prototype.getDuration = function() {
  return /** @type{?proto.rv.data.TimedPlayback.Update.Duration} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TimedPlayback.Update.Duration, 8));
};


/**
 * @param {?proto.rv.data.TimedPlayback.Update.Duration|undefined} value
 * @return {!proto.rv.data.TimedPlayback.Update} returns this
*/
proto.rv.data.TimedPlayback.Update.prototype.setDuration = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.rv.data.TimedPlayback.Update.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TimedPlayback.Update} returns this
 */
proto.rv.data.TimedPlayback.Update.prototype.clearDuration = function() {
  return this.setDuration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TimedPlayback.Update.prototype.hasDuration = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Loop loop = 9;
 * @return {?proto.rv.data.TimedPlayback.Update.Loop}
 */
proto.rv.data.TimedPlayback.Update.prototype.getLoop = function() {
  return /** @type{?proto.rv.data.TimedPlayback.Update.Loop} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TimedPlayback.Update.Loop, 9));
};


/**
 * @param {?proto.rv.data.TimedPlayback.Update.Loop|undefined} value
 * @return {!proto.rv.data.TimedPlayback.Update} returns this
*/
proto.rv.data.TimedPlayback.Update.prototype.setLoop = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.rv.data.TimedPlayback.Update.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TimedPlayback.Update} returns this
 */
proto.rv.data.TimedPlayback.Update.prototype.clearLoop = function() {
  return this.setLoop(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TimedPlayback.Update.prototype.hasLoop = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Sequence update_sequence = 10;
 * @return {?proto.rv.data.TimedPlayback.Sequence}
 */
proto.rv.data.TimedPlayback.Update.prototype.getUpdateSequence = function() {
  return /** @type{?proto.rv.data.TimedPlayback.Sequence} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TimedPlayback.Sequence, 10));
};


/**
 * @param {?proto.rv.data.TimedPlayback.Sequence|undefined} value
 * @return {!proto.rv.data.TimedPlayback.Update} returns this
*/
proto.rv.data.TimedPlayback.Update.prototype.setUpdateSequence = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.rv.data.TimedPlayback.Update.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TimedPlayback.Update} returns this
 */
proto.rv.data.TimedPlayback.Update.prototype.clearUpdateSequence = function() {
  return this.setUpdateSequence(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TimedPlayback.Update.prototype.hasUpdateSequence = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional MonitorSource monitor_source = 11;
 * @return {?proto.rv.data.TimedPlayback.Update.MonitorSource}
 */
proto.rv.data.TimedPlayback.Update.prototype.getMonitorSource = function() {
  return /** @type{?proto.rv.data.TimedPlayback.Update.MonitorSource} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TimedPlayback.Update.MonitorSource, 11));
};


/**
 * @param {?proto.rv.data.TimedPlayback.Update.MonitorSource|undefined} value
 * @return {!proto.rv.data.TimedPlayback.Update} returns this
*/
proto.rv.data.TimedPlayback.Update.prototype.setMonitorSource = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.rv.data.TimedPlayback.Update.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TimedPlayback.Update} returns this
 */
proto.rv.data.TimedPlayback.Update.prototype.clearMonitorSource = function() {
  return this.setMonitorSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TimedPlayback.Update.prototype.hasMonitorSource = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional Sequence sequence = 1;
 * @return {?proto.rv.data.TimedPlayback.Sequence}
 */
proto.rv.data.TimedPlayback.prototype.getSequence = function() {
  return /** @type{?proto.rv.data.TimedPlayback.Sequence} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TimedPlayback.Sequence, 1));
};


/**
 * @param {?proto.rv.data.TimedPlayback.Sequence|undefined} value
 * @return {!proto.rv.data.TimedPlayback} returns this
*/
proto.rv.data.TimedPlayback.prototype.setSequence = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TimedPlayback} returns this
 */
proto.rv.data.TimedPlayback.prototype.clearSequence = function() {
  return this.setSequence(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TimedPlayback.prototype.hasSequence = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Timing timing = 2;
 * @return {?proto.rv.data.TimedPlayback.Timing}
 */
proto.rv.data.TimedPlayback.prototype.getTiming = function() {
  return /** @type{?proto.rv.data.TimedPlayback.Timing} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.TimedPlayback.Timing, 2));
};


/**
 * @param {?proto.rv.data.TimedPlayback.Timing|undefined} value
 * @return {!proto.rv.data.TimedPlayback} returns this
*/
proto.rv.data.TimedPlayback.prototype.setTiming = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.TimedPlayback} returns this
 */
proto.rv.data.TimedPlayback.prototype.clearTiming = function() {
  return this.setTiming(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.TimedPlayback.prototype.hasTiming = function() {
  return jspb.Message.getField(this, 2) != null;
};


