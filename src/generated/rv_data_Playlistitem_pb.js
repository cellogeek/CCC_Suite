// source: playlist.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.rv.data.PlaylistItem');
goog.provide('proto.rv.data.PlaylistItem.Header');
goog.provide('proto.rv.data.PlaylistItem.ItemtypeCase');
goog.provide('proto.rv.data.PlaylistItem.Placeholder');
goog.provide('proto.rv.data.PlaylistItem.PlanningCenter');
goog.provide('proto.rv.data.PlaylistItem.Presentation');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.rv.data.Action');
goog.require('proto.rv.data.Color');
goog.require('proto.rv.data.Cue');
goog.require('proto.rv.data.MusicKeyScale');
goog.require('proto.rv.data.PlanningCenterPlan.PlanItem');
goog.require('proto.rv.data.URL');
goog.require('proto.rv.data.UUID');

goog.forwardDeclare('proto.rv.data.Action.ContentDestination');
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.PlaylistItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rv.data.PlaylistItem.repeatedFields_, proto.rv.data.PlaylistItem.oneofGroups_);
};
goog.inherits(proto.rv.data.PlaylistItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.PlaylistItem.displayName = 'proto.rv.data.PlaylistItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.PlaylistItem.Header = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rv.data.PlaylistItem.Header.repeatedFields_, null);
};
goog.inherits(proto.rv.data.PlaylistItem.Header, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.PlaylistItem.Header.displayName = 'proto.rv.data.PlaylistItem.Header';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.PlaylistItem.Presentation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.PlaylistItem.Presentation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.PlaylistItem.Presentation.displayName = 'proto.rv.data.PlaylistItem.Presentation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.PlaylistItem.PlanningCenter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.PlaylistItem.PlanningCenter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.PlaylistItem.PlanningCenter.displayName = 'proto.rv.data.PlaylistItem.PlanningCenter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.PlaylistItem.Placeholder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.PlaylistItem.Placeholder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.PlaylistItem.Placeholder.displayName = 'proto.rv.data.PlaylistItem.Placeholder';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rv.data.PlaylistItem.repeatedFields_ = [7];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rv.data.PlaylistItem.oneofGroups_ = [[3,4,5,6,8]];

/**
 * @enum {number}
 */
proto.rv.data.PlaylistItem.ItemtypeCase = {
  ITEMTYPE_NOT_SET: 0,
  HEADER: 3,
  PRESENTATION: 4,
  CUE: 5,
  PLANNING_CENTER: 6,
  PLACEHOLDER: 8
};

/**
 * @return {proto.rv.data.PlaylistItem.ItemtypeCase}
 */
proto.rv.data.PlaylistItem.prototype.getItemtypeCase = function() {
  return /** @type {proto.rv.data.PlaylistItem.ItemtypeCase} */(jspb.Message.computeOneofCase(this, proto.rv.data.PlaylistItem.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.PlaylistItem.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.PlaylistItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.PlaylistItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.PlaylistItem.toObject = function(includeInstance, msg) {
  var f, obj = {
uuid: (f = msg.getUuid()) && proto.rv.data.UUID.toObject(includeInstance, f),
name: jspb.Message.getFieldWithDefault(msg, 2, ""),
tagsList: jspb.Message.toObjectList(msg.getTagsList(),
    proto.rv.data.UUID.toObject, includeInstance),
isHidden: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
header: (f = msg.getHeader()) && proto.rv.data.PlaylistItem.Header.toObject(includeInstance, f),
presentation: (f = msg.getPresentation()) && proto.rv.data.PlaylistItem.Presentation.toObject(includeInstance, f),
cue: (f = msg.getCue()) && proto.rv.data.Cue.toObject(includeInstance, f),
planningCenter: (f = msg.getPlanningCenter()) && proto.rv.data.PlaylistItem.PlanningCenter.toObject(includeInstance, f),
placeholder: (f = msg.getPlaceholder()) && proto.rv.data.PlaylistItem.Placeholder.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.PlaylistItem}
 */
proto.rv.data.PlaylistItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.PlaylistItem;
  return proto.rv.data.PlaylistItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.PlaylistItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.PlaylistItem}
 */
proto.rv.data.PlaylistItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.UUID;
      reader.readMessage(value,proto.rv.data.UUID.deserializeBinaryFromReader);
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 7:
      var value = new proto.rv.data.UUID;
      reader.readMessage(value,proto.rv.data.UUID.deserializeBinaryFromReader);
      msg.addTags(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsHidden(value);
      break;
    case 3:
      var value = new proto.rv.data.PlaylistItem.Header;
      reader.readMessage(value,proto.rv.data.PlaylistItem.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 4:
      var value = new proto.rv.data.PlaylistItem.Presentation;
      reader.readMessage(value,proto.rv.data.PlaylistItem.Presentation.deserializeBinaryFromReader);
      msg.setPresentation(value);
      break;
    case 5:
      var value = new proto.rv.data.Cue;
      reader.readMessage(value,proto.rv.data.Cue.deserializeBinaryFromReader);
      msg.setCue(value);
      break;
    case 6:
      var value = new proto.rv.data.PlaylistItem.PlanningCenter;
      reader.readMessage(value,proto.rv.data.PlaylistItem.PlanningCenter.deserializeBinaryFromReader);
      msg.setPlanningCenter(value);
      break;
    case 8:
      var value = new proto.rv.data.PlaylistItem.Placeholder;
      reader.readMessage(value,proto.rv.data.PlaylistItem.Placeholder.deserializeBinaryFromReader);
      msg.setPlaceholder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.PlaylistItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.PlaylistItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.PlaylistItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.PlaylistItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.UUID.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.rv.data.UUID.serializeBinaryToWriter
    );
  }
  f = message.getIsHidden();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rv.data.PlaylistItem.Header.serializeBinaryToWriter
    );
  }
  f = message.getPresentation();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rv.data.PlaylistItem.Presentation.serializeBinaryToWriter
    );
  }
  f = message.getCue();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.rv.data.Cue.serializeBinaryToWriter
    );
  }
  f = message.getPlanningCenter();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.rv.data.PlaylistItem.PlanningCenter.serializeBinaryToWriter
    );
  }
  f = message.getPlaceholder();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.rv.data.PlaylistItem.Placeholder.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rv.data.PlaylistItem.Header.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.PlaylistItem.Header.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.PlaylistItem.Header.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.PlaylistItem.Header} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.PlaylistItem.Header.toObject = function(includeInstance, msg) {
  var f, obj = {
color: (f = msg.getColor()) && proto.rv.data.Color.toObject(includeInstance, f),
actionsList: jspb.Message.toObjectList(msg.getActionsList(),
    proto.rv.data.Action.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.PlaylistItem.Header}
 */
proto.rv.data.PlaylistItem.Header.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.PlaylistItem.Header;
  return proto.rv.data.PlaylistItem.Header.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.PlaylistItem.Header} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.PlaylistItem.Header}
 */
proto.rv.data.PlaylistItem.Header.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.Color;
      reader.readMessage(value,proto.rv.data.Color.deserializeBinaryFromReader);
      msg.setColor(value);
      break;
    case 2:
      var value = new proto.rv.data.Action;
      reader.readMessage(value,proto.rv.data.Action.deserializeBinaryFromReader);
      msg.addActions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.PlaylistItem.Header.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.PlaylistItem.Header.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.PlaylistItem.Header} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.PlaylistItem.Header.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getColor();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.Color.serializeBinaryToWriter
    );
  }
  f = message.getActionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.rv.data.Action.serializeBinaryToWriter
    );
  }
};


/**
 * optional Color color = 1;
 * @return {?proto.rv.data.Color}
 */
proto.rv.data.PlaylistItem.Header.prototype.getColor = function() {
  return /** @type{?proto.rv.data.Color} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Color, 1));
};


/**
 * @param {?proto.rv.data.Color|undefined} value
 * @return {!proto.rv.data.PlaylistItem.Header} returns this
*/
proto.rv.data.PlaylistItem.Header.prototype.setColor = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.PlaylistItem.Header} returns this
 */
proto.rv.data.PlaylistItem.Header.prototype.clearColor = function() {
  return this.setColor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.PlaylistItem.Header.prototype.hasColor = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Action actions = 2;
 * @return {!Array<!proto.rv.data.Action>}
 */
proto.rv.data.PlaylistItem.Header.prototype.getActionsList = function() {
  return /** @type{!Array<!proto.rv.data.Action>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rv.data.Action, 2));
};


/**
 * @param {!Array<!proto.rv.data.Action>} value
 * @return {!proto.rv.data.PlaylistItem.Header} returns this
*/
proto.rv.data.PlaylistItem.Header.prototype.setActionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.rv.data.Action=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rv.data.Action}
 */
proto.rv.data.PlaylistItem.Header.prototype.addActions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.rv.data.Action, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.PlaylistItem.Header} returns this
 */
proto.rv.data.PlaylistItem.Header.prototype.clearActionsList = function() {
  return this.setActionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.PlaylistItem.Presentation.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.PlaylistItem.Presentation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.PlaylistItem.Presentation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.PlaylistItem.Presentation.toObject = function(includeInstance, msg) {
  var f, obj = {
documentPath: (f = msg.getDocumentPath()) && proto.rv.data.URL.toObject(includeInstance, f),
arrangement: (f = msg.getArrangement()) && proto.rv.data.UUID.toObject(includeInstance, f),
contentDestination: jspb.Message.getFieldWithDefault(msg, 3, 0),
userMusicKey: (f = msg.getUserMusicKey()) && proto.rv.data.MusicKeyScale.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.PlaylistItem.Presentation}
 */
proto.rv.data.PlaylistItem.Presentation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.PlaylistItem.Presentation;
  return proto.rv.data.PlaylistItem.Presentation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.PlaylistItem.Presentation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.PlaylistItem.Presentation}
 */
proto.rv.data.PlaylistItem.Presentation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.URL;
      reader.readMessage(value,proto.rv.data.URL.deserializeBinaryFromReader);
      msg.setDocumentPath(value);
      break;
    case 2:
      var value = new proto.rv.data.UUID;
      reader.readMessage(value,proto.rv.data.UUID.deserializeBinaryFromReader);
      msg.setArrangement(value);
      break;
    case 3:
      var value = /** @type {!proto.rv.data.Action.ContentDestination} */ (reader.readEnum());
      msg.setContentDestination(value);
      break;
    case 4:
      var value = new proto.rv.data.MusicKeyScale;
      reader.readMessage(value,proto.rv.data.MusicKeyScale.deserializeBinaryFromReader);
      msg.setUserMusicKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.PlaylistItem.Presentation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.PlaylistItem.Presentation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.PlaylistItem.Presentation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.PlaylistItem.Presentation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDocumentPath();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.URL.serializeBinaryToWriter
    );
  }
  f = message.getArrangement();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rv.data.UUID.serializeBinaryToWriter
    );
  }
  f = message.getContentDestination();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getUserMusicKey();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rv.data.MusicKeyScale.serializeBinaryToWriter
    );
  }
};


/**
 * optional URL document_path = 1;
 * @return {?proto.rv.data.URL}
 */
proto.rv.data.PlaylistItem.Presentation.prototype.getDocumentPath = function() {
  return /** @type{?proto.rv.data.URL} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.URL, 1));
};


/**
 * @param {?proto.rv.data.URL|undefined} value
 * @return {!proto.rv.data.PlaylistItem.Presentation} returns this
*/
proto.rv.data.PlaylistItem.Presentation.prototype.setDocumentPath = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.PlaylistItem.Presentation} returns this
 */
proto.rv.data.PlaylistItem.Presentation.prototype.clearDocumentPath = function() {
  return this.setDocumentPath(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.PlaylistItem.Presentation.prototype.hasDocumentPath = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional UUID arrangement = 2;
 * @return {?proto.rv.data.UUID}
 */
proto.rv.data.PlaylistItem.Presentation.prototype.getArrangement = function() {
  return /** @type{?proto.rv.data.UUID} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.UUID, 2));
};


/**
 * @param {?proto.rv.data.UUID|undefined} value
 * @return {!proto.rv.data.PlaylistItem.Presentation} returns this
*/
proto.rv.data.PlaylistItem.Presentation.prototype.setArrangement = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.PlaylistItem.Presentation} returns this
 */
proto.rv.data.PlaylistItem.Presentation.prototype.clearArrangement = function() {
  return this.setArrangement(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.PlaylistItem.Presentation.prototype.hasArrangement = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Action.ContentDestination content_destination = 3;
 * @return {!proto.rv.data.Action.ContentDestination}
 */
proto.rv.data.PlaylistItem.Presentation.prototype.getContentDestination = function() {
  return /** @type {!proto.rv.data.Action.ContentDestination} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.rv.data.Action.ContentDestination} value
 * @return {!proto.rv.data.PlaylistItem.Presentation} returns this
 */
proto.rv.data.PlaylistItem.Presentation.prototype.setContentDestination = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional MusicKeyScale user_music_key = 4;
 * @return {?proto.rv.data.MusicKeyScale}
 */
proto.rv.data.PlaylistItem.Presentation.prototype.getUserMusicKey = function() {
  return /** @type{?proto.rv.data.MusicKeyScale} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.MusicKeyScale, 4));
};


/**
 * @param {?proto.rv.data.MusicKeyScale|undefined} value
 * @return {!proto.rv.data.PlaylistItem.Presentation} returns this
*/
proto.rv.data.PlaylistItem.Presentation.prototype.setUserMusicKey = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.PlaylistItem.Presentation} returns this
 */
proto.rv.data.PlaylistItem.Presentation.prototype.clearUserMusicKey = function() {
  return this.setUserMusicKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.PlaylistItem.Presentation.prototype.hasUserMusicKey = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.PlaylistItem.PlanningCenter.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.PlaylistItem.PlanningCenter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.PlaylistItem.PlanningCenter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.PlaylistItem.PlanningCenter.toObject = function(includeInstance, msg) {
  var f, obj = {
item: (f = msg.getItem()) && proto.rv.data.PlanningCenterPlan.PlanItem.toObject(includeInstance, f),
linkedData: (f = msg.getLinkedData()) && proto.rv.data.PlaylistItem.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.PlaylistItem.PlanningCenter}
 */
proto.rv.data.PlaylistItem.PlanningCenter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.PlaylistItem.PlanningCenter;
  return proto.rv.data.PlaylistItem.PlanningCenter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.PlaylistItem.PlanningCenter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.PlaylistItem.PlanningCenter}
 */
proto.rv.data.PlaylistItem.PlanningCenter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.PlanningCenterPlan.PlanItem;
      reader.readMessage(value,proto.rv.data.PlanningCenterPlan.PlanItem.deserializeBinaryFromReader);
      msg.setItem(value);
      break;
    case 2:
      var value = new proto.rv.data.PlaylistItem;
      reader.readMessage(value,proto.rv.data.PlaylistItem.deserializeBinaryFromReader);
      msg.setLinkedData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.PlaylistItem.PlanningCenter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.PlaylistItem.PlanningCenter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.PlaylistItem.PlanningCenter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.PlaylistItem.PlanningCenter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItem();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.PlanningCenterPlan.PlanItem.serializeBinaryToWriter
    );
  }
  f = message.getLinkedData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rv.data.PlaylistItem.serializeBinaryToWriter
    );
  }
};


/**
 * optional PlanningCenterPlan.PlanItem item = 1;
 * @return {?proto.rv.data.PlanningCenterPlan.PlanItem}
 */
proto.rv.data.PlaylistItem.PlanningCenter.prototype.getItem = function() {
  return /** @type{?proto.rv.data.PlanningCenterPlan.PlanItem} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.PlanningCenterPlan.PlanItem, 1));
};


/**
 * @param {?proto.rv.data.PlanningCenterPlan.PlanItem|undefined} value
 * @return {!proto.rv.data.PlaylistItem.PlanningCenter} returns this
*/
proto.rv.data.PlaylistItem.PlanningCenter.prototype.setItem = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.PlaylistItem.PlanningCenter} returns this
 */
proto.rv.data.PlaylistItem.PlanningCenter.prototype.clearItem = function() {
  return this.setItem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.PlaylistItem.PlanningCenter.prototype.hasItem = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PlaylistItem linked_data = 2;
 * @return {?proto.rv.data.PlaylistItem}
 */
proto.rv.data.PlaylistItem.PlanningCenter.prototype.getLinkedData = function() {
  return /** @type{?proto.rv.data.PlaylistItem} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.PlaylistItem, 2));
};


/**
 * @param {?proto.rv.data.PlaylistItem|undefined} value
 * @return {!proto.rv.data.PlaylistItem.PlanningCenter} returns this
*/
proto.rv.data.PlaylistItem.PlanningCenter.prototype.setLinkedData = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.PlaylistItem.PlanningCenter} returns this
 */
proto.rv.data.PlaylistItem.PlanningCenter.prototype.clearLinkedData = function() {
  return this.setLinkedData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.PlaylistItem.PlanningCenter.prototype.hasLinkedData = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.PlaylistItem.Placeholder.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.PlaylistItem.Placeholder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.PlaylistItem.Placeholder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.PlaylistItem.Placeholder.toObject = function(includeInstance, msg) {
  var f, obj = {
linkedData: (f = msg.getLinkedData()) && proto.rv.data.PlaylistItem.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.PlaylistItem.Placeholder}
 */
proto.rv.data.PlaylistItem.Placeholder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.PlaylistItem.Placeholder;
  return proto.rv.data.PlaylistItem.Placeholder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.PlaylistItem.Placeholder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.PlaylistItem.Placeholder}
 */
proto.rv.data.PlaylistItem.Placeholder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.PlaylistItem;
      reader.readMessage(value,proto.rv.data.PlaylistItem.deserializeBinaryFromReader);
      msg.setLinkedData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.PlaylistItem.Placeholder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.PlaylistItem.Placeholder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.PlaylistItem.Placeholder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.PlaylistItem.Placeholder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLinkedData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.PlaylistItem.serializeBinaryToWriter
    );
  }
};


/**
 * optional PlaylistItem linked_data = 1;
 * @return {?proto.rv.data.PlaylistItem}
 */
proto.rv.data.PlaylistItem.Placeholder.prototype.getLinkedData = function() {
  return /** @type{?proto.rv.data.PlaylistItem} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.PlaylistItem, 1));
};


/**
 * @param {?proto.rv.data.PlaylistItem|undefined} value
 * @return {!proto.rv.data.PlaylistItem.Placeholder} returns this
*/
proto.rv.data.PlaylistItem.Placeholder.prototype.setLinkedData = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.PlaylistItem.Placeholder} returns this
 */
proto.rv.data.PlaylistItem.Placeholder.prototype.clearLinkedData = function() {
  return this.setLinkedData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.PlaylistItem.Placeholder.prototype.hasLinkedData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional UUID uuid = 1;
 * @return {?proto.rv.data.UUID}
 */
proto.rv.data.PlaylistItem.prototype.getUuid = function() {
  return /** @type{?proto.rv.data.UUID} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.UUID, 1));
};


/**
 * @param {?proto.rv.data.UUID|undefined} value
 * @return {!proto.rv.data.PlaylistItem} returns this
*/
proto.rv.data.PlaylistItem.prototype.setUuid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.PlaylistItem} returns this
 */
proto.rv.data.PlaylistItem.prototype.clearUuid = function() {
  return this.setUuid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.PlaylistItem.prototype.hasUuid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.rv.data.PlaylistItem.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.PlaylistItem} returns this
 */
proto.rv.data.PlaylistItem.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated UUID tags = 7;
 * @return {!Array<!proto.rv.data.UUID>}
 */
proto.rv.data.PlaylistItem.prototype.getTagsList = function() {
  return /** @type{!Array<!proto.rv.data.UUID>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rv.data.UUID, 7));
};


/**
 * @param {!Array<!proto.rv.data.UUID>} value
 * @return {!proto.rv.data.PlaylistItem} returns this
*/
proto.rv.data.PlaylistItem.prototype.setTagsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.rv.data.UUID=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rv.data.UUID}
 */
proto.rv.data.PlaylistItem.prototype.addTags = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.rv.data.UUID, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.PlaylistItem} returns this
 */
proto.rv.data.PlaylistItem.prototype.clearTagsList = function() {
  return this.setTagsList([]);
};


/**
 * optional bool is_hidden = 9;
 * @return {boolean}
 */
proto.rv.data.PlaylistItem.prototype.getIsHidden = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.PlaylistItem} returns this
 */
proto.rv.data.PlaylistItem.prototype.setIsHidden = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional Header header = 3;
 * @return {?proto.rv.data.PlaylistItem.Header}
 */
proto.rv.data.PlaylistItem.prototype.getHeader = function() {
  return /** @type{?proto.rv.data.PlaylistItem.Header} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.PlaylistItem.Header, 3));
};


/**
 * @param {?proto.rv.data.PlaylistItem.Header|undefined} value
 * @return {!proto.rv.data.PlaylistItem} returns this
*/
proto.rv.data.PlaylistItem.prototype.setHeader = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.rv.data.PlaylistItem.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.PlaylistItem} returns this
 */
proto.rv.data.PlaylistItem.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.PlaylistItem.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Presentation presentation = 4;
 * @return {?proto.rv.data.PlaylistItem.Presentation}
 */
proto.rv.data.PlaylistItem.prototype.getPresentation = function() {
  return /** @type{?proto.rv.data.PlaylistItem.Presentation} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.PlaylistItem.Presentation, 4));
};


/**
 * @param {?proto.rv.data.PlaylistItem.Presentation|undefined} value
 * @return {!proto.rv.data.PlaylistItem} returns this
*/
proto.rv.data.PlaylistItem.prototype.setPresentation = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.rv.data.PlaylistItem.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.PlaylistItem} returns this
 */
proto.rv.data.PlaylistItem.prototype.clearPresentation = function() {
  return this.setPresentation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.PlaylistItem.prototype.hasPresentation = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Cue cue = 5;
 * @return {?proto.rv.data.Cue}
 */
proto.rv.data.PlaylistItem.prototype.getCue = function() {
  return /** @type{?proto.rv.data.Cue} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Cue, 5));
};


/**
 * @param {?proto.rv.data.Cue|undefined} value
 * @return {!proto.rv.data.PlaylistItem} returns this
*/
proto.rv.data.PlaylistItem.prototype.setCue = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.rv.data.PlaylistItem.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.PlaylistItem} returns this
 */
proto.rv.data.PlaylistItem.prototype.clearCue = function() {
  return this.setCue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.PlaylistItem.prototype.hasCue = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional PlanningCenter planning_center = 6;
 * @return {?proto.rv.data.PlaylistItem.PlanningCenter}
 */
proto.rv.data.PlaylistItem.prototype.getPlanningCenter = function() {
  return /** @type{?proto.rv.data.PlaylistItem.PlanningCenter} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.PlaylistItem.PlanningCenter, 6));
};


/**
 * @param {?proto.rv.data.PlaylistItem.PlanningCenter|undefined} value
 * @return {!proto.rv.data.PlaylistItem} returns this
*/
proto.rv.data.PlaylistItem.prototype.setPlanningCenter = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.rv.data.PlaylistItem.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.PlaylistItem} returns this
 */
proto.rv.data.PlaylistItem.prototype.clearPlanningCenter = function() {
  return this.setPlanningCenter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.PlaylistItem.prototype.hasPlanningCenter = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Placeholder placeholder = 8;
 * @return {?proto.rv.data.PlaylistItem.Placeholder}
 */
proto.rv.data.PlaylistItem.prototype.getPlaceholder = function() {
  return /** @type{?proto.rv.data.PlaylistItem.Placeholder} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.PlaylistItem.Placeholder, 8));
};


/**
 * @param {?proto.rv.data.PlaylistItem.Placeholder|undefined} value
 * @return {!proto.rv.data.PlaylistItem} returns this
*/
proto.rv.data.PlaylistItem.prototype.setPlaceholder = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.rv.data.PlaylistItem.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.PlaylistItem} returns this
 */
proto.rv.data.PlaylistItem.prototype.clearPlaceholder = function() {
  return this.setPlaceholder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.PlaylistItem.prototype.hasPlaceholder = function() {
  return jspb.Message.getField(this, 8) != null;
};


