// source: recording.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.rv.data.Recording');
goog.provide('proto.rv.data.Recording.Preset');
goog.provide('proto.rv.data.Recording.SettingsDocument');
goog.provide('proto.rv.data.Recording.Stream');
goog.provide('proto.rv.data.Recording.Stream.Codec');
goog.provide('proto.rv.data.Recording.Stream.Container');
goog.provide('proto.rv.data.Recording.Stream.Destination');
goog.provide('proto.rv.data.Recording.Stream.Destination.DestinationCase');
goog.provide('proto.rv.data.Recording.Stream.Destination.Resi');
goog.provide('proto.rv.data.Recording.Stream.DiskDestination');
goog.provide('proto.rv.data.Recording.Stream.Encoder');
goog.provide('proto.rv.data.Recording.Stream.FrameRate');
goog.provide('proto.rv.data.Recording.Stream.OutputScreenSource');
goog.provide('proto.rv.data.Recording.Stream.RTMPDestination');
goog.provide('proto.rv.data.Recording.Stream.SourceCase');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.rv.data.DigitalAudio.Device.Map');
goog.require('proto.rv.data.URL');
goog.require('proto.rv.data.UUID');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Recording = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.Recording, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Recording.displayName = 'proto.rv.data.Recording';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Recording.SettingsDocument = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rv.data.Recording.SettingsDocument.repeatedFields_, null);
};
goog.inherits(proto.rv.data.Recording.SettingsDocument, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Recording.SettingsDocument.displayName = 'proto.rv.data.Recording.SettingsDocument';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Recording.Preset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rv.data.Recording.Preset.repeatedFields_, null);
};
goog.inherits(proto.rv.data.Recording.Preset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Recording.Preset.displayName = 'proto.rv.data.Recording.Preset';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Recording.Stream = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rv.data.Recording.Stream.repeatedFields_, proto.rv.data.Recording.Stream.oneofGroups_);
};
goog.inherits(proto.rv.data.Recording.Stream, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Recording.Stream.displayName = 'proto.rv.data.Recording.Stream';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Recording.Stream.Encoder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.Recording.Stream.Encoder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Recording.Stream.Encoder.displayName = 'proto.rv.data.Recording.Stream.Encoder';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Recording.Stream.OutputScreenSource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.Recording.Stream.OutputScreenSource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Recording.Stream.OutputScreenSource.displayName = 'proto.rv.data.Recording.Stream.OutputScreenSource';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Recording.Stream.DiskDestination = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.Recording.Stream.DiskDestination, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Recording.Stream.DiskDestination.displayName = 'proto.rv.data.Recording.Stream.DiskDestination';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Recording.Stream.RTMPDestination = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.Recording.Stream.RTMPDestination, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Recording.Stream.RTMPDestination.displayName = 'proto.rv.data.Recording.Stream.RTMPDestination';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Recording.Stream.Destination = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rv.data.Recording.Stream.Destination.oneofGroups_);
};
goog.inherits(proto.rv.data.Recording.Stream.Destination, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Recording.Stream.Destination.displayName = 'proto.rv.data.Recording.Stream.Destination';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rv.data.Recording.Stream.Destination.Resi = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rv.data.Recording.Stream.Destination.Resi, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rv.data.Recording.Stream.Destination.Resi.displayName = 'proto.rv.data.Recording.Stream.Destination.Resi';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Recording.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Recording.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Recording} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Recording.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Recording}
 */
proto.rv.data.Recording.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Recording;
  return proto.rv.data.Recording.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Recording} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Recording}
 */
proto.rv.data.Recording.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Recording.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Recording.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Recording} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Recording.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rv.data.Recording.SettingsDocument.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Recording.SettingsDocument.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Recording.SettingsDocument.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Recording.SettingsDocument} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Recording.SettingsDocument.toObject = function(includeInstance, msg) {
  var f, obj = {
streamsList: jspb.Message.toObjectList(msg.getStreamsList(),
    proto.rv.data.Recording.Stream.toObject, includeInstance),
presetsList: jspb.Message.toObjectList(msg.getPresetsList(),
    proto.rv.data.Recording.Preset.toObject, includeInstance),
activePreset: (f = msg.getActivePreset()) && proto.rv.data.Recording.Preset.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Recording.SettingsDocument}
 */
proto.rv.data.Recording.SettingsDocument.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Recording.SettingsDocument;
  return proto.rv.data.Recording.SettingsDocument.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Recording.SettingsDocument} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Recording.SettingsDocument}
 */
proto.rv.data.Recording.SettingsDocument.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.Recording.Stream;
      reader.readMessage(value,proto.rv.data.Recording.Stream.deserializeBinaryFromReader);
      msg.addStreams(value);
      break;
    case 2:
      var value = new proto.rv.data.Recording.Preset;
      reader.readMessage(value,proto.rv.data.Recording.Preset.deserializeBinaryFromReader);
      msg.addPresets(value);
      break;
    case 3:
      var value = new proto.rv.data.Recording.Preset;
      reader.readMessage(value,proto.rv.data.Recording.Preset.deserializeBinaryFromReader);
      msg.setActivePreset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Recording.SettingsDocument.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Recording.SettingsDocument.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Recording.SettingsDocument} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Recording.SettingsDocument.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStreamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rv.data.Recording.Stream.serializeBinaryToWriter
    );
  }
  f = message.getPresetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.rv.data.Recording.Preset.serializeBinaryToWriter
    );
  }
  f = message.getActivePreset();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rv.data.Recording.Preset.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Stream streams = 1;
 * @return {!Array<!proto.rv.data.Recording.Stream>}
 */
proto.rv.data.Recording.SettingsDocument.prototype.getStreamsList = function() {
  return /** @type{!Array<!proto.rv.data.Recording.Stream>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rv.data.Recording.Stream, 1));
};


/**
 * @param {!Array<!proto.rv.data.Recording.Stream>} value
 * @return {!proto.rv.data.Recording.SettingsDocument} returns this
*/
proto.rv.data.Recording.SettingsDocument.prototype.setStreamsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.rv.data.Recording.Stream=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rv.data.Recording.Stream}
 */
proto.rv.data.Recording.SettingsDocument.prototype.addStreams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rv.data.Recording.Stream, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.Recording.SettingsDocument} returns this
 */
proto.rv.data.Recording.SettingsDocument.prototype.clearStreamsList = function() {
  return this.setStreamsList([]);
};


/**
 * repeated Preset presets = 2;
 * @return {!Array<!proto.rv.data.Recording.Preset>}
 */
proto.rv.data.Recording.SettingsDocument.prototype.getPresetsList = function() {
  return /** @type{!Array<!proto.rv.data.Recording.Preset>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rv.data.Recording.Preset, 2));
};


/**
 * @param {!Array<!proto.rv.data.Recording.Preset>} value
 * @return {!proto.rv.data.Recording.SettingsDocument} returns this
*/
proto.rv.data.Recording.SettingsDocument.prototype.setPresetsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.rv.data.Recording.Preset=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rv.data.Recording.Preset}
 */
proto.rv.data.Recording.SettingsDocument.prototype.addPresets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.rv.data.Recording.Preset, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.Recording.SettingsDocument} returns this
 */
proto.rv.data.Recording.SettingsDocument.prototype.clearPresetsList = function() {
  return this.setPresetsList([]);
};


/**
 * optional Preset active_preset = 3;
 * @return {?proto.rv.data.Recording.Preset}
 */
proto.rv.data.Recording.SettingsDocument.prototype.getActivePreset = function() {
  return /** @type{?proto.rv.data.Recording.Preset} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Recording.Preset, 3));
};


/**
 * @param {?proto.rv.data.Recording.Preset|undefined} value
 * @return {!proto.rv.data.Recording.SettingsDocument} returns this
*/
proto.rv.data.Recording.SettingsDocument.prototype.setActivePreset = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Recording.SettingsDocument} returns this
 */
proto.rv.data.Recording.SettingsDocument.prototype.clearActivePreset = function() {
  return this.setActivePreset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Recording.SettingsDocument.prototype.hasActivePreset = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rv.data.Recording.Preset.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Recording.Preset.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Recording.Preset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Recording.Preset} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Recording.Preset.toObject = function(includeInstance, msg) {
  var f, obj = {
id: (f = msg.getId()) && proto.rv.data.UUID.toObject(includeInstance, f),
name: jspb.Message.getFieldWithDefault(msg, 2, ""),
streamsList: jspb.Message.toObjectList(msg.getStreamsList(),
    proto.rv.data.Recording.Stream.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Recording.Preset}
 */
proto.rv.data.Recording.Preset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Recording.Preset;
  return proto.rv.data.Recording.Preset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Recording.Preset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Recording.Preset}
 */
proto.rv.data.Recording.Preset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.UUID;
      reader.readMessage(value,proto.rv.data.UUID.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.rv.data.Recording.Stream;
      reader.readMessage(value,proto.rv.data.Recording.Stream.deserializeBinaryFromReader);
      msg.addStreams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Recording.Preset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Recording.Preset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Recording.Preset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Recording.Preset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.UUID.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStreamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.rv.data.Recording.Stream.serializeBinaryToWriter
    );
  }
};


/**
 * optional UUID id = 1;
 * @return {?proto.rv.data.UUID}
 */
proto.rv.data.Recording.Preset.prototype.getId = function() {
  return /** @type{?proto.rv.data.UUID} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.UUID, 1));
};


/**
 * @param {?proto.rv.data.UUID|undefined} value
 * @return {!proto.rv.data.Recording.Preset} returns this
*/
proto.rv.data.Recording.Preset.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Recording.Preset} returns this
 */
proto.rv.data.Recording.Preset.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Recording.Preset.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.rv.data.Recording.Preset.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.Recording.Preset} returns this
 */
proto.rv.data.Recording.Preset.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Stream streams = 3;
 * @return {!Array<!proto.rv.data.Recording.Stream>}
 */
proto.rv.data.Recording.Preset.prototype.getStreamsList = function() {
  return /** @type{!Array<!proto.rv.data.Recording.Stream>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rv.data.Recording.Stream, 3));
};


/**
 * @param {!Array<!proto.rv.data.Recording.Stream>} value
 * @return {!proto.rv.data.Recording.Preset} returns this
*/
proto.rv.data.Recording.Preset.prototype.setStreamsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.rv.data.Recording.Stream=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rv.data.Recording.Stream}
 */
proto.rv.data.Recording.Preset.prototype.addStreams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.rv.data.Recording.Stream, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.Recording.Preset} returns this
 */
proto.rv.data.Recording.Preset.prototype.clearStreamsList = function() {
  return this.setStreamsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rv.data.Recording.Stream.repeatedFields_ = [4,5];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rv.data.Recording.Stream.oneofGroups_ = [[2]];

/**
 * @enum {number}
 */
proto.rv.data.Recording.Stream.SourceCase = {
  SOURCE_NOT_SET: 0,
  OUTPUT_SCREEN: 2
};

/**
 * @return {proto.rv.data.Recording.Stream.SourceCase}
 */
proto.rv.data.Recording.Stream.prototype.getSourceCase = function() {
  return /** @type {proto.rv.data.Recording.Stream.SourceCase} */(jspb.Message.computeOneofCase(this, proto.rv.data.Recording.Stream.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Recording.Stream.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Recording.Stream.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Recording.Stream} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Recording.Stream.toObject = function(includeInstance, msg) {
  var f, obj = {
id: (f = msg.getId()) && proto.rv.data.UUID.toObject(includeInstance, f),
encoder: (f = msg.getEncoder()) && proto.rv.data.Recording.Stream.Encoder.toObject(includeInstance, f),
destinationsList: jspb.Message.toObjectList(msg.getDestinationsList(),
    proto.rv.data.Recording.Stream.Destination.toObject, includeInstance),
audioMapList: jspb.Message.toObjectList(msg.getAudioMapList(),
    proto.rv.data.DigitalAudio.Device.Map.toObject, includeInstance),
isaudiocustommapped: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
outputScreen: (f = msg.getOutputScreen()) && proto.rv.data.Recording.Stream.OutputScreenSource.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Recording.Stream}
 */
proto.rv.data.Recording.Stream.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Recording.Stream;
  return proto.rv.data.Recording.Stream.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Recording.Stream} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Recording.Stream}
 */
proto.rv.data.Recording.Stream.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.UUID;
      reader.readMessage(value,proto.rv.data.UUID.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 3:
      var value = new proto.rv.data.Recording.Stream.Encoder;
      reader.readMessage(value,proto.rv.data.Recording.Stream.Encoder.deserializeBinaryFromReader);
      msg.setEncoder(value);
      break;
    case 4:
      var value = new proto.rv.data.Recording.Stream.Destination;
      reader.readMessage(value,proto.rv.data.Recording.Stream.Destination.deserializeBinaryFromReader);
      msg.addDestinations(value);
      break;
    case 5:
      var value = new proto.rv.data.DigitalAudio.Device.Map;
      reader.readMessage(value,proto.rv.data.DigitalAudio.Device.Map.deserializeBinaryFromReader);
      msg.addAudioMap(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsaudiocustommapped(value);
      break;
    case 2:
      var value = new proto.rv.data.Recording.Stream.OutputScreenSource;
      reader.readMessage(value,proto.rv.data.Recording.Stream.OutputScreenSource.deserializeBinaryFromReader);
      msg.setOutputScreen(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Recording.Stream.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Recording.Stream.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Recording.Stream} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Recording.Stream.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.UUID.serializeBinaryToWriter
    );
  }
  f = message.getEncoder();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rv.data.Recording.Stream.Encoder.serializeBinaryToWriter
    );
  }
  f = message.getDestinationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.rv.data.Recording.Stream.Destination.serializeBinaryToWriter
    );
  }
  f = message.getAudioMapList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.rv.data.DigitalAudio.Device.Map.serializeBinaryToWriter
    );
  }
  f = message.getIsaudiocustommapped();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getOutputScreen();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rv.data.Recording.Stream.OutputScreenSource.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.rv.data.Recording.Stream.Container = {
  CONTAINER_UNKNOWN: 0,
  CONTAINER_MOV: 1,
  CONTAINER_MP4: 2
};

/**
 * @enum {number}
 */
proto.rv.data.Recording.Stream.Codec = {
  CODEC_AUTOMATIC: 0,
  CODEC_H264: 1,
  CODEC_H265: 2,
  CODEC_PRORES_422_PROXY: 3,
  CODEC_PRORES_422_LT: 4,
  CODEC_PRORES_422: 5,
  CODEC_PRORES_422_HQ: 6,
  CODEC_PRORES_4444: 7,
  CODEC_PRORES_4444_XQ: 8,
  CODEC_HAP: 9,
  CODEC_HAP_ALPHA: 10,
  CODEC_HAP_Q: 11,
  CODEC_HAP_Q_ALPHA: 12,
  CODEC_NOTCH: 13,
  CODEC_H264_SOFTWARE: 14,
  CODEC_H265_SOFTWARE: 15
};

/**
 * @enum {number}
 */
proto.rv.data.Recording.Stream.FrameRate = {
  FRAME_RATE_UNKNOWN: 0,
  FRAME_RATE_24: 1,
  FRAME_RATE_25: 2,
  FRAME_RATE_29_97: 3,
  FRAME_RATE_30: 4,
  FRAME_RATE_50: 5,
  FRAME_RATE_59_94: 6,
  FRAME_RATE_60: 7
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Recording.Stream.Encoder.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Recording.Stream.Encoder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Recording.Stream.Encoder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Recording.Stream.Encoder.toObject = function(includeInstance, msg) {
  var f, obj = {
codec: jspb.Message.getFieldWithDefault(msg, 1, 0),
videoWidth: jspb.Message.getFieldWithDefault(msg, 2, 0),
videoHeight: jspb.Message.getFieldWithDefault(msg, 3, 0),
isInterlaced: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
framerate: jspb.Message.getFieldWithDefault(msg, 5, 0),
videoBitrate: jspb.Message.getFieldWithDefault(msg, 6, 0),
audioBitrate: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Recording.Stream.Encoder}
 */
proto.rv.data.Recording.Stream.Encoder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Recording.Stream.Encoder;
  return proto.rv.data.Recording.Stream.Encoder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Recording.Stream.Encoder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Recording.Stream.Encoder}
 */
proto.rv.data.Recording.Stream.Encoder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.rv.data.Recording.Stream.Codec} */ (reader.readEnum());
      msg.setCodec(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVideoWidth(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVideoHeight(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsInterlaced(value);
      break;
    case 5:
      var value = /** @type {!proto.rv.data.Recording.Stream.FrameRate} */ (reader.readEnum());
      msg.setFramerate(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVideoBitrate(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAudioBitrate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Recording.Stream.Encoder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Recording.Stream.Encoder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Recording.Stream.Encoder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Recording.Stream.Encoder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCodec();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getVideoWidth();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getVideoHeight();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getIsInterlaced();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getFramerate();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getVideoBitrate();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getAudioBitrate();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
};


/**
 * optional Codec codec = 1;
 * @return {!proto.rv.data.Recording.Stream.Codec}
 */
proto.rv.data.Recording.Stream.Encoder.prototype.getCodec = function() {
  return /** @type {!proto.rv.data.Recording.Stream.Codec} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.rv.data.Recording.Stream.Codec} value
 * @return {!proto.rv.data.Recording.Stream.Encoder} returns this
 */
proto.rv.data.Recording.Stream.Encoder.prototype.setCodec = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint32 video_width = 2;
 * @return {number}
 */
proto.rv.data.Recording.Stream.Encoder.prototype.getVideoWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.Recording.Stream.Encoder} returns this
 */
proto.rv.data.Recording.Stream.Encoder.prototype.setVideoWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 video_height = 3;
 * @return {number}
 */
proto.rv.data.Recording.Stream.Encoder.prototype.getVideoHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.Recording.Stream.Encoder} returns this
 */
proto.rv.data.Recording.Stream.Encoder.prototype.setVideoHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool is_interlaced = 4;
 * @return {boolean}
 */
proto.rv.data.Recording.Stream.Encoder.prototype.getIsInterlaced = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.Recording.Stream.Encoder} returns this
 */
proto.rv.data.Recording.Stream.Encoder.prototype.setIsInterlaced = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional FrameRate frameRate = 5;
 * @return {!proto.rv.data.Recording.Stream.FrameRate}
 */
proto.rv.data.Recording.Stream.Encoder.prototype.getFramerate = function() {
  return /** @type {!proto.rv.data.Recording.Stream.FrameRate} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.rv.data.Recording.Stream.FrameRate} value
 * @return {!proto.rv.data.Recording.Stream.Encoder} returns this
 */
proto.rv.data.Recording.Stream.Encoder.prototype.setFramerate = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional uint32 video_bitrate = 6;
 * @return {number}
 */
proto.rv.data.Recording.Stream.Encoder.prototype.getVideoBitrate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.Recording.Stream.Encoder} returns this
 */
proto.rv.data.Recording.Stream.Encoder.prototype.setVideoBitrate = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 audio_bitrate = 7;
 * @return {number}
 */
proto.rv.data.Recording.Stream.Encoder.prototype.getAudioBitrate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.rv.data.Recording.Stream.Encoder} returns this
 */
proto.rv.data.Recording.Stream.Encoder.prototype.setAudioBitrate = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Recording.Stream.OutputScreenSource.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Recording.Stream.OutputScreenSource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Recording.Stream.OutputScreenSource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Recording.Stream.OutputScreenSource.toObject = function(includeInstance, msg) {
  var f, obj = {
screenId: (f = msg.getScreenId()) && proto.rv.data.UUID.toObject(includeInstance, f),
screenName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Recording.Stream.OutputScreenSource}
 */
proto.rv.data.Recording.Stream.OutputScreenSource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Recording.Stream.OutputScreenSource;
  return proto.rv.data.Recording.Stream.OutputScreenSource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Recording.Stream.OutputScreenSource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Recording.Stream.OutputScreenSource}
 */
proto.rv.data.Recording.Stream.OutputScreenSource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.UUID;
      reader.readMessage(value,proto.rv.data.UUID.deserializeBinaryFromReader);
      msg.setScreenId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setScreenName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Recording.Stream.OutputScreenSource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Recording.Stream.OutputScreenSource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Recording.Stream.OutputScreenSource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Recording.Stream.OutputScreenSource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScreenId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.UUID.serializeBinaryToWriter
    );
  }
  f = message.getScreenName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional UUID screen_id = 1;
 * @return {?proto.rv.data.UUID}
 */
proto.rv.data.Recording.Stream.OutputScreenSource.prototype.getScreenId = function() {
  return /** @type{?proto.rv.data.UUID} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.UUID, 1));
};


/**
 * @param {?proto.rv.data.UUID|undefined} value
 * @return {!proto.rv.data.Recording.Stream.OutputScreenSource} returns this
*/
proto.rv.data.Recording.Stream.OutputScreenSource.prototype.setScreenId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Recording.Stream.OutputScreenSource} returns this
 */
proto.rv.data.Recording.Stream.OutputScreenSource.prototype.clearScreenId = function() {
  return this.setScreenId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Recording.Stream.OutputScreenSource.prototype.hasScreenId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string screen_name = 2;
 * @return {string}
 */
proto.rv.data.Recording.Stream.OutputScreenSource.prototype.getScreenName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.Recording.Stream.OutputScreenSource} returns this
 */
proto.rv.data.Recording.Stream.OutputScreenSource.prototype.setScreenName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Recording.Stream.DiskDestination.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Recording.Stream.DiskDestination.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Recording.Stream.DiskDestination} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Recording.Stream.DiskDestination.toObject = function(includeInstance, msg) {
  var f, obj = {
location: (f = msg.getLocation()) && proto.rv.data.URL.toObject(includeInstance, f),
container: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Recording.Stream.DiskDestination}
 */
proto.rv.data.Recording.Stream.DiskDestination.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Recording.Stream.DiskDestination;
  return proto.rv.data.Recording.Stream.DiskDestination.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Recording.Stream.DiskDestination} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Recording.Stream.DiskDestination}
 */
proto.rv.data.Recording.Stream.DiskDestination.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.URL;
      reader.readMessage(value,proto.rv.data.URL.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 2:
      var value = /** @type {!proto.rv.data.Recording.Stream.Container} */ (reader.readEnum());
      msg.setContainer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Recording.Stream.DiskDestination.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Recording.Stream.DiskDestination.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Recording.Stream.DiskDestination} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Recording.Stream.DiskDestination.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.URL.serializeBinaryToWriter
    );
  }
  f = message.getContainer();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional URL location = 1;
 * @return {?proto.rv.data.URL}
 */
proto.rv.data.Recording.Stream.DiskDestination.prototype.getLocation = function() {
  return /** @type{?proto.rv.data.URL} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.URL, 1));
};


/**
 * @param {?proto.rv.data.URL|undefined} value
 * @return {!proto.rv.data.Recording.Stream.DiskDestination} returns this
*/
proto.rv.data.Recording.Stream.DiskDestination.prototype.setLocation = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Recording.Stream.DiskDestination} returns this
 */
proto.rv.data.Recording.Stream.DiskDestination.prototype.clearLocation = function() {
  return this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Recording.Stream.DiskDestination.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Container container = 2;
 * @return {!proto.rv.data.Recording.Stream.Container}
 */
proto.rv.data.Recording.Stream.DiskDestination.prototype.getContainer = function() {
  return /** @type {!proto.rv.data.Recording.Stream.Container} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.rv.data.Recording.Stream.Container} value
 * @return {!proto.rv.data.Recording.Stream.DiskDestination} returns this
 */
proto.rv.data.Recording.Stream.DiskDestination.prototype.setContainer = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Recording.Stream.RTMPDestination.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Recording.Stream.RTMPDestination.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Recording.Stream.RTMPDestination} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Recording.Stream.RTMPDestination.toObject = function(includeInstance, msg) {
  var f, obj = {
address: jspb.Message.getFieldWithDefault(msg, 1, ""),
key: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Recording.Stream.RTMPDestination}
 */
proto.rv.data.Recording.Stream.RTMPDestination.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Recording.Stream.RTMPDestination;
  return proto.rv.data.Recording.Stream.RTMPDestination.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Recording.Stream.RTMPDestination} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Recording.Stream.RTMPDestination}
 */
proto.rv.data.Recording.Stream.RTMPDestination.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Recording.Stream.RTMPDestination.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Recording.Stream.RTMPDestination.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Recording.Stream.RTMPDestination} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Recording.Stream.RTMPDestination.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.rv.data.Recording.Stream.RTMPDestination.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.Recording.Stream.RTMPDestination} returns this
 */
proto.rv.data.Recording.Stream.RTMPDestination.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string key = 2;
 * @return {string}
 */
proto.rv.data.Recording.Stream.RTMPDestination.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rv.data.Recording.Stream.RTMPDestination} returns this
 */
proto.rv.data.Recording.Stream.RTMPDestination.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rv.data.Recording.Stream.Destination.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.rv.data.Recording.Stream.Destination.DestinationCase = {
  DESTINATION_NOT_SET: 0,
  DISK: 1,
  RTMP: 2,
  RESI: 3
};

/**
 * @return {proto.rv.data.Recording.Stream.Destination.DestinationCase}
 */
proto.rv.data.Recording.Stream.Destination.prototype.getDestinationCase = function() {
  return /** @type {proto.rv.data.Recording.Stream.Destination.DestinationCase} */(jspb.Message.computeOneofCase(this, proto.rv.data.Recording.Stream.Destination.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Recording.Stream.Destination.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Recording.Stream.Destination.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Recording.Stream.Destination} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Recording.Stream.Destination.toObject = function(includeInstance, msg) {
  var f, obj = {
disk: (f = msg.getDisk()) && proto.rv.data.Recording.Stream.DiskDestination.toObject(includeInstance, f),
rtmp: (f = msg.getRtmp()) && proto.rv.data.Recording.Stream.RTMPDestination.toObject(includeInstance, f),
resi: (f = msg.getResi()) && proto.rv.data.Recording.Stream.Destination.Resi.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Recording.Stream.Destination}
 */
proto.rv.data.Recording.Stream.Destination.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Recording.Stream.Destination;
  return proto.rv.data.Recording.Stream.Destination.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Recording.Stream.Destination} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Recording.Stream.Destination}
 */
proto.rv.data.Recording.Stream.Destination.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.Recording.Stream.DiskDestination;
      reader.readMessage(value,proto.rv.data.Recording.Stream.DiskDestination.deserializeBinaryFromReader);
      msg.setDisk(value);
      break;
    case 2:
      var value = new proto.rv.data.Recording.Stream.RTMPDestination;
      reader.readMessage(value,proto.rv.data.Recording.Stream.RTMPDestination.deserializeBinaryFromReader);
      msg.setRtmp(value);
      break;
    case 3:
      var value = new proto.rv.data.Recording.Stream.Destination.Resi;
      reader.readMessage(value,proto.rv.data.Recording.Stream.Destination.Resi.deserializeBinaryFromReader);
      msg.setResi(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Recording.Stream.Destination.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Recording.Stream.Destination.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Recording.Stream.Destination} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Recording.Stream.Destination.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDisk();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.Recording.Stream.DiskDestination.serializeBinaryToWriter
    );
  }
  f = message.getRtmp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rv.data.Recording.Stream.RTMPDestination.serializeBinaryToWriter
    );
  }
  f = message.getResi();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rv.data.Recording.Stream.Destination.Resi.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rv.data.Recording.Stream.Destination.Resi.prototype.toObject = function(opt_includeInstance) {
  return proto.rv.data.Recording.Stream.Destination.Resi.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rv.data.Recording.Stream.Destination.Resi} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Recording.Stream.Destination.Resi.toObject = function(includeInstance, msg) {
  var f, obj = {
destinationGroupId: (f = msg.getDestinationGroupId()) && proto.rv.data.UUID.toObject(includeInstance, f),
encoderProfileId: (f = msg.getEncoderProfileId()) && proto.rv.data.UUID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rv.data.Recording.Stream.Destination.Resi}
 */
proto.rv.data.Recording.Stream.Destination.Resi.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rv.data.Recording.Stream.Destination.Resi;
  return proto.rv.data.Recording.Stream.Destination.Resi.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rv.data.Recording.Stream.Destination.Resi} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rv.data.Recording.Stream.Destination.Resi}
 */
proto.rv.data.Recording.Stream.Destination.Resi.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rv.data.UUID;
      reader.readMessage(value,proto.rv.data.UUID.deserializeBinaryFromReader);
      msg.setDestinationGroupId(value);
      break;
    case 2:
      var value = new proto.rv.data.UUID;
      reader.readMessage(value,proto.rv.data.UUID.deserializeBinaryFromReader);
      msg.setEncoderProfileId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rv.data.Recording.Stream.Destination.Resi.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rv.data.Recording.Stream.Destination.Resi.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rv.data.Recording.Stream.Destination.Resi} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rv.data.Recording.Stream.Destination.Resi.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDestinationGroupId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rv.data.UUID.serializeBinaryToWriter
    );
  }
  f = message.getEncoderProfileId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rv.data.UUID.serializeBinaryToWriter
    );
  }
};


/**
 * optional UUID destination_group_id = 1;
 * @return {?proto.rv.data.UUID}
 */
proto.rv.data.Recording.Stream.Destination.Resi.prototype.getDestinationGroupId = function() {
  return /** @type{?proto.rv.data.UUID} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.UUID, 1));
};


/**
 * @param {?proto.rv.data.UUID|undefined} value
 * @return {!proto.rv.data.Recording.Stream.Destination.Resi} returns this
*/
proto.rv.data.Recording.Stream.Destination.Resi.prototype.setDestinationGroupId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Recording.Stream.Destination.Resi} returns this
 */
proto.rv.data.Recording.Stream.Destination.Resi.prototype.clearDestinationGroupId = function() {
  return this.setDestinationGroupId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Recording.Stream.Destination.Resi.prototype.hasDestinationGroupId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional UUID encoder_profile_id = 2;
 * @return {?proto.rv.data.UUID}
 */
proto.rv.data.Recording.Stream.Destination.Resi.prototype.getEncoderProfileId = function() {
  return /** @type{?proto.rv.data.UUID} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.UUID, 2));
};


/**
 * @param {?proto.rv.data.UUID|undefined} value
 * @return {!proto.rv.data.Recording.Stream.Destination.Resi} returns this
*/
proto.rv.data.Recording.Stream.Destination.Resi.prototype.setEncoderProfileId = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Recording.Stream.Destination.Resi} returns this
 */
proto.rv.data.Recording.Stream.Destination.Resi.prototype.clearEncoderProfileId = function() {
  return this.setEncoderProfileId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Recording.Stream.Destination.Resi.prototype.hasEncoderProfileId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional DiskDestination disk = 1;
 * @return {?proto.rv.data.Recording.Stream.DiskDestination}
 */
proto.rv.data.Recording.Stream.Destination.prototype.getDisk = function() {
  return /** @type{?proto.rv.data.Recording.Stream.DiskDestination} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Recording.Stream.DiskDestination, 1));
};


/**
 * @param {?proto.rv.data.Recording.Stream.DiskDestination|undefined} value
 * @return {!proto.rv.data.Recording.Stream.Destination} returns this
*/
proto.rv.data.Recording.Stream.Destination.prototype.setDisk = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.rv.data.Recording.Stream.Destination.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Recording.Stream.Destination} returns this
 */
proto.rv.data.Recording.Stream.Destination.prototype.clearDisk = function() {
  return this.setDisk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Recording.Stream.Destination.prototype.hasDisk = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional RTMPDestination rtmp = 2;
 * @return {?proto.rv.data.Recording.Stream.RTMPDestination}
 */
proto.rv.data.Recording.Stream.Destination.prototype.getRtmp = function() {
  return /** @type{?proto.rv.data.Recording.Stream.RTMPDestination} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Recording.Stream.RTMPDestination, 2));
};


/**
 * @param {?proto.rv.data.Recording.Stream.RTMPDestination|undefined} value
 * @return {!proto.rv.data.Recording.Stream.Destination} returns this
*/
proto.rv.data.Recording.Stream.Destination.prototype.setRtmp = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.rv.data.Recording.Stream.Destination.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Recording.Stream.Destination} returns this
 */
proto.rv.data.Recording.Stream.Destination.prototype.clearRtmp = function() {
  return this.setRtmp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Recording.Stream.Destination.prototype.hasRtmp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Resi resi = 3;
 * @return {?proto.rv.data.Recording.Stream.Destination.Resi}
 */
proto.rv.data.Recording.Stream.Destination.prototype.getResi = function() {
  return /** @type{?proto.rv.data.Recording.Stream.Destination.Resi} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Recording.Stream.Destination.Resi, 3));
};


/**
 * @param {?proto.rv.data.Recording.Stream.Destination.Resi|undefined} value
 * @return {!proto.rv.data.Recording.Stream.Destination} returns this
*/
proto.rv.data.Recording.Stream.Destination.prototype.setResi = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.rv.data.Recording.Stream.Destination.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Recording.Stream.Destination} returns this
 */
proto.rv.data.Recording.Stream.Destination.prototype.clearResi = function() {
  return this.setResi(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Recording.Stream.Destination.prototype.hasResi = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional UUID id = 1;
 * @return {?proto.rv.data.UUID}
 */
proto.rv.data.Recording.Stream.prototype.getId = function() {
  return /** @type{?proto.rv.data.UUID} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.UUID, 1));
};


/**
 * @param {?proto.rv.data.UUID|undefined} value
 * @return {!proto.rv.data.Recording.Stream} returns this
*/
proto.rv.data.Recording.Stream.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Recording.Stream} returns this
 */
proto.rv.data.Recording.Stream.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Recording.Stream.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Encoder encoder = 3;
 * @return {?proto.rv.data.Recording.Stream.Encoder}
 */
proto.rv.data.Recording.Stream.prototype.getEncoder = function() {
  return /** @type{?proto.rv.data.Recording.Stream.Encoder} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Recording.Stream.Encoder, 3));
};


/**
 * @param {?proto.rv.data.Recording.Stream.Encoder|undefined} value
 * @return {!proto.rv.data.Recording.Stream} returns this
*/
proto.rv.data.Recording.Stream.prototype.setEncoder = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Recording.Stream} returns this
 */
proto.rv.data.Recording.Stream.prototype.clearEncoder = function() {
  return this.setEncoder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Recording.Stream.prototype.hasEncoder = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated Destination destinations = 4;
 * @return {!Array<!proto.rv.data.Recording.Stream.Destination>}
 */
proto.rv.data.Recording.Stream.prototype.getDestinationsList = function() {
  return /** @type{!Array<!proto.rv.data.Recording.Stream.Destination>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rv.data.Recording.Stream.Destination, 4));
};


/**
 * @param {!Array<!proto.rv.data.Recording.Stream.Destination>} value
 * @return {!proto.rv.data.Recording.Stream} returns this
*/
proto.rv.data.Recording.Stream.prototype.setDestinationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.rv.data.Recording.Stream.Destination=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rv.data.Recording.Stream.Destination}
 */
proto.rv.data.Recording.Stream.prototype.addDestinations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.rv.data.Recording.Stream.Destination, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.Recording.Stream} returns this
 */
proto.rv.data.Recording.Stream.prototype.clearDestinationsList = function() {
  return this.setDestinationsList([]);
};


/**
 * repeated DigitalAudio.Device.Map audio_map = 5;
 * @return {!Array<!proto.rv.data.DigitalAudio.Device.Map>}
 */
proto.rv.data.Recording.Stream.prototype.getAudioMapList = function() {
  return /** @type{!Array<!proto.rv.data.DigitalAudio.Device.Map>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rv.data.DigitalAudio.Device.Map, 5));
};


/**
 * @param {!Array<!proto.rv.data.DigitalAudio.Device.Map>} value
 * @return {!proto.rv.data.Recording.Stream} returns this
*/
proto.rv.data.Recording.Stream.prototype.setAudioMapList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.rv.data.DigitalAudio.Device.Map=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rv.data.DigitalAudio.Device.Map}
 */
proto.rv.data.Recording.Stream.prototype.addAudioMap = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.rv.data.DigitalAudio.Device.Map, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rv.data.Recording.Stream} returns this
 */
proto.rv.data.Recording.Stream.prototype.clearAudioMapList = function() {
  return this.setAudioMapList([]);
};


/**
 * optional bool isAudioCustomMapped = 6;
 * @return {boolean}
 */
proto.rv.data.Recording.Stream.prototype.getIsaudiocustommapped = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rv.data.Recording.Stream} returns this
 */
proto.rv.data.Recording.Stream.prototype.setIsaudiocustommapped = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional OutputScreenSource output_screen = 2;
 * @return {?proto.rv.data.Recording.Stream.OutputScreenSource}
 */
proto.rv.data.Recording.Stream.prototype.getOutputScreen = function() {
  return /** @type{?proto.rv.data.Recording.Stream.OutputScreenSource} */ (
    jspb.Message.getWrapperField(this, proto.rv.data.Recording.Stream.OutputScreenSource, 2));
};


/**
 * @param {?proto.rv.data.Recording.Stream.OutputScreenSource|undefined} value
 * @return {!proto.rv.data.Recording.Stream} returns this
*/
proto.rv.data.Recording.Stream.prototype.setOutputScreen = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.rv.data.Recording.Stream.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rv.data.Recording.Stream} returns this
 */
proto.rv.data.Recording.Stream.prototype.clearOutputScreen = function() {
  return this.setOutputScreen(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rv.data.Recording.Stream.prototype.hasOutputScreen = function() {
  return jspb.Message.getField(this, 2) != null;
};


